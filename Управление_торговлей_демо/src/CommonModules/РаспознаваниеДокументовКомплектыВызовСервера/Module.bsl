#Область СлужебныеПроцедурыИФункции

#Область ИспользуютРаспознанныйДокумент

Функция ПолучитьПараметрыОткрытияФормыТОРГ12(Знач НашДокумент, Знач ВидОперации, Знач ТипДокументаСтрокой) Экспорт
	
	Если ТипЗнч(НашДокумент) = Тип("ДокументСсылка.РаспознанныйДокумент") Тогда
		ДокументОбъект = НашДокумент.ПолучитьОбъект();
	Иначе
		ДокументОбъект = НашДокумент;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Основание", ДокументОбъект.Ссылка);
	ПараметрыЗаполнения.Вставить("ВидОперации", ВидОперации);
	ПараметрыЗаполнения.Вставить("НомерВходящегоДокумента", ДокументОбъект.РеквизитыДокумента[0].Значение);
	ПараметрыЗаполнения.Вставить("ДатаВходящегоДокумента", ДокументОбъект.РеквизитыДокумента[1].Значение);
	
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД Тогда
		
		ПараметрыЗаполнения.Вставить("НомерВходящегоДокументаСчетаФактуры", ДокументОбъект.РеквизитыДокумента[0].Значение);
		ПараметрыЗаполнения.Вставить("ДатаВходящегоДокументаСчетаФактуры", ДокументОбъект.РеквизитыДокумента[1].Значение);
		
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ЭтоУниверсальныйДокумент", ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД);
	ПараметрыЗаполнения.Вставить("Дата", ДокументОбъект.РеквизитыДокумента[1].Значение);
	ПараметрыЗаполнения.Вставить("ДоговорКонтрагента", ДокументОбъект.РеквизитыДокумента[6].Значение);
	
	Для Каждого ДанныеРеквизита Из ДокументОбъект.РеквизитыДокумента Цикл
		ПараметрыЗаполнения.Вставить(ДанныеРеквизита.ИмяРеквизита, ДанныеРеквизита.Значение);
	КонецЦикла;
	
	Если ТипДокументаСтрокой = "ПоступлениеТоваровУслуг" Тогда
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.ПокупательОрганизация);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Продавец);
		
		//ОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(ВидОперации, Ложь);
	Иначе
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.ПродавецОрганизация);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Покупатель);
		
		ПараметрыЗаполнения.Вставить("Номер", ДокументОбъект.РеквизитыДокумента[0].Значение);
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Основание.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
		Или ПараметрыЗаполнения.Основание.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		Или ПараметрыЗаполнения.Основание.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12 Тогда
		
		ПараметрыЗаполнения.Вставить("СуммаВключаетНДС", Ложь);
	Иначе
		
		ПараметрыЗаполнения.Вставить("СуммаВключаетНДС", ДокументОбъект.РеквизитыДокумента[17].Значение);
	КонецЕсли;
	
	Если ТипДокументаСтрокой = "ПоступлениеТоваровУслуг" Тогда
		ПараметрыЗаполнения.Вставить("НДСНеВыделять", Ложь);
	Иначе
		ПараметрыЗаполнения.Вставить("ДокументБезНДС", Ложь);
	КонецЕсли;
	
	Если ТипДокументаСтрокой = "ПоступлениеТоваровУслуг"
		И ПараметрыЗаполнения.Свойство("Склад") Тогда
		
		ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗаполнения.Склад, "ТипСклада");
//		СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(ПараметрыЗаполнения.Организация, ПараметрыЗаполнения.Дата);
//		Если ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка
//			И СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
//			
//			ЗаполнитьСуммуВРознице = Истина;
//		Иначе
//			ЗаполнитьСуммуВРознице = Ложь;
//		КонецЕсли;
//	Иначе
//		ЗаполнитьСуммуВРознице = Ложь;
	КонецЕсли;
	
	СтрокиТаблицыТовары = Новый Массив;
	СтрокиТаблицыУслуги = Новый Массив;
	
	ТаблицаДокумента = РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(ДокументОбъект);
	КолонкиТаблицы = ТаблицаДокумента.Колонки;
	Для Каждого СтрокаТаблицыДокумента Из ТаблицаДокумента Цикл
		ДанныеСтрокиТаблицы = Новый Структура();
		Для Каждого Колонка Из КолонкиТаблицы Цикл
			Если Колонка.Имя = "ЕдиницаИзмерения" Тогда
				ДанныеСтрокиТаблицы.Вставить(Колонка.Имя,
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицыДокумента.Номенклатура, "ЕдиницаИзмерения"));
			Иначе
				ДанныеСтрокиТаблицы.Вставить(Колонка.Имя, СтрокаТаблицыДокумента[Колонка.Имя]);
			КонецЕсли;
			//Если Колонка.Имя = "Всего" И ЗаполнитьСуммуВРознице Тогда
			//	ДанныеСтрокиТаблицы.Вставить("СуммаВРознице", СтрокаТаблицыДокумента[Колонка.Имя]);
			//КонецЕсли;
		КонецЦикла;
		
		Если ТипДокументаСтрокой = "ПоступлениеТоваровУслуг" Тогда
			//ДанныеСтрокиТаблицы.Вставить("ОтражениеВУСН", ОтражениеВУСН);
		КонецЕсли;
		
		Если СтрокаТаблицыДокумента.Номенклатура.Услуга Тогда
			СтрокиТаблицыУслуги.Добавить(ДанныеСтрокиТаблицы);
		Иначе
			ДанныеСтрокиТаблицы.Вставить("Коэффициент", 1);
			СтрокиТаблицыТовары.Добавить(ДанныеСтрокиТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗаполнения.Вставить("Товары", СтрокиТаблицыТовары);
	ПараметрыЗаполнения.Вставить("Услуги", СтрокиТаблицыУслуги);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция ПолучитьПараметрыОткрытияФормыСчетНаОплату(Знач НашДокумент, Знач ТипДокументаСтрокой) Экспорт
	
	Если ТипЗнч(НашДокумент) = Тип("ДокументСсылка.РаспознанныйДокумент") Тогда
		ДокументОбъект = НашДокумент.ПолучитьОбъект();
	Иначе
		ДокументОбъект = НашДокумент;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Основание", ДокументОбъект.Ссылка);
	ПараметрыЗаполнения.Вставить("НомерВходящегоДокумента", ДокументОбъект.РеквизитыДокумента[0].Значение);
	ПараметрыЗаполнения.Вставить("ДатаВходящегоДокумента", ДокументОбъект.РеквизитыДокумента[1].Значение);
	ПараметрыЗаполнения.Вставить("Дата", ДокументОбъект.РеквизитыДокумента[1].Значение);
	ПараметрыЗаполнения.Вставить("ДоговорКонтрагента", ДокументОбъект.РеквизитыДокумента[6].Значение);
	ПараметрыЗаполнения.Вставить("СрокОплаты", ДокументОбъект.РеквизитыДокумента[7].Значение);
	
	Для Каждого ДанныеРеквизита Из ДокументОбъект.РеквизитыДокумента Цикл
		ПараметрыЗаполнения.Вставить(ДанныеРеквизита.ИмяРеквизита, ДанныеРеквизита.Значение);
	КонецЦикла;
	
	Если ТипДокументаСтрокой = "СчетНаОплатуПоставщика" Тогда
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.ПокупательОрганизация);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Продавец);
	Иначе
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.Исполнитель);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Покупатель);
		ПараметрыЗаполнения.Вставить("ОрганизацияПолучатель", ПараметрыЗаполнения.ПродавецОрганизация);
		
		ПараметрыЗаполнения.Вставить("СтруктурнаяЕдиница", ПараметрыЗаполнения.БанковскийСчетОрганизации);
		ПараметрыЗаполнения.Вставить("Номер", ДокументОбъект.РеквизитыДокумента[0].Значение);
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("СуммаВключаетНДС", ДокументОбъект.РеквизитыДокумента[26].Значение);
	
	ТаблицаТовары = РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(ДокументОбъект);
	
	ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(
		ДокументОбъект, "ВидСкидки", РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НеПредоставлена);
	Если ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НаОтдельныеПозиции Тогда
		Если ТипДокументаСтрокой = "СчетНаОплатуПоставщика" Тогда
			
			// В счете от поставщика сумма принимает смысл "Сумма с учетом скидки".
			
			Для Каждого Строка Из ТаблицаТовары Цикл
				Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
			КонецЦикла;
			
		Иначе
			
			// Сумма используемая в типовом документе имеет смысл "Сумма без скидки".
			
			Для Каждого Строка Из ТаблицаТовары Цикл
				Если Строка.СуммаСкидки < 0 Тогда
					Строка.Цена = Строка.Сумма / ?(Строка.Количество = 0, 1, Строка.Количество);
				Иначе
					Строка.Сумма = Строка.Сумма + Строка.СуммаСкидки;
					Строка.Всего = Строка.Сумма;
					Строка.ПроцентСкидки = ?(Строка.Сумма = 0, 0, Строка.СуммаСкидки / Строка.Сумма * 100);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().ПоДокументуВЦелом Тогда
		
		Если ТипДокументаСтрокой = "СчетНаОплатуПоставщика" Тогда
			
			ИтогоСуммаСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(ДокументОбъект, "ИтогоСуммаСкидки", 0);
			ДанныеОбъекта = Новый Структура;
			ДанныеОбъекта.Вставить("СуммаСкидки", ИтогоСуммаСкидки);
			ДанныеОбъекта.Вставить("СуммаВключаетНДС", ПараметрыЗаполнения.СуммаВключаетНДС);
			
			//ОбработкаТабличныхЧастей.РаспределитьСкидкуПоСтрокамТабЧасти(ТаблицаТовары, ДанныеОбъекта);
			
		Иначе
			
			ПараметрыЗаполнения.Вставить("СуммаСкидки", ПараметрыЗаполнения.ИтогоСуммаСкидки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиТаблицыТовары = Новый Массив;
	
	КолонкиТаблицы = ТаблицаТовары.Колонки;
	Для Каждого СтрокаТаблицыДокумента Из ТаблицаТовары Цикл
		ДанныеСтрокиТаблицы = Новый Структура();
		Для Каждого Колонка Из КолонкиТаблицы Цикл
			ДанныеСтрокиТаблицы.Вставить(Колонка.Имя, СтрокаТаблицыДокумента[Колонка.Имя]);
		КонецЦикла;
		
		СтрокиТаблицыТовары.Добавить(ДанныеСтрокиТаблицы);
	КонецЦикла;
	
	ПараметрыЗаполнения.Вставить("Товары", СтрокиТаблицыТовары);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция СоздатьДокументыКомплектаВызовСервера(ПараметрыСоздания) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("УдалосьПровести", Ложь);
	Результат.Вставить("СоответствиеСтатусОбработан", Неопределено);
	Результат.Вставить("ОшибкиПроведения", Новый Соответствие);
	
	ТипыДокументов = РаспознаваниеДокументовКомплектыКлиентСервер.СоздаваемыеДокументыКомплекта(ПараметрыСоздания);
	
	РаспознанныеОбъектыДляТипа = Новый Массив;
	ОткудаПрикреплятьСканы = Новый Массив;
	ТаблицаРаспознанныхСозданных = Новый ТаблицаЗначений;
	ТаблицаРаспознанныхСозданных.Колонки.Добавить("РаспознанныйОбъект");
	ТаблицаРаспознанныхСозданных.Колонки.Добавить("СоздаваемыйДокумент");
	ТаблицаРаспознанныхСозданных.Колонки.Добавить("СоздатьДокумент");
	ТаблицаРаспознанныхСозданных.Колонки.Добавить("ДанныеОбратнойСвязи");
	
	СоздаваемыйДокумент = Неопределено;
	УдалосьПровести = Ложь;
	ОбщийТекстОшибки = НСтр("ru = 'Исправьте ошибки заполнения документов комплекта или обработайте их по отдельности.'");
	НачатьТранзакцию();
	Попытка
		Для Каждого ЭтотТипДокумента Из ТипыДокументов Цикл
			ДанныеСозданного = ПараметрыСоздания.СозданныеДокументы[ЭтотТипДокумента];
			ТипыРаспознанных = РаспознаваниеДокументовКомплектыКлиентСервер.ПодходящиеТипыРаспознанногоДокумента(ЭтотТипДокумента);
			
			РаспознанныеОбъектыДляТипа.Очистить();
			ОткудаПрикреплятьСканы.Очистить();
			ДанныеРаспознанного = Неопределено;
			УстановленСтатусОбработан = Ложь;
			Для Каждого ТипРаспознанного Из ТипыРаспознанных Цикл
				ДопДанныеРаспознанного = ПараметрыСоздания.РаспознанныеДокументыПоТипам.Получить(ТипРаспознанного);
				Если ДопДанныеРаспознанного = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ДопРаспознанныйОбъект = ДопДанныеРаспознанного.Ссылка.ПолучитьОбъект();
				Если (ДанныеСозданного.СоздатьДокумент Или ДанныеСозданного.ДокументНайден)
					И Не (УстановленСтатусОбработан И ДопРаспознанныйОбъект.ТипДокумента 
					= Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура) Тогда
					
					// Статус Обработан ставится всем распознанным документам, которые будут созданы или для них найден типовой документ,
					// но есть исключение: возможно создание поступления/реализации по СФ (см. ПодходящиеТипыРаспознанногоДокумента), но ей
					// не нужно ставить Статус Обработан, если фактически поступление/реализация создается по Торг12, Акту или УПД
					ДопРаспознанныйОбъект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
					ДопРаспознанныйОбъект.Записать();
					УстановленСтатусОбработан = Истина;
				КонецЕсли;
				
				РаспознанныеОбъектыДляТипа.Добавить(ДопРаспознанныйОбъект);
				
				Если ДанныеРаспознанного = Неопределено Тогда
					ДанныеРаспознанного = ДопДанныеРаспознанного;
					РаспознанныйОбъект = ДопРаспознанныйОбъект;
					Если ДанныеСозданного.ПрикрепитьСкан Тогда
						// Для прикрепления основного скана
						ОткудаПрикреплятьСканы.Добавить(ДопРаспознанныйОбъект);
					КонецЕсли;
				ИначеЕсли СоздаваемыйДокумент = Неопределено
					И ДанныеСозданного.СоздатьДокумент // Эти данные потребуются, только если нужно СоздатьДокумент
					И НужноОбъединитьТабличныеЧасти(РаспознанныйОбъект.ТипДокумента, ДопРаспознанныйОбъект.ТипДокумента) Тогда
					
					// Дополняем ДанныеРаспознанного только, если основного документа не было
					Для Каждого ЭтотПараметр Из ДопДанныеРаспознанного.ПараметрыЗаполнения Цикл
						Если ТипЗнч(ЭтотПараметр.Значение) = Тип("Массив") Тогда
							Для Каждого СтрокаТаблицы Из ЭтотПараметр.Значение Цикл
								ДанныеРаспознанного.ПараметрыЗаполнения[ЭтотПараметр.Ключ].Добавить(СтрокаТаблицы);
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Если ДанныеСозданного.ПрикрепитьСкан
					И НужноПрикрепитьДополнительныйСкан(ПараметрыСоздания.ТипКомплекта, ТипРаспознанного, ЭтотТипДокумента) Тогда
					ОткудаПрикреплятьСканы.Добавить(ДопРаспознанныйОбъект);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ДанныеСозданного.СоздатьДокумент Тогда
				СоздаваемыйДокумент = ДанныеСозданного.Ссылка;
			Иначе
				
				ОбрабатываемыйДокумент = ДанныеРаспознанного.Ссылка;
				Если СоздаваемыйДокумент = Неопределено Тогда
					
					// Создание основного документа
					ТипДокументаСтрокой = СтрРазделить(XMLТип(ЭтотТипДокумента).ИмяТипа, ".")[1];
					
					СоздаваемыйДокумент = РаспознаваниеДокументовСлужебный.СоздатьДокументНаОснованииРаспознанного(
						ДанныеРаспознанного.Ссылка,
						ТипДокументаСтрокой,
						ДанныеРаспознанного.ПараметрыЗаполнения,
						РежимЗаписиДокумента.Проведение
					);
					
					СоздаваемыйДокументОбъект = СоздаваемыйДокумент.ПолучитьОбъект();
					
					Если ЭтотТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
						Или ЭтотТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						
						Если Не ЗначениеЗаполнено(СоздаваемыйДокументОбъект.ДоговорКонтрагента) Тогда
							СоздаваемыйДокументОбъект.ДоговорКонтрагента = РаспознаваниеДокументовСлужебный.НайтиДоговорКонтрагента(РаспознанныйОбъект);
						КонецЕсли;
						СоздаваемыйДокументОбъект.Склад = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(РаспознанныйОбъект, "Склад");
						Если Не ЗначениеЗаполнено(СоздаваемыйДокументОбъект.Склад) Тогда
							СоздаваемыйДокументОбъект.Склад = РаспознаваниеДокументовПереопределяемый.ПолучитьСкладПоУмолчанию();
						КонецЕсли;
					КонецЕсли;
					
					СоздаваемыйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
					ДанныеСозданного.Ссылка = СоздаваемыйДокумент;
					
				Иначе
					
					// Создание подчиненного документа
					Если ЭтотТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
						Или ЭтотТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
						
						// Постепление или Реализацию создаем на основании счета на оплату из СоздаваемыйДокументОбъект
						ТипДокументаСтрокой = СтрРазделить(XMLТип(ЭтотТипДокумента).ИмяТипа, ".")[1];
						ПараметрыЗаполнения = СоздаваемыйДокумент;
						
						СоздаваемыйДокументОбъект = Документы[ТипДокументаСтрокой].СоздатьДокумент();
						СоздаваемыйДокументОбъект.Заполнить(ПараметрыЗаполнения);
//						Если ПараметрыСоздания.ПараметрыОперации.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
//							Или ПараметрыСоздания.ПараметрыОперации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
//							
//							СоздаваемыйДокументОбъект.ВидОперации = ПараметрыСоздания.ПараметрыОперации.ВидОперации;
//						КонецЕсли;
						
						СоздаваемыйДокументОбъект.Номер = РаспознанныйОбъект.НомерДокумента;
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СоздаваемыйДокументОбъект, "НомерВходящегоДокумента") Тогда
							СоздаваемыйДокументОбъект.НомерВходящегоДокумента = РаспознанныйОбъект.НомерДокумента;
						КонецЕсли;
						СоздаваемыйДокументОбъект.Дата = РаспознанныйОбъект.ДатаДокумента;
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СоздаваемыйДокументОбъект, "ДатаВходящегоДокумента") Тогда
							СоздаваемыйДокументОбъект.ДатаВходящегоДокумента = РаспознанныйОбъект.ДатаДокумента;
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(СоздаваемыйДокументОбъект.ДоговорКонтрагента) Тогда
							СоздаваемыйДокументОбъект.ДоговорКонтрагента = РаспознаваниеДокументовСлужебный.НайтиДоговорКонтрагента(РаспознанныйОбъект);
						КонецЕсли;
						СоздаваемыйДокументОбъект.Склад = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(РаспознанныйОбъект, "Склад");
						Если Не ЗначениеЗаполнено(СоздаваемыйДокументОбъект.Склад) Тогда
							СоздаваемыйДокументОбъект.Склад = РаспознаваниеДокументовПереопределяемый.ПолучитьСкладПоУмолчанию();
						КонецЕсли;
						
						Если РаспознанныйОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД Тогда
							СоздаваемыйДокументОбъект.ЭтоУниверсальныйДокумент = Истина;
							// Признак ЭтоУПД будем ставить только если данные для Поступления (или Реализации) брались именно из УПД.
							// Также по приоритетам это будет значит, что в комплект не входят Торг-12 или Акт, иначе данные брались бы оттуда.
						КонецЕсли;
						
						СоздаваемыйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
						СоздаваемыйДокумент = СоздаваемыйДокументОбъект.Ссылка;
						
						ДанныеСозданного.Ссылка = СоздаваемыйДокумент;
						
					ИначеЕсли ЭтотТипДокумента = Тип("ДокументСсылка.СчетФактураПолученный")
						Или ЭтотТипДокумента = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
						
						СчетФактураСсылка = Неопределено;
						ТипДокументаСтрокой = СтрРазделить(XMLТип(ЭтотТипДокумента).ИмяТипа, ".")[1];
						
						ПараметрыЗаполнения = ДанныеРаспознанного.ПараметрыЗаполнения;
						ПараметрыЗаполнения.Вставить("НомерВходящегоДокумента", РаспознанныйОбъект.НомерДокумента);
						ПараметрыЗаполнения.Вставить("ДатаВходящегоДокумента", РаспознанныйОбъект.ДатаДокумента);
						
						ПараметрыСозданияСФ = Новый Структура;
						ПараметрыСозданияСФ.Вставить("ТипДокументаСтрокой", ТипДокументаСтрокой);
						ПараметрыСозданияСФ.Вставить("Основание", СоздаваемыйДокумент);
						ПараметрыСозданияСФ.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
						
						РаспознаваниеДокументовПереопределяемый.ПриСозданииСчетФактуры(ПараметрыСозданияСФ, СчетФактураСсылка);
						
						Если СчетФактураСсылка = Неопределено Тогда
							ВызватьИсключение ОбщийТекстОшибки;
						Иначе
							СоздаваемыйДокумент = СчетФактураСсылка;
						КонецЕсли;
						
						ДанныеСозданного.Ссылка = СоздаваемыйДокумент;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ОбрабатываемыйДокумент = СоздаваемыйДокумент;
			Если ДанныеСозданного.ПрикрепитьСкан Тогда
				Для Каждого ОбъектСоСканом Из ОткудаПрикреплятьСканы Цикл
					АдресКартинки = ПоместитьВоВременноеХранилище(ОбъектСоСканом.ИсходноеИзображение.Получить());
					РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(ОбъектСоСканом, СоздаваемыйДокумент, АдресКартинки);
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого ЭтотРаспознанныйОбъект Из РаспознанныеОбъектыДляТипа Цикл
				СтрокаТаблицыСвязи = ТаблицаРаспознанныхСозданных.Добавить();
				СтрокаТаблицыСвязи.РаспознанныйОбъект = ЭтотРаспознанныйОбъект;
				СтрокаТаблицыСвязи.СоздаваемыйДокумент = СоздаваемыйДокумент;
				СтрокаТаблицыСвязи.СоздатьДокумент = ДанныеСозданного.СоздатьДокумент;
			КонецЦикла;
			
		КонецЦикла;
		
		УдалосьПровести = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		СообщенияОбОшибках = Новый Массив(ПолучитьСообщенияПользователю(Истина));
		ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Если ПредставлениеОшибки <> ОбщийТекстОшибки Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			СообщенияОбОшибках.Вставить(0, Сообщение);
		КонецЕсли;
		Результат.ОшибкиПроведения.Вставить(ОбрабатываемыйДокумент, СообщенияОбОшибках);
		
		Возврат Результат;
	КонецПопытки;
	
	
	ТипыДокументовВСервисе = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьОбратноеСоответствие(Документы.РаспознанныйДокумент.СоответствиеТиповДокументовВСервисеИБРД());
	set_id = Строка(Новый УникальныйИдентификатор);
	
	ОсновнойДокумент = Истина;
	Для Каждого СтрокаТаблицыСвязи Из ТаблицаРаспознанныхСозданных Цикл
		ДанныеОбратнойСвязи = РаспознаваниеДокументовКомплектыВызовСервера.ПолучитьОбратнуюСвязьДляСозданногоДокумента(
			СтрокаТаблицыСвязи.РаспознанныйОбъект,
			СтрокаТаблицыСвязи.СоздаваемыйДокумент
		);
		Если СтрокаТаблицыСвязи.СоздатьДокумент Тогда
			Пакет = Новый Структура;
			Пакет.Вставить("created", ДанныеОбратнойСвязи);
			РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(СтрокаТаблицыСвязи.РаспознанныйОбъект.ИдентификаторРезультата, Пакет);
		КонецЕсли;
		
		// Пакет created отправлен. Готовим из данные для set_creation
		ДанныеОбратнойСвязи.Удалить("Статус");
		ДанныеОбратнойСвязи.Вставить("set_id", set_id);
		ДанныеОбратнойСвязи.Вставить("doc_uuid", СтрокаТаблицыСвязи.РаспознанныйОбъект.ИдентификаторРезультата);
		ДанныеОбратнойСвязи.Вставить("ТипДокумента", ТипыДокументовВСервисе.Получить(СтрокаТаблицыСвязи.РаспознанныйОбъект.ТипДокумента));
		ДанныеОбратнойСвязи.Вставить("ОсновнойДокумент", ОсновнойДокумент);
		Если ОсновнойДокумент Тогда
			ОсновнойДокумент = Ложь;
		КонецЕсли;
		
		СтрокаТаблицыСвязи.ДанныеОбратнойСвязи = ДанныеОбратнойСвязи;
	КонецЦикла;
	
	
	ДанныеПакета = Новый Массив;
	Если ПараметрыСоздания.ДанныеОбработки <> Неопределено
		И ПараметрыСоздания.Свойство("НомерКомплекта") Тогда
		
		ДанныеКомплекта = ПараметрыСоздания.ДанныеОбработки.РезультатОбратнойСвязи.Комплекты.Получить(ПараметрыСоздания.НомерКомплекта);
		Для Каждого КлючЗначение Из ДанныеКомплекта Цикл
			СвязьНайдена = Ложь;
			Для Каждого СтрокаТаблицыСвязи Из ТаблицаРаспознанныхСозданных Цикл
				Если СтрокаТаблицыСвязи.РаспознанныйОбъект.Ссылка = КлючЗначение.Ключ Тогда
					СтрокаТаблицыСвязи.ДанныеОбратнойСвязи.Вставить("Действие", КлючЗначение.Значение);
					ДанныеПакета.Добавить(СтрокаТаблицыСвязи.ДанныеОбратнойСвязи);
					
					СвязьНайдена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не СвязьНайдена Тогда
				// При каких условиях можно зайти в эту ветку?
				
				ДопРаспознанныеДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КлючЗначение.Ключ,
					"Номер, Направление, ТипДокумента, НомерДокумента, ДатаДокумента, СуммаДокумента, Контрагент, Организация, ИдентификаторРезультата");
				ДопДанныеПакета = РаспознаваниеДокументовКомплектыВызовСервера.ПолучитьОбратнуюСвязьДляСозданногоДокумента(ТаблицаРаспознанныхСозданных[0].РаспознанныйОбъект);
				ДопДанныеПакета.Удалить("Статус");
				ДопДанныеПакета.Вставить("set_id", set_id);
				ДопДанныеПакета.Вставить("doc_uuid", ДопРаспознанныеДанные.ИдентификаторРезультата);
				ДопДанныеПакета.Вставить("ТипДокумента", ТипыДокументовВСервисе.Получить(ДопРаспознанныеДанные.ТипДокумента));
				ДопДанныеПакета.Вставить("ОсновнойДокумент", Ложь);
				ДопДанныеПакета.Вставить("Действие", КлючЗначение.Значение);
				
				ДанныеПакета.Добавить(ДопДанныеПакета);
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыСоздания.ДанныеОбработки.ГрупповаяОбработка Тогда
			ОбратнаяСвязь = ПараметрыСоздания.ДанныеОбработки.РезультатОбратнойСвязи.Отправить;
			Если Не ЗначениеЗаполнено(ОбратнаяСвязь) Тогда
				ОбратнаяСвязь.Вставить("ИдентификаторРезультата", ТаблицаРаспознанныхСозданных[0].РаспознанныйОбъект.ИдентификаторРезультата);
				ОбратнаяСвязь.Вставить("ДанныеПакета", ДанныеПакета);
			Иначе
				Для Каждого ЧастьПакета Из ДанныеПакета Цикл
					ОбратнаяСвязь.ДанныеПакета.Добавить(ЧастьПакета);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Пакет = Новый Структура;
			Пакет.Вставить("set_creation", Новый Структура("set_data", ДанныеПакета));
			РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(ТаблицаРаспознанныхСозданных[0].РаспознанныйОбъект.ИдентификаторРезультата, Пакет);
		КонецЕсли;
	Иначе
		Для Каждого СтрокаТаблицыСвязи Из ТаблицаРаспознанныхСозданных Цикл
			СтрокаТаблицыСвязи.ДанныеОбратнойСвязи.Вставить("Действие", "ДобавленАвтоматически");
			ДанныеПакета.Добавить(СтрокаТаблицыСвязи.ДанныеОбратнойСвязи);
		КонецЦикла;
		
		Пакет = Новый Структура;
		Пакет.Вставить("set_creation", Новый Структура("set_data", ДанныеПакета));
		РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(ТаблицаРаспознанныхСозданных[0].РаспознанныйОбъект.ИдентификаторРезультата, Пакет);
	КонецЕсли;
	
	Результат.УдалосьПровести = УдалосьПровести;
	
	СоответствиеСтатусОбработан = Новый Соответствие;
	Для Каждого СтрокаТаблицыСвязи Из ТаблицаРаспознанныхСозданных Цикл
		СоответствиеСтатусОбработан.Вставить(СтрокаТаблицыСвязи.РаспознанныйОбъект.Ссылка, СтрокаТаблицыСвязи.СоздаваемыйДокумент);
	КонецЦикла;
	Результат.СоответствиеСтатусОбработан = СоответствиеСтатусОбработан;
	
	Если Результат.УдалосьПровести
		И ПараметрыСоздания.ДанныеОбработки <> Неопределено
		И ПараметрыСоздания.Свойство("НомерКомплекта") Тогда
		
		ПараметрыСоздания.ДанныеОбработки.НомераСозданныхКомплектов.Добавить(ПараметрыСоздания.НомерКомплекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НужноПрикрепитьДополнительныйСкан(ТипКомплекта, ТипРаспознанного, ТипСозданного)
	
	// Кроме основного скана могут потребоваться дополнительные
	Если ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуТОРГ12"
		Или ТипКомплекта = "АктОбОказанииУслугСчетФактураТОРГ12"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12"
		Тогда
		
		Если ТипРаспознанного = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг
			И (ТипСозданного = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
				Или ТипСозданного = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
				
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипКомплекта = "АктОбОказанииУслугСчетФактураУПД"
		Или ТипКомплекта = "СчетФактураТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураУПД"
		Или ТипКомплекта = "СчетНаОплатуСчетФактураТОРГ12УПД"
		Тогда
		
		Если ТипРаспознанного = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			И (ТипСозданного = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
				Или ТипСозданного = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
				
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипКомплекта = "АктОбОказанииУслугТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетФактураТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуТОРГ12УПД"
		Или ТипКомплекта = "АктОбОказанииУслугСчетНаОплатуСчетФактураТОРГ12УПД"
		Тогда
		
		Если (ТипРаспознанного = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
				Или ТипРаспознанного = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг)
			И (ТипСозданного = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
				Или ТипСозданного = Тип("ДокументСсылка.РеализацияТоваровУслуг")) Тогда
				
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НужноОбъединитьТабличныеЧасти(ТипДокумента1, ТипДокумента2)
	
	Возврат (ТипДокумента1 = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
		И ТипДокумента2 = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг
		ИЛИ
		ТипДокумента1 = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг
		И ТипДокумента2 = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12);
	
КонецФункции

Функция ПараметрыЗаполненияДляСозданияДокумента(РаспознанныйДокумент, ТипРаспознанного, ТипСоздаваемого, ПараметрыОперации) Экспорт
	
	Результат = Неопределено;
	
	ТипДокументаСтрокой = СтрРазделить(XMLТип(ТипСоздаваемого).ИмяТипа, ".")[1];
	Если ТипРаспознанного = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.ТОРГ12")
		Или ТипРаспознанного = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг")
		Или ТипРаспознанного = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.УПД")
		Или ТипРаспознанного = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетФактура") Тогда
		
		Результат = РаспознаваниеДокументовКомплектыВызовСервера.ПолучитьПараметрыОткрытияФормыТОРГ12(
			РаспознанныйДокумент,
			ПараметрыОперации.ВидОперации,
			ТипДокументаСтрокой
		);
		
	ИначеЕсли ТипРаспознанного = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату") Тогда
		
		Результат = РаспознаваниеДокументовКомплектыВызовСервера.ПолучитьПараметрыОткрытияФормыСчетНаОплату(
			РаспознанныйДокумент,
			ТипДокументаСтрокой
		);
		
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		Результат.Вставить("ТипДокументаСтрокой", ТипДокументаСтрокой);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ЗапрещеноСозданиеДокументаВЗакрытомПериоде(Знач ТипДокументаСтрокой, Знач ДатаДокумента) Экспорт
	
	ПроверяемыйДокумент = Документы[ТипДокументаСтрокой].СоздатьДокумент();
	ПроверяемыйДокумент.Дата = ДатаДокумента;
	РедактированиеЗапрещено = ДатыЗапретаИзменения.ИзменениеЗапрещено(ПроверяемыйДокумент);
	
	Возврат РедактированиеЗапрещено;
	
КонецФункции

Функция ПолучитьОбратнуюСвязьДляСозданногоДокумента(ДокументОбъект, СоздаваемыйДокумент = Неопределено) Экспорт
	
	Результат = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Проведен");
	Если СоздаваемыйДокумент = Неопределено Тогда
		Результат.IdСозданногоДокумента = "";
	Иначе
		Результат.IdСозданногоДокумента = Строка(СоздаваемыйДокумент.УникальныйИдентификатор());
	КонецЕсли;
	Результат.НомерРаспознанногоДокумента = ДокументОбъект.Номер;
	Результат.ЭтоВходящийДокумент = (ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Результат.НомерДокумента = ДокументОбъект.НомерДокумента;
	Результат.ДатаДокумента = ДокументОбъект.ДатаДокумента;
	Результат.СуммаДокумента = ДокументОбъект.СуммаДокумента;
	Результат.Контрагент = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ДокументОбъект.Контрагент);
	Результат.Организация = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ДокументОбъект.Организация);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

