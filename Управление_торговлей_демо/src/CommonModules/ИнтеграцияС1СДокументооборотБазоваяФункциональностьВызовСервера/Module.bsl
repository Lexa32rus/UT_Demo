////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера: сервер, вызов сервера
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Получает версию сервиса ДО.
//
// Параметры:
//   Таймаут - Число - неявно возвращаемое значение, установленный для прокси таймаут в секундах,
//     в течение которого клиент может ожидать успешного подключения или ответа о недоступности сервиса.
//
// Возвращаемое значение:
//   Строка - версия сервиса.
//
Функция ВерсияСервиса(Таймаут = Неопределено) Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса(Таймаут);
	
КонецФункции

// Выполняет обмен данными с 1С:Документооборотом по правилам интеграции.
//
Процедура ВыполнитьОбменДанными() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ИнтеграцияС1СДокументооборотВыполнитьОбменДанными);
	
	Настройки = ИспользоватьИнтеграцию();
	
	Если Не Настройки.ИспользоватьИнтеграциюДО2 И Не Настройки.ИспользоватьИнтеграциюДО3 Тогда
		УзелДокументооборота = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.УзелДокументооборота();
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелДокументооборота);
		Возврат;
	КонецЕсли;
	
	// Прочтем настройки авторизации и установим их в параметры сеанса. Константы могут быть недоступны.
	УстановитьПривилегированныйРежим(Истина);
	ИмяПользователя = Константы.ИнтеграцияС1СДокументооборотИмяПользователяДляОбмена.Получить();
	Пароль = Константы.ИнтеграцияС1СДокументооборотПарольДляОбмена.Получить();
	Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда // прочтем настройки из пользовательского хранилища.
		
		ПарольСохранен = Ложь;
		ПрочитатьНастройкиАвторизацииИзХранилищаОбщихНастроек(
			ИмяПользователя, Пароль, ПарольСохранен);
		
		Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
			
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				НСтр("ru = 'Для пользователя регламентного задания обмена не указано имя пользователя 1С:Документооборота'",
					ОбщегоНазначения.КодОсновногоЯзыка()));
			
			Возврат;
			
		КонецЕсли;
		
		Если ПарольСохранен <> Истина Тогда
			
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				НСтр("ru = 'Для пользователя регламентного задания обмена не сохранен пароль 1С:Документооборота'",
					ОбщегоНазначения.КодОсновногоЯзыка()));
			
			Возврат;
			
		КонецЕсли;
		
		// Перенесем настройки в константы.
		СохранитьНастройкиАвторизацииДляОбмена(ИмяПользователя, Пароль);
		УдалитьНастройкиАвторизацииИзХранилищаОбщихНастроек();
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьНастройкиАвторизацииВПараметрыСеанса(
		ИмяПользователя,
		Пароль,
		Ложь);
	
	// Проверим поддержку синхронизации
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3.CORP") Тогда
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("") Тогда
			// Сервис доступен, но версия младше требуемой
			УзелДокументооборота = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.УзелДокументооборота();
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелДокументооборота);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборотОбмен = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборотОбмен");
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульИнтеграцияС1СДокументооборот3Обмен = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3Обмен");
	КонецЕсли;
	
	ПодготовитьДанныеДляОтправки(
		Прокси,
		Настройки,
		МодульИнтеграцияС1СДокументооборотОбмен,
		МодульИнтеграцияС1СДокументооборот3Обмен);
	ОтправитьДанные(Прокси, Настройки);
	ОчиститьУстаревшиеДанные();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборотОбмен.ПолучитьДанные();
	КонецЕсли;
	
КонецПроцедуры

// Добавляет связь объекта ИС с объектом ДО.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ИнтегрированныйОбъект - ЛюбаяСсылка - объект ИС.
//   НаличиеПрисоединенныхФайлов - Булево - Истина, если в ДО есть присоединенные файлы.
//
Процедура ДобавитьСвязь(ID, Тип, ИнтегрированныйОбъект, НаличиеПрисоединенныхФайлов = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMAddObjectLinkRequest");
		
		Запрос.ownerObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "ExternalObject");
		Запрос.ownerObject.ID = Строка(ИнтегрированныйОбъект.УникальныйИдентификатор());
		Запрос.ownerObject.type = ИнтегрированныйОбъект.Метаданные().ПолноеИмя();
		Запрос.ownerObject.name = Строка(ИнтегрированныйОбъект);
		
		Запрос.linkedObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectID");
		Запрос.linkedObject.ID = ID;
		Запрос.linkedObject.type = Тип;
		
		Ответ = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		
		Если НаличиеПрисоединенныхФайлов = Истина Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриПоявленииПрисоединенныхФайловДокументооборота(
				ID,
				Тип,
				ИнтегрированныйОбъект);
		КонецЕсли;
		
		РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(ID, Тип, ИнтегрированныйОбъект);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(
				НСтр("ru = 'Не удалось добавить связь'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Записывает предупреждение в ЖР.
//
Процедура ЗаписатьПредупреждение(ТекстПредупреждения) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Предупреждение,,,
		ТекстПредупреждения);
	
КонецПроцедуры

// Возвращает имя объекта метаданных ИС по наименованию его типа.
//
// Параметры:
//   ТипОбъекта - Строка - имя типа объекта ИС.
//
// Возвращаемое значение:
//   Строка - имя объекта.
//
Функция ИмяОбъектаМетаданныхПоТипу(ТипОбъекта) Экспорт
	
	Возврат Метаданные.НайтиПоТипу(ТипОбъекта).ПолноеИмя();
	
КонецФункции

// Возвращает имя типа XDTO по типу объекта Интегрированной системы.
//
// Параметры:
//   ТипИС - Строка
//         - Тип - полное имя типа объекта ИС или тип объекта ИС.
//
// Возвращаемое значение:
//   Строка - имя типа XDTO.
//
Функция ИмяТипаXDTO(ТипИС) Экспорт
	
	ТаблицаСоответствия = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.СоответствиеТипов();
	
	Если ТипЗнч(ТипИС) = Тип("Строка") Тогда
		Строка = ТаблицаСоответствия.Найти(ТипИС, "ИмяТипаИС");
	ИначеЕсли ТипЗнч(ТипИС) = Тип("Тип") Тогда
		Строка = ТаблицаСоответствия.Найти(ТипИС, "ТипОбъектаИС");
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Строка["ИмяТипаXDTO"];
	КонецЕсли;
	
КонецФункции

// Возвращает полное имя типа объекта Интегрированной системы по имени типа XDTO.
//
// Параметры:
//   ИмяТипаXDTO - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Строка - полное имя типа объекта ИС.
//
Функция ИмяТипаИС(ИмяТипаXDTO) Экспорт
	
	ТаблицаСоответствия = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.СоответствиеТипов();
	Строка = ТаблицаСоответствия.Найти(ИмяТипаXDTO, "ИмяТипаXDTO");
	Если Строка = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат Строка["ИмяТипаИС"];
	КонецЕсли;
	
КонецФункции

// Возвращает информацию, включена ли интеграция с 1С:Документооборотом.
//
// Возвращаемое значение:
//   Структура:
//     * ИспользоватьИнтеграциюДО2 - Булево
//     * ИспользоватьИнтеграциюДО3 - Булево
//
Функция ИспользоватьИнтеграцию() Экспорт
	
	Результат = Новый Структура("ИспользоватьИнтеграциюДО2, ИспользоватьИнтеграциюДО3", Ложь, Ложь);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЕстьПодсистемаДО2() Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		Результат.ИспользоватьИнтеграциюДО2 = МодульИнтеграцияС1СДокументооборот.ИспользоватьИнтеграцию();
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЕстьПодсистемаДО3() Тогда
		МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
		Результат.ИспользоватьИнтеграциюДО3 = МодульИнтеграцияС1СДокументооборот3.ИспользоватьИнтеграцию();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, известен ли пароль пользователя ДО. Возвращает Истина, если пароль пользователя ДО уже известен.
//
// Возвращаемое значение:
//   Булево
//
Функция ПарольИзвестен() Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПользователюРазрешеноИспользованиеИнтеграции()
		И (ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен
			Или ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
	
КонецФункции

// Проверяет подключение к веб-сервису ДО и возвращает результат проверки.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль пользователя ДО.
//   ТекстСообщенияОбОшибке - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//   ИспользуетсяАутентификацияОС - Булево - неявно возвращаемое значение, Истина, если используется
//     аутентификация операционной системы.
//   АдресСервиса - Строка - адрес веб-сервиса ДО, или
//                - Неопределено - признак необходимости использовать ранее сохраненный адрес.
//
// Возвращаемое значение:
//   Булево - Истина, если подключиться удалось, и Ложь в противном случае.
//
Функция ПроверитьПодключение(Знач ИмяПользователя, Знач Пароль, ТекстСообщенияОбОшибке = "",
		ИспользуетсяАутентификацияОС = Ложь, Знач АдресСервиса = Неопределено) Экспорт
	
	Если АдресСервиса = Неопределено Тогда
		АдресСервиса = Константы.АдресВебСервиса1СДокументооборот.Получить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресСервиса) Тогда
		ТекстСообщенияОбОшибке = НСтр("ru = 'Не указан адрес веб-сервиса 1С:Документооборота.'");
		Возврат Ложь;
	КонецЕсли;
	
	ПоддерживаетсяАутентификацияОС = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПоддерживаетсяАутентификацияОС();
	
	// При использовании аутентификации ОС имя пользователя не нужно.
	Если Не ЗначениеЗаполнено(ИмяПользователя) И Не (ИспользуетсяАутентификацияОС И ПоддерживаетсяАутентификацияОС) Тогда
		ТекстСообщенияОбОшибке = НСтр("ru = 'Не указано имя пользователя 1С:Документооборота.'");
		Возврат Ложь;
	КонецЕсли;
	
	// Соберем адрес WSDL.
	МестоположениеWSDL = АдресСервиса;
	Если ЗначениеЗаполнено(МестоположениеWSDL)
			И Прав(МестоположениеWSDL, 1) <> "/"
			И Прав(МестоположениеWSDL, 1) <> "\" Тогда
		МестоположениеWSDL = МестоположениеWSDL + "/";
	КонецЕсли;
	
	// При необходимости создадим защищенное соединение. Используем сертификаты из хранилища
	// Windows, если это имеет смысл для текущей платформы.
	ЭтоСоединениеSSL = СтрНачинаетсяС(МестоположениеWSDL, "https");
	Если ЭтоСоединениеSSL Тогда
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СерверРаботаетПодWindows() Тогда
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(
				Новый СертификатКлиентаWindows(),
				Новый СертификатыУдостоверяющихЦентровWindows());
		Иначе
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		КонецЕсли;
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Таймаут = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ТаймаутСервиса();
	
	ИнтернетПрокси = Неопределено;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриПолученииWSПрокси(ИнтернетПрокси);
	
	Попытка
		Определения = Новый WSОпределения(МестоположениеWSDL + "ws/dm.1cws?wsdl",
			ИмяПользователя,
			Пароль,
			ИнтернетПрокси,
			Таймаут,
			ЗащищенноеСоединение,
			ПоддерживаетсяАутентификацияОС И ИспользуетсяАутентификацияОС);
	Исключение
		Определения = Неопределено;
		ТекстСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Определения = Неопределено Тогда
		
		Попытка
			Определения = Новый WSОпределения(МестоположениеWSDL + "ws/DMService?wsdl",
				ИмяПользователя,
				Пароль,
				ИнтернетПрокси,
				Таймаут,
				ЗащищенноеСоединение,
				ПоддерживаетсяАутентификацияОС И ИспользуетсяАутентификацияОС);
		Исключение
			
			Определения = Неопределено;
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Определения = Неопределено Тогда
		
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщенияОбОшибке);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка
		Прокси = Новый WSПрокси(Определения,
			"http://www.1c.ru/dm",
			"DMService",
			"DMServiceSoap",
			ИнтернетПрокси,
			Таймаут,
			ЗащищенноеСоединение,,
			ПоддерживаетсяАутентификацияОС И ИспользуетсяАутентификацияОС);
	Исключение
		
		ТекстСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщенияОбОшибке);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС =
		Прокси.ИспользоватьАутентификациюОС;
	
	Возврат Истина;
	
КонецФункции

// Получает имя пользователя ДО и пароль из ИБ (в веб-клиенте - только имя пользователя). Все параметры -
// неявно возвращаемые значения.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   ИмяКомпьютера - Строка - имя компьютера, хранящего часть пароля, или:
//                 - Неопределено - признак того, что пароль восстанавливать не нужно.
//   ПарольСохранен - Булево - Истина, если пароль сохранен.
//   ЧастьПароляВИБ - Строка - часть пароля, хранимая в ИБ.
//   ВременныйФайлЧастиПароля - Строка - путь ко временному файлу с другой частью пароля.
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация операционной системы.
//
Процедура ПрочитатьНастройкиАвторизации(ИмяПользователя, Знач ИмяКомпьютера = Неопределено,
		ПарольСохранен = Ложь, ЧастьПароляВИБ = "",
		ВременныйФайлЧастиПароля = "", ИспользуетсяАутентификацияОС = Ложь) Экспорт
		
	ИмяПользователя = Неопределено;
	ПарольСохранен = Ложь;
	ИспользуетсяАутентификацияОС = Ложь;
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПользователюРазрешеноИспользованиеИнтеграции() Тогда
		Возврат;
	КонецЕсли;
	
	// Выберем имя пользователя и данные для восстановления пароля, или хотя бы имя пользователя. Приоритет -
	// у данных, сохраненных с текущего компьютера, чтобы обеспечить восстановление раздельно хранимого пароля.
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПарольСохранен КАК ПарольСохранен,
		|	ИмяПользователя КАК ИмяПользователя,
		|	ЧастьПароляВИнформационнойБазе КАК ЧастьПароляВИнформационнойБазе,
		|	ВременныйФайлЧастиПароля КАК ВременныйФайлЧастиПароля,
		|	ИспользуетсяАутентификацияОС КАК ИспользуетсяАутентификацияОС,
		|	ВЫБОР
		|		КОГДА ХешИмениКомпьютера = &ХешИмениКомпьютера ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.НастройкиАвторизацииВ1СДокументообороте
		|ГДЕ
		|	Пользователь = &Пользователь
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет
		|");
	Если ИмяКомпьютера = Неопределено Тогда // веб-клиент
		Запрос.УстановитьПараметр("ХешИмениКомпьютера", 0);
	Иначе // восстановим данные для пароля, если компьютер тот же, или хотя бы имя
		Запрос.УстановитьПараметр("ХешИмениКомпьютера", ХешСуммаCRC32(ИмяКомпьютера));
	КонецЕсли;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИмяПользователя = Выборка.ИмяПользователя;
		ПарольСохранен = Выборка.ПарольСохранен;
		ЧастьПароляВИБ = Выборка.ЧастьПароляВИнформационнойБазе;
		ВременныйФайлЧастиПароля = Выборка.ВременныйФайлЧастиПароля;
		ИспользуетсяАутентификацияОС = Выборка.ИспользуетсяАутентификацияОС;
	КонецЕсли;
	
КонецПроцедуры

// Получает настройки авторизации в ДО из старого хранилища (из хранилища общих настроек).
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль.
//   ПарольСохранен - Булево - Истина, если пароль сохранен.
//
Процедура ПрочитатьНастройкиАвторизацииИзХранилищаОбщихНастроек(ИмяПользователя, Пароль, ПарольСохранен) Экспорт
	
	ИмяПользователя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтеграцияС1СДокументооборот", "Пользователь", "");
	Пароль = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтеграцияС1СДокументооборот", "Пароль", "");
	ПарольСохранен = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтеграцияС1СДокументооборот", "СохранитьПароль", Ложь);
	
КонецПроцедуры

// Сохраняет имя пользователя ДО и, если необходимо, пароль.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль пользователя ДО.
//   ИмяКомпьютера - Строка - имя компьютера, где хранится часть пароля, или:
//                 - Неопределено - признак того, что пароль сохранять не нужно.
//   ЧастьПароляВИБ - Строка - пароль целиком или его часть, хранимая в ИБ.
//   ВременныйФайлЧастиПароля - Строка - путь ко временному файлу с другой частью пароля.
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация операционной системы.
//
Процедура СохранитьНастройкиАвторизации(Знач ИмяПользователя, Знач Пароль,
		Знач ИмяКомпьютера = Неопределено, Знач ЧастьПароляВИБ = "",
		Знач ВременныйФайлЧастиПароля = "", Знач ИспользуетсяАутентификацияОС = Ложь) Экспорт
	
	Если ИмяКомпьютера = Неопределено Тогда // веб-клиент
		ПарольСохранен = Ложь;
		ХешИмениКомпьютера = 0;
	Иначе
		ПарольСохранен = Истина;
		ХешИмениКомпьютера = ХешСуммаCRC32(ИмяКомпьютера);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиАвторизацииВ1СДокументообороте.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	НаборЗаписей.Отбор.ПарольСохранен.Установить(ПарольСохранен);
	НаборЗаписей.Отбор.ХешИмениКомпьютера.Установить(ХешИмениКомпьютера);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Пользователь = Пользователи.ТекущийПользователь();
	Запись.ПарольСохранен = ПарольСохранен;
	Запись.ХешИмениКомпьютера = ХешИмениКомпьютера;
	
	Запись.ИмяПользователя = ИмяПользователя;
	Запись.ЧастьПароляВИнформационнойБазе = ЧастьПароляВИБ; // не имеет смысла для веб-клиента
	Запись.ВременныйФайлЧастиПароля = ВременныйФайлЧастиПароля; // не имеет смысла для веб-клиента
	Запись.ИспользуетсяАутентификацияОС = ИспользуетсяАутентификацияОС;
	
	НаборЗаписей.Записать();
	
	УстановитьНастройкиАвторизацииВПараметрыСеанса(ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС);
	
КонецПроцедуры

// Сохраняет имя пользователя ДО для обмена и его пароль.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО для выполнения обмена данными.
//   Пароль - Строка - пароль этого пользователя.
//
Процедура СохранитьНастройкиАвторизацииДляОбмена(Знач ИмяПользователя, Знач Пароль) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИнтеграцияС1СДокументооборотИмяПользователяДляОбмена.Установить(ИмяПользователя);
	Константы.ИнтеграцияС1СДокументооборотПарольДляОбмена.Установить(Пароль);
	
КонецПроцедуры

// Сохраняет признак использования аутентификации ОС для текущего пользователя, не изменяя настройки авторизации
// 1С:Предприятия.
//
// Параметры:
//   ИмяКомпьютера - Строка, Неопределено - имя компьютера, где хранится часть пароля. Неопределено указывает на
//     работу с веб-клиентом.
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация операционной системы.
//
Процедура СохранитьНастройкиИспользованияАутентификацииОС(ИмяКомпьютера, ИспользуетсяАутентификацияОС) Экспорт
	
	Если ИмяКомпьютера = Неопределено Тогда // веб-клиент
		ПарольСохранен = Ложь;
		ХешИмениКомпьютера = 0;
	Иначе
		ПарольСохранен = Истина;
		ХешИмениКомпьютера = ХешСуммаCRC32(ИмяКомпьютера);
	КонецЕсли;
	
	Запись = РегистрыСведений.НастройкиАвторизацииВ1СДокументообороте.СоздатьМенеджерЗаписи();
	Запись.Пользователь = Пользователи.ТекущийПользователь();
	Запись.ПарольСохранен = ПарольСохранен;
	Запись.ХешИмениКомпьютера = ХешИмениКомпьютера;
	
	Запись.Прочитать();
	
	Запись.Пользователь = Пользователи.ТекущийПользователь();
	Запись.ПарольСохранен = ПарольСохранен;
	Запись.ХешИмениКомпьютера = ХешИмениКомпьютера;
	
	Запись.ИспользуетсяАутентификацияОС = ИспользуетсяАутентификацияОС;
	
	Запись.Записать();
	
КонецПроцедуры

// Возвращает тип объекта Интегрированной системы по имени типа XDTO.
//
// Параметры:
//   ИмяТипаXDTO - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Тип, Неопределено - тип объекта ИС.
//
Функция ТипИС(ИмяТипаXDTO) Экспорт
	
	ТаблицаСоответствия = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.СоответствиеТипов();
	Строка = ТаблицаСоответствия.Найти(ИмяТипаXDTO, "ИмяТипаXDTO");
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Строка["ТипОбъектаИС"];
	КонецЕсли;
	
КонецФункции

// Удаляет настройки авторизации в ДО из старого хранилища (из хранилища общих настроек).
//
Процедура УдалитьНастройкиАвторизацииИзХранилищаОбщихНастроек() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
		"ИнтеграцияС1СДокументооборот", "Пользователь", ПользовательИБ.Имя);
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
		"ИнтеграцияС1СДокументооборот", "Пароль", ПользовательИБ.Имя);
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
		"ИнтеграцияС1СДокументооборот", "СохранитьПароль", ПользовательИБ.Имя);
	
КонецПроцедуры

// Удаляет связь объекта с объектом Документооборота.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - тип XDTO объекта Документооборота.
//   ИнтегрированныйОбъект - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - ссылка на объект
//     системы.
//
Процедура УдалитьСвязь(ID, Тип, ИнтегрированныйОбъект) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.УдалитьСвязь(ID, Тип, ИнтегрированныйОбъект);
		
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMRemoveObjectLinkRequest");
		
		Запрос.ownerObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "ExternalObject");
		Запрос.ownerObject.ID = Строка(ИнтегрированныйОбъект.УникальныйИдентификатор());
		Запрос.ownerObject.type = ИнтегрированныйОбъект.Метаданные().ПолноеИмя();
		Запрос.ownerObject.name = Строка(ИнтегрированныйОбъект);
		
		Запрос.linkedObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectID");
		Запрос.linkedObject.ID = ID;
		Запрос.linkedObject.type = Тип;
		
		Ответ = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(
				НСтр("ru = 'Не удалось удалить связь'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает версию сервиса в параметры сеанса.
//
// Параметры:
//   ВерсияСервиса - Строка, Неопределено - устанавливаемая версия сервиса. Неопределено указывает на необходимость
//     получить версию сервиса перед установкой.
//
Процедура УстановитьВерсиюСервисаВПараметрыСеанса(Знач ВерсияСервиса = Неопределено) Экспорт
	
	Если ВерсияСервиса = Неопределено Тогда // получим ее
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьВерсиюСервиса(
			Неопределено,
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя,
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль,
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
	Иначе
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = ВерсияСервиса;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает настройки авторизации ДО в параметры сеанса.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация операционной системы.
//
Процедура УстановитьНастройкиАвторизацииВПараметрыСеанса(Знач ИмяПользователя, Знач Пароль,
		Знач ИспользуетсяАутентификацияОС) Экспорт
	
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя = Строка(ИмяПользователя);
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль = Строка(Пароль);
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС = ИспользуетсяАутентификацияОС;
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Возвращает Истина, если текущий пользователь - тот, под которым выполняется регламентное задание обмена.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоПользовательЗаданияОбмена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Попытка
		ЗаданиеОбмена = РегламентныеЗаданияСервер.Задание(
			Метаданные.РегламентныеЗадания.ИнтеграцияС1СДокументооборотВыполнитьОбменДанными);
		Возврат (ЗаданиеОбмена.ИмяПользователя = ПользовательИБ.Имя);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ЗапросыКДокументообороту

// Получает из 1С:Документооборота документ, связанный с объектом конфигурации-потребителя.
//
// Параметры:
//   СсылкаНаВнешнийОбъект - ЛюбаяСсылка - ссылка на объект конфигурации-потребителя.
//
// Возвращаемое значение:
//   Структура:
//     * name - Строка - имя документа Документооборота.
//     * ID - Строка - уникальный идентификатор документа в Документообороте.
//     * type - Строка - имя типа XDTO, соответствующего документу.
//     * ВнешнийОбъект - ЛюбаяСсылка - ссылка на связанный объект ИС.
//   Неопределено - если связанного объекта не существует.
//
Функция ДанныеОбъектаДОПоВнешнемуОбъекту(СсылкаНаВнешнийОбъект) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаВнешнийОбъект) Тогда
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		ВнешнийОбъект = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "ExternalObject");
		ВнешнийОбъект.ID = Строка(СсылкаНаВнешнийОбъект.УникальныйИдентификатор());
		ВнешнийОбъект.type = СсылкаНаВнешнийОбъект.Метаданные().ПолноеИмя();
		ВнешнийОбъект.name = Строка(СсылкаНаВнешнийОбъект);
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
		СписокВнешнихОбъектов = Запрос.externalObjects; // СписокXDTO
		ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
		
		СписокВнешнихОбъектов.Добавить(ВнешнийОбъект);
		ПолучаемыеПоля.Добавить("name");
		ПолучаемыеПоля.Добавить("documentType");
		
		Результат = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		Если Результат.documents.Количество() > 0 Тогда
			
			Объект = Результат.documents[0];
			
			ДанныеВозврата = Новый Структура();
			ДанныеВозврата.Вставить("ВнешнийОбъект", СсылкаНаВнешнийОбъект);
			ДанныеВозврата.Вставить("ID", Объект.objectID.ID);
			ДанныеВозврата.Вставить("type", Объект.objectID.type);
			ДанныеВозврата.Вставить("name", Объект.name);
			
			Если СтрНайти(ДанныеВозврата.type, "Document") > 0 Тогда
				
				Если Объект.documentType = Неопределено Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Невозможно получить данные 1С:Документооборота: %1.
						|Обратитесь к администратору.'"),
						Объект.name);
				КонецЕсли;
				
				ВидДокумента = Новый Структура("ID, type, name",
					Объект.documentType.objectID.ID,
					Объект.documentType.objectID.type,
					Объект.documentType.name);
				
				ДанныеВозврата.Вставить("documentType", ВидДокумента);
				
			КонецЕсли;
			
			Возврат ДанныеВозврата;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Готовит данные для выбора из списка при обработке события АвтоПодбор у полей ввода.
//
// Параметры:
//   ТипыЗначений - Строка - имена классов XDTO, разделенные ';'.
//                - СписокЗначений - список типов XDTO.
//   ДанныеВыбора - СписокЗначений - наполняемый список.
//   Текст - Строка - текст подбора.
//   СтандартнаяОбработка - Булево - Ложь, если стандартная обработка подменяется.
//   Отбор - Структура - необязательный, дополнительный отбор.
//
Процедура ДанныеДляАвтоПодбора(ТипыЗначений, ДанныеВыбора, Текст, СтандартнаяОбработка, Отбор = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Если ТипЗнч(ТипыЗначений) = Тип("Строка") Тогда
		МассивТипов = СтрРазделить(ТипыЗначений, ";");
		
	ИначеЕсли ТипЗнч(ТипыЗначений) = Тип("СписокЗначений") Тогда
		МассивТипов = ТипыЗначений.ВыгрузитьЗначения();
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Невозможно подобрать данные для типа: %1'"), Строка(ТипыЗначений));
		
	КонецЕсли;
	
	Для Каждого ТипXDTO Из МассивТипов Цикл
		
		Если Не ЗначениеЗаполнено(ТипXDTO) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокУсловий = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
		УсловияОтбора = СписокУсловий.conditions; // СписокXDTO
		
		ДополнитьНаборКолонокУсловийВыбора(СписокУсловий.columnSet, ТипXDTO);
		
		Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = "name";
		Условие.value = Текст;
		
		УсловияОтбора.Добавить(Условие);
		
		// Наложим дополнительный отбор.
		Если Отбор <> Неопределено Тогда
			Для Каждого СтрокаОтбора Из Отбор Цикл
				Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
				Условие.property = СтрокаОтбора.Ключ;
				Если ТипЗнч(СтрокаОтбора.Значение) = Тип("Структура") Тогда
					Условие.value = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси,
						СтрокаОтбора.Значение.ID,
						СтрокаОтбора.Значение.type);
				Иначе
					Условие.value = СтрокаОтбора.Значение;
				КонецЕсли;
				УсловияОтбора.Добавить(Условие);
			КонецЦикла;
		КонецЕсли;
		
		// Ограничим размер списка.
		Если СписокУсловий.Свойства().Получить("limit") <> Неопределено Тогда
			СписокУсловий.limit = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПредельноеКоличествоВыбираемыхОбъектов(
				ТипXDTO);
		КонецЕсли;
		
		Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
			Прокси,
			ТипXDTO,
			СписокУсловий);
		
		Для Каждого Элемент Из Результат.items Цикл
			
			Имя = Элемент.object.name + ?(Элемент.object.objectID.type = "DMBusinessProcessExecutorRole", " (роль)", "");
			
			ЭлементДанных = Новый Структура;
			ЭлементДанных.Вставить("ID", Элемент.object.objectID.ID);
			ЭлементДанных.Вставить("type", Элемент.object.objectID.type);
			ЭлементДанных.Вставить("name", Имя);
			
			// Прочие свойства, зависящие от типа (см. ДополнитьСписокУсловийВыбора);
			Для Каждого Колонка Из СписокУсловий.columnSet Цикл
				Значение = Элемент.object[Колонка];
				Если ТипЗнч(Значение) = Тип("ОбъектXDTO") Тогда
					Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Значение, "objectID") Тогда
						ЭлементДанных.Вставить(Колонка, Значение.name);
						ЭлементДанных.Вставить(СтрШаблон("%1ID", Колонка), Значение.objectID.ID);
						ЭлементДанных.Вставить(СтрШаблон("%1Тип", Колонка), Значение.objectID.type);
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				ЭлементДанных.Вставить(Колонка, Значение);
			КонецЦикла;
			
			ДанныеВыбора.Добавить(ЭлементДанных, Имя);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список значений, заполненный значениями элементов указанного типа с учетом отборов.
//
// Параметры:
//   ТипОбъектаВыбора - Строка - имя класса XDTO.
//   Отбор - Структура - с перечислением свойств и их значений.
//
// Возвращаемое значение:
//   СписокЗначений:
//     * РеквизитПредставление - Строка
//     * РеквизитID - Строка
//     * РеквизитТип - Строка
//
Функция ЗначенияДляВыбора(ТипОбъектаВыбора, Отбор = Неопределено) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	СписокУсловий = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListQuery");
	УсловияОтбора = СписокУсловий.conditions; // СписокXDTO
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		Для Каждого СтрокаОтбора Из Отбор Цикл
			Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
			Условие.property = СтрокаОтбора.Ключ;
			
			Если ТипЗнч(СтрокаОтбора.Значение) = Тип("Структура") Тогда
				Условие.value = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси,
					СтрокаОтбора.Значение.ID,
					СтрокаОтбора.Значение.type);
			Иначе
				Условие.value = СтрокаОтбора.Значение;
			КонецЕсли;
			
			УсловияОтбора.Добавить(Условие);
		КонецЦикла;
	КонецЕсли;
	
	ДополнитьНаборКолонокУсловийВыбора(СписокУсловий.columnSet, ТипОбъектаВыбора);
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НайтиСписокОбъектов(
		Прокси,
		ТипОбъектаВыбора,
		СписокУсловий);
	
	СписокВыбора = Новый СписокЗначений;
	
	Для Каждого Элемент Из Результат.items Цикл
		
		// Стандартные свойства.
		СтруктураВыбора = Новый Структура;
		СтруктураВыбора.Вставить("РеквизитПредставление", Элемент.object.name);
		СтруктураВыбора.Вставить("РеквизитID", Элемент.object.objectID.ID);
		СтруктураВыбора.Вставить("РеквизитТип", Элемент.object.objectID.type);
		
		// Прочие свойства, зависящие от типа (см. ДополнитьСписокУсловийВыбора);
		Для Каждого Колонка Из СписокУсловий.columnSet Цикл
			СтруктураВыбора.Вставить(Колонка, Элемент.object[Колонка]);
		КонецЦикла;
		
		СписокВыбора.Добавить(СтруктураВыбора, Элемент.object.name);
		
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

// Ищет объект в ДО по его типу и по точному совпадению наименования.
//
// Параметры:
//   ТипОбъекта - Строка - тип объекта, поиск по которому требуется выполнить.
//   Имя - Строка - наименование объекта.
//
// Возвращаемое значение:
//   ОбъектXDTO, Неопределено - XDTO Объект типа DMObject. Если объект не найден возвращается Неопределено.
//
Функция НайтиОбъектВДОПоИмени(ТипОбъекта, Имя) Экспорт
	
	НайденныйОбъект = Неопределено;
	
	Настройки = ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		ИмяОбработки = "ИнтеграцияС1СДокументооборот";
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		ИмяОбработки = "ИнтеграцияС1СДокументооборот3";
	Иначе
		Возврат НайденныйОбъект;
	КонецЕсли;
	
	// Определим структуру поиска
	ОтборИмя = Новый Структура;
	ОтборИмя.Вставить("Значение", Имя);
	ОтборИмя.Вставить("ОператорСравнения", "=");
	ОтборИмя.Вставить("Представление", "Наименование");
	ОтборИмя.Вставить("ПредставлениеУсловия", СтрШаблон("= ""%1""", Имя));
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("name", ОтборИмя);
	
	// Выполним поиск
	АдресВоВременномХранилище = "";
	КоличествоРезультатов = 0;
	ПредельноеКоличествоРезультатов = 0;
	Обработки[ИмяОбработки].ВыполнитьПоискПоРеквизитам(
		ТипОбъекта,
		СтруктураОтбора,
		АдресВоВременномХранилище,
		КоличествоРезультатов,
		ПредельноеКоличествоРезультатов);
	
	Если КоличествоРезультатов > 0 Тогда
		// Получим объект
		РезультатыПоиска = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		ОбъектыXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
			Прокси,
			ТипОбъекта,
			РезультатыПоиска.НайденныеОбъекты[0].ID);
		Если ОбъектыXDTO.objects.Количество() > 0 Тогда
			НайденныйОбъект = ОбъектыXDTO.objects[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденныйОбъект;
	
КонецФункции

// Создает новый объект Документооборота по объекту ИС и указанному правилу.
//
// Параметры:
//   ОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - правило заполнения.
//
// Возвращаемое значение:
//   Структура:
//     * name - Строка
//     * ID - Строка
//     * type - Строка
//   Строка - сообщение об ошибке.
//
Функция СоздатьОбъектДОПоПравилу(ОбъектИС, Правило) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Настройки = ИспользоватьИнтеграцию();
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		ОбъектДОИлиСообщение = МодульИнтеграцияС1СДокументооборот.СоздатьОбъектДОПоПравилу(
			Прокси,
			ОбъектИС,
			Правило);
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
		ОбъектДОИлиСообщение = МодульИнтеграцияС1СДокументооборот3.СоздатьОбъектДОПоПравилу(
			Прокси,
			ОбъектИС,
			Правило);
	Иначе
		Возврат НСтр("ru = 'Интеграция с 1С:Документооборот не используется'");
	КонецЕсли;
	
	Если ТипЗнч(ОбъектДОИлиСообщение) = Тип("Строка") Тогда
		Возврат ОбъектДОИлиСообщение;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("name", ОбъектДОИлиСообщение.name);
	Результат.Вставить("ID", ОбъектДОИлиСообщение.objectID.ID);
	Результат.Вставить("type", ОбъектДОИлиСообщение.objectID.type);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцессыИЗадачи

// Вызывается при изменении состояния согласования в ДО. Изменяет состояние на стороне ИС.
//
// Параметры:
//   Идентификатор - Строка - идентификатор связанного объекта ДО.
//   Тип - Строка - тип связанного объекта ДО.
//   Состояние - ПеречислениеСсылка.СостоянияСогласованияВДокументообороте - новое состояние, или
//             - Неопределено - при прерывании согласования.
//   ВызовИзФормыОбъекта - Булево - Истина, если изменение состояния вызвано пользователем из формы объекта.
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект, или
//                       - Неопределено - признак необходимости найти объект ИС по объекту ДО.
//   Установил - Строка - представление пользователя, установившего новое состояние.
//   ДатаУстановки - Дата - Дата установки нового состояния.
//
Процедура ПриИзмененииСостоянияСогласования(Знач Идентификатор, Знач Тип, Знач Состояние, Знач ВызовИзФормыОбъекта,
		ПредметСогласования = Неопределено, Знач Установил = Неопределено, Знач ДатаУстановки = Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.СостоянияСогласованияВДокументообороте.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторОбъектаДО.Установить(Идентификатор);
	
	Если Состояние <> Неопределено Тогда // Неопределено - удаление
		Запись = НаборЗаписей.Добавить();
		Запись.ИдентификаторОбъектаДО = Идентификатор;
		Запись.Состояние = Состояние;
		Если Установил = Неопределено Тогда
			Запись.Установил = Строка(Пользователи.ТекущийПользователь());
		Иначе
			Запись.Установил = Установил;
		КонецЕсли;
		Если ДатаУстановки = Неопределено Тогда
			Запись.ДатаУстановки = ТекущаяДатаСеанса();
		Иначе
			Запись.ДатаУстановки = ДатаУстановки;
		КонецЕсли;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	// Ссылка на предмет в ИС может быть неизвестна, если вызов - из формы задачи ДО. Определим ее.
	Если ПредметСогласования = Неопределено Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ОбъектыИнтегрированныеС1СДокументооборотом.Объект КАК ПредметСогласования
			|ИЗ
			|	РегистрСведений.ОбъектыИнтегрированныеС1СДокументооборотом КАК ОбъектыИнтегрированныеС1СДокументооборотом
			|ГДЕ
			|	ОбъектыИнтегрированныеС1СДокументооборотом.ТипОбъектаДО = &Тип
			|	И ОбъектыИнтегрированныеС1СДокументооборотом.ИдентификаторОбъектаДО = &Идентификатор");
		Запрос.УстановитьПараметр("Тип", Тип);
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПредметСогласования = Выборка.ПредметСогласования;
		КонецЕсли;
	КонецЕсли;
	
	// На стороне ИС не следует выполнять действия при согласовании несвязанных объектов ДО.
	Если ПредметСогласования <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриИзмененииСостоянияСогласования(
			ПредметСогласования, Состояние, ВызовИзФормыОбъекта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Готовит сообщения обмена в Документооборот и записывает их в очередь на отправку.
//
Процедура ПодготовитьДанныеДляОтправки(Прокси, Настройки,
		МодульИнтеграцияС1СДокументооборотОбмен, МодульИнтеграцияС1СДокументооборот3Обмен)
	
	УзелДокументооборота = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.УзелДокументооборота();
	
	// Выборка всех изменений для данной интегрированной системы
	ОбъектыКУдалениюИзРегистрацииИзменений = Новый Массив;
	ИнтегрированныеОбъекты = Новый Массив;
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		ИнтегрированныеОбъекты = МодульИнтеграцияС1СДокументооборотОбмен.ЗарегистрированныеДанные(
			Прокси,
			УзелДокументооборота,
			ОбъектыКУдалениюИзРегистрацииИзменений);
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		ИнтегрированныеОбъекты = МодульИнтеграцияС1СДокументооборот3Обмен.ЗарегистрированныеДанные(
			Прокси,
			УзелДокументооборота,
			ОбъектыКУдалениюИзРегистрацииИзменений);
	КонецЕсли;
	
	ПредельноеКоличествоОбъектовВСообщении = 10;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииПредельногоКоличестваОбъектовВСообщенииОбмена(
		ПредельноеКоличествоОбъектовВСообщении);
	
	ПорцияОбъектов = Новый Массив;
	ОбъектовВПорции = 0;
	Для Каждого ИнтегрированныйОбъект Из ИнтегрированныеОбъекты Цикл
		Если ОбъектовВПорции >= ПредельноеКоличествоОбъектовВСообщении Тогда
			СформироватьСообщение(
				Прокси,
				ПорцияОбъектов,
				Настройки,
				МодульИнтеграцияС1СДокументооборотОбмен,
				МодульИнтеграцияС1СДокументооборот3Обмен,
				ОбъектыКУдалениюИзРегистрацииИзменений);
			ПорцияОбъектов = Новый Массив;
			ОбъектовВПорции = 0;
		КонецЕсли;
		ПорцияОбъектов.Добавить(ИнтегрированныйОбъект);
		ОбъектовВПорции = ОбъектовВПорции + 1;
	КонецЦикла;
	СформироватьСообщение(
		Прокси,
		ПорцияОбъектов,
		Настройки,
		МодульИнтеграцияС1СДокументооборотОбмен,
		МодульИнтеграцияС1СДокументооборот3Обмен,
		ОбъектыКУдалениюИзРегистрацииИзменений);
	
	Для Каждого ОбъектКУдалению Из ОбъектыКУдалениюИзРегистрацииИзменений Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелДокументооборота, ОбъектКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСообщение(Прокси, ПорцияОбъектов, Настройки, МодульИнтеграцияС1СДокументооборотОбмен,
		МодульИнтеграцияС1СДокументооборот3Обмен, ОбъектыКУдалениюИзРегистрацииИзменений)
	
	Если ПорцияОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Message");
	
	Для Каждого ИнтегрированныйОбъект Из ПорцияОбъектов Цикл
		
		Попытка
			Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
				ОбъектXDTO = МодульИнтеграцияС1СДокументооборотОбмен.ПолучитьXDTOИзмененийИзОбъекта(
					Прокси,
					ИнтегрированныйОбъект);
			ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
				ОбъектXDTO = МодульИнтеграцияС1СДокументооборот3Обмен.ПолучитьXDTOИзмененийИзОбъекта(
					Прокси,
					ИнтегрированныйОбъект);
			КонецЕсли;
			Прокси.ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
		Исключение
			ОбъектыКУдалениюИзРегистрацииИзменений.Удалить(ИнтегрированныйОбъект.Объект);
			
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(
					НСтр("ru = 'Формирование сообщения обмена'", ОбщегоНазначения.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.ПланыОбмена.ИнтеграцияС1СДокументооборотомПереопределяемый,
				ИнтегрированныйОбъект.Объект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();	// Message
	ЗаписьXML.Закрыть();
	
	РегистрыСведений.ОчередьСообщенийВ1СДокументооборот.ДобавитьСообщение(Новый ДвоичныеДанные(ИмяВременногоФайла));
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

// Прочитывает данные из очереди на отправку и отправляет их в Документооборот.
//
Процедура ОтправитьДанные(Прокси, Настройки)
	
	Попытка
		
		ЗапросКБазе = Новый Запрос(
			"ВЫБРАТЬ
			|	ОчередьСообщенийВ1СДокументооборот.МоментВремени КАК МоментВремени,
			|	ОчередьСообщенийВ1СДокументооборот.Данные КАК Данные,
			|	ОчередьСообщенийВ1СДокументооборот.Идентификатор КАК Идентификатор
			|ИЗ
			|	РегистрСведений.ОчередьСообщенийВ1СДокументооборот КАК ОчередьСообщенийВ1СДокументооборот
			|ГДЕ
			|	ОчередьСообщенийВ1СДокументооборот.КоличествоПопытокОтправки <= 3
			|
			|УПОРЯДОЧИТЬ ПО
			|	МоментВремени");
		
		Результат = ЗапросКБазе.Выполнить();
		
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(
				НСтр("ru = 'Отправка данных'", ОбщегоНазначения.КодОсновногоЯзыка())),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.ОчередьСообщенийВ1СДокументооборот,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Пока Выборка.Следующий() Цикл
		
		ИдентификаторСообщения = Выборка.Идентификатор;
		
		Попытка
			
			Запрос = ЗапросНаОтправкуСообщенияОбменаВДО(Прокси, Настройки);
			
			ДвоичныеДанные = Выборка.Данные.Получить();
			
			ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла("xml");
			ДвоичныеДанные.Записать(ИмяФайлаСообщенияОбмена);
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(ИмяФайлаСообщенияОбмена);
			ЧтениеXML.Прочитать();
			ЧтениеXML.Прочитать();
			
			Пока ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
				// Выполняется последовательное чтение одного объекта за другим
				ТипXDTO = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", ЧтениеXML.Имя);
				ОбъектXDTO = Прокси.ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
				Запрос.objects.Добавить(ОбъектXDTO);
			КонецЦикла;
			
			ЧтениеXML = Неопределено;
			УдалитьФайлы(ИмяФайлаСообщенияОбмена);
			
			Результат = Прокси.execute(Запрос);
			ТекстСообщенияОбОшибке = ПроверитьРезультатОтправки(Прокси, Запрос, Результат, Настройки);
			
			Если ТекстСообщенияОбОшибке <> "" Тогда
				ВызватьИсключение ТекстСообщенияОбОшибке;
			Иначе
				РегистрыСведений.ИсторияОтправкиСообщенийВ1СДокументооборот.ПеренестиСообщениеВИсторию(
					Выборка.МоментВремени,
					ИдентификаторСообщения);
			КонецЕсли;
			
		Исключение
			
			ТекстСообщенияОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(
					НСтр("ru = 'Отправка данных'", ОбщегоНазначения.КодОсновногоЯзыка())),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.ОчередьСообщенийВ1СДокументооборот,
				Строка(ИдентификаторСообщения),
				ТекстСообщенияОбОшибке);
			
			МенеджерЗаписи = РегистрыСведений.ОчередьСообщенийВ1СДокументооборот.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.МоментВремени = Выборка.МоментВремени;
			МенеджерЗаписи.Идентификатор = ИдентификаторСообщения;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.КоличествоПопытокОтправки = МенеджерЗаписи.КоличествоПопытокОтправки + 1;
			МенеджерЗаписи.ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке;
			МенеджерЗаписи.Записать();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьРезультатОтправки(Прокси, Запрос, Результат, Настройки)
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, Результат, "DMError") Тогда
		Возврат СтрШаблон(
			"%1
			|%2",
			Результат.subject,
			Результат.description);
	КонецЕсли;
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстСообщенияОбОшибке = "";
	
	ИмяКонфигурации = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СокращенноеНаименованиеКонфигурации();
	
	МассивОшибок = Новый Массив;
	Для Каждого ОбъектXDTO Из Результат.objects Цикл
		Если ОбъектXDTO.success Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектИС = Неопределено;
		Для Каждого ОбъектЗапросаXDTO Из Запрос.objects Цикл
			Если ОбъектЗапросаXDTO.updatingObject.id = ОбъектXDTO.key.id
					И ОбъектЗапросаXDTO.updatingObject.type = ОбъектXDTO.key.type Тогда
				ОбъектИС = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкаИзUUID(
					ОбъектЗапросаXDTO.externalObject.type,
					ОбъектЗапросаXDTO.externalObject.ID);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		МассивОшибокОбъекта = Новый Массив;
		МассивОшибокОбъекта.Добавить(
			СтрШаблон(НСтр("ru = 'Ошибка на стороне 1С:Документооборот при получении сообщения обмена из %1:'"),
				ИмяКонфигурации));
		МассивОшибокОбъекта.Добавить(ОбъектXDTO.error.subject);
		МассивОшибокОбъекта.Добавить(ОбъектXDTO.error.description);
		
		Если ОбъектИС <> Неопределено Тогда
			МассивОшибокОбъекта.Добавить(
				СтрШаблон(НСтр("ru = 'Ссылка на объект %1, изменения которого отправляются в 1С:Документооборот: %2'"),
					ИмяКонфигурации,
					ПолучитьНавигационнуюСсылку(ОбъектИС)));
		КонецЕсли;
		
		МассивОшибок.Добавить(СтрСоединить(МассивОшибокОбъекта, Символы.ПС));
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстСообщенияОбОшибке = СтрСоединить(
			МассивОшибок,
			"
			|
			|-----
			|
			|");
	КонецЕсли;
	
	Возврат ТекстСообщенияОбОшибке;
	
КонецФункции

Процедура ОчиститьУстаревшиеДанные()
	
	СрокХраненияСообщенийВ1СДокументооборот = Константы.СрокХраненияСообщенийВ1СДокументооборот.Получить();
	Если СрокХраненияСообщенийВ1СДокументооборот = 0 Тогда
		// Срок не установим. Применим значение по-умолчанию.
		СрокХраненияСообщенийВ1СДокументооборот = 30;	// Дней
		Константы.СрокХраненияСообщенийВ1СДокументооборот.Установить(СрокХраненияСообщенийВ1СДокументооборот);
	КонецЕсли;
	
	КрайнийСрок = ТекущаяДатаСеанса() - СрокХраненияСообщенийВ1СДокументооборот * 24 * 60 * 60;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОчередьСообщенийВ1СДокументооборот.МоментВремени КАК МоментВремени,
		|	ОчередьСообщенийВ1СДокументооборот.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийВ1СДокументооборот КАК ОчередьСообщенийВ1СДокументооборот
		|ГДЕ
		|	ОчередьСообщенийВ1СДокументооборот.ДатаСоздания <= &КрайнийСрок
		|	И ОчередьСообщенийВ1СДокументооборот.КоличествоПопытокОтправки > 3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсторияОтправкиСообщенийВ1СДокументооборот.МоментВремени КАК МоментВремени,
		|	ИсторияОтправкиСообщенийВ1СДокументооборот.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ИсторияОтправкиСообщенийВ1СДокументооборот КАК ИсторияОтправкиСообщенийВ1СДокументооборот
		|ГДЕ
		|	ИсторияОтправкиСообщенийВ1СДокументооборот.ДатаОтправки <= &КрайнийСрок");
	Запрос.УстановитьПараметр("КрайнийСрок", КрайнийСрок);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	УдалитьСообщения(МассивРезультатов[0].Выгрузить(), РегистрыСведений.ОчередьСообщенийВ1СДокументооборот);
	УдалитьСообщения(МассивРезультатов[1].Выгрузить(), РегистрыСведений.ИсторияОтправкиСообщенийВ1СДокументооборот);
	
КонецПроцедуры

Процедура УдалитьСообщения(ТаблицаСообщений, РегистрМенеджер)
	
	Для Каждого Строка Из ТаблицаСообщений Цикл
		МенеджерЗаписи = РегистрМенеджер.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.МоментВремени = Строка.МоментВремени;
		МенеджерЗаписи.Идентификатор = Строка.Идентификатор;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросНаОтправкуСообщенияОбменаВДО(Прокси, Настройки)
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		ИмяЗапроса = "DMPutChangesRequest";
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		ИмяЗапроса = "DMUpdateFromIncomingDataRequest";
	КонецЕсли;
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, ИмяЗапроса);
	
КонецФункции

// Возвращает хеш-сумму данных по алгоритму CRC32.
//
// Параметры:
//   Данные - Строка, ДвоичныеДанные - данные для расчета.
//
// Возвращаемое значение:
//   Число - хеш-сумма, рассчитанная по алгоритму CRC32.
//
Функция ХешСуммаCRC32(Данные)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешированиеДанных.Добавить(Данные);
	
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

// Дополняет набор колонок условий выбора DMObjectListQuery.query колонками для отдельных типов объектов.
//
// Параметры:
//   НаборКолонок - СписокXDTO
//   ТипXDTO - Строка
//
Процедура ДополнитьНаборКолонокУсловийВыбора(НаборКолонок, ТипXDTO)
	
	Если ТипXDTO = "DMOrganization" Тогда
		// НДС и статьи ДДС.
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("2.1.8.1.CORP") Тогда
			НаборКолонок.Добавить("VATpayer");
		КонецЕсли;
		
	ИначеЕсли ТипXDTO = "DMCorrespondent" Тогда
		НаборКолонок.Добавить("legalPrivatePerson");
		
	ИначеЕсли ТипXDTO = "DMProduct" Тогда
		НаборКолонок.Добавить("VATRate");
		НаборКолонок.Добавить("measurementUnit");
		НаборКолонок.Добавить("price");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти