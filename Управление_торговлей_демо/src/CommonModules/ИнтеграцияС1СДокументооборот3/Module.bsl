////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборот3: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ВебСервисБИД

// Возвращает результат обработки универсальных сообщений.
//
// Параметры:
//   Сообщение - ОбъектXDTO - потомок DMILRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - потомок DMILResponse.
//
Функция ОбработатьУниверсальноеСообщение(Сообщение) Экспорт
	
	Попытка
		
		НачалоЗамераВремени = ТекущаяДатаСеанса();
		
		Результат = Неопределено;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОбработкеУниверсальногоСообщения(
			Сообщение,
			Результат);
		Если Результат = Неопределено Тогда
			
			Если ПроверитьТипБИД(Сообщение, "DMILGetMetadataRequest") Тогда
				Результат = СтруктураМетаданныхИнтегрированнойСистемы();
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILCheckExpressionOnBuiltInLanguageRequest") Тогда
				Результат = ПроверитьВыражениеНаВстроенномЯзыке(Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILRelatedIntegrationRulesExistenceRequest") Тогда
				Результат = Справочники.ПравилаИнтеграцииС1СДокументооборотом3.СвязанныеПравилаИнтеграцииСуществуют(
					Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILCreateRelatedIntegrationRuleExistenceRequest") Тогда
				Результат = Справочники.ПравилаИнтеграцииС1СДокументооборотом3.СоздатьСвязанноеПравилоИнтеграции(
					Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILGetExpressionListRequest") Тогда
				Результат = СписокВыраженийНаВстроенномЯзыкеДляВыполненияНаСторонеДО(Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILPutChangesRequest") Тогда
				Возврат ИнтеграцияС1СДокументооборот3Обмен.ЗаписатьИзмененияОбъектов(Сообщение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			ВремяВыполнения = ТекущаяДатаСеанса() - НачалоЗамераВремени;
			Если ВремяВыполнения > 15 Тогда
				ЗафиксироватьОшибкуПревышенияВремениВыполнения(ВремяВыполнения, Сообщение, Результат);
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
		
		Ошибка = СоздатьОбъектБИД("DMILError");
		Ошибка.subject = НСтр("ru = 'Неизвестное сообщение'");
		Ошибка.description = Строка(Сообщение.Тип());
		
		Возврат Ошибка;
		
	Исключение
		
		Ошибка = СоздатьОбъектБИД("DMILError");
		Ошибка.subject = НСтр("ru = 'Ошибка при обработке сообщения'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Создает XDTO объект указанного типа из пространства имен "http://www.1c.ru/dmil"
//
// Параметры:
//   ТипОбъекта - Строка - имя типа XDTO
//
// Возвращаемое значение:
//   ОбъектXDTO - созданный объект указанного типа
//
Функция СоздатьОбъектБИД(ТипОбъекта) Экспорт
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.1c.ru/dmil", ТипОбъекта));
	
КонецФункции

// Проверяет тип объекта XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - проверяемый объект.
//   Тип - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево - Истина, если объект является объектом указанного типа.
//
Функция ПроверитьТипБИД(ОбъектXDTO, Тип) Экспорт
	
	Возврат (ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO"))
		И (ОбъектXDTO.Тип() = ФабрикаXDTO.Тип("http://www.1c.ru/dmil", Тип));
	
КонецФункции

// Возвращает описание ошибки.
//
// Параметры:
//   Инфо - ИнформацияОбОшибке
//
// Возвращаемое значение:
//   Строка - текст детального описания ошибки.
//
Функция ПолучитьОписаниеОшибки(Инфо) Экспорт
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	
	ТекстСообщения = "";
	Для Каждого Сообщение Из Сообщения Цикл
		ТекстСообщения = ТекстСообщения + Сообщение.Текст + Символы.ПС;
	КонецЦикла;
	
	ПредставлениеОшибки = ПодробноеПредставлениеОшибки(Инфо);
	Если Не ПустаяСтрока(Инфо.Описание) И ПустаяСтрока(ПредставлениеОшибки) Тогда
		ПредставлениеОшибки = Инфо.Описание;
	КонецЕсли;
	
	Возврат ПредставлениеОшибки + ?(ПредставлениеОшибки + ТекстСообщения = "", "", Символы.ПС) + ТекстСообщения;
	
КонецФункции

// Возвращает ссылку на объект ИС по ObjectID
//
// Параметры:
//   ObjectID - ОбъектXDTO - объект XDTO типа DMILObjectID.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на объект ИС.
//
Функция ПолучитьСсылкуПоObjectID(ObjectID) Экспорт
	
	Ссылка = Неопределено;
	
	Если ObjectID <> Неопределено И ObjectID.id <> "" И ObjectID.type <> "" Тогда
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ObjectID.type);
		Ссылка = Менеджер.ПустаяСсылка();
		
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ObjectID.id) Тогда
			Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ObjectID.id));
			
		Иначе // возможно, это имя предопределенного элемента или перечисление
			Попытка
				Ссылка = Менеджер[ObjectID.id];
			Исключение
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Нет значения ""%1"" среди значений типа ""%2""'"),
					ObjectID.id,
					ObjectID.type);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Формирует универсальную структуру входящих данных, предназначенную для загрузки объектов в 1С:Документооборот.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   СсылкаНаОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   СписокВыражений - Массив из Строка - список выражений на встроенном языке, которые требуется выполнить на
//     стороне ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMIncomingData.
//
Функция ВходящиеДанныеОбъектаИС(Прокси, СсылкаНаОбъектИС, СписокВыражений) Экспорт
	
	ОбъектИС = СсылкаНаОбъектИС.ПолучитьОбъект();
	
	ОбъектМетаданных = ОбъектИС.Метаданные();
	
	Если Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
			И Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Входящие данные можно сформировать только для объектов типа Справочник или Документ.
				|Объект %1 имеет тип %2'"),
			СсылкаНаОбъектИС,
			ОбъектМетаданных.ПолноеИмя());
	КонецЕсли;
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMIncomingData");
	
	// Стандартные реквизиты
	Результат.attributes.Добавить(
		ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, "Представление", Строка(СсылкаНаОбъектИС)));
	
	ЗаполнитьРеквизитыИзМетаданных(Прокси, Результат.attributes, ОбъектМетаданных.СтандартныеРеквизиты, ОбъектИС, Истина);
	
	// Реквизиты
	ЗаполнитьРеквизитыИзМетаданных(Прокси, Результат.attributes, ОбъектМетаданных.Реквизиты, ОбъектИС);
	
	// Табличные части
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		Если ТабличнаяЧасть.Имя = "ДополнительныеРеквизиты" Тогда
			Продолжить;
		КонецЕсли;
		
		Колонки = Новый Массив;
		Для Каждого Реквизит Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
			Колонки.Добавить(Реквизит);
		КонецЦикла;
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			Колонки.Добавить(Реквизит);
		КонецЦикла;
		
		Результат.tabularSections.Добавить(ПреобразоватьТаблицуОбъектаИСВОбъектXDTO(
			Прокси,
			ТабличнаяЧасть.Имя,
			ОбъектИС[ТабличнаяЧасть.Имя],
			Колонки));
		
	КонецЦикла;
	
	// Данные из выражений на встроенном языке
	ЗаполнитьДанныеИзСпискаВыражений(Прокси, ОбъектИС, Результат, СписокВыражений);
	
	// Дополнительные реквизиты
	Если УправлениеСвойствами.ИспользоватьДопРеквизиты(СсылкаНаОбъектИС) Тогда
		ЗаполнитьРеквизитыИзМетаданных(
			Прокси,
			Результат.attributes,
			УправлениеСвойствами.СвойстваОбъекта(СсылкаНаОбъектИС, Истина, Ложь),
			ОбъектИС,,
			Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает информацию, включена ли интеграция с 1С:Документооборотом редакции 3.
//
// Возвращаемое значение:
//   Булево
//
Функция ИспользоватьИнтеграцию() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюС1СДокументооборот3");
	
КонецФункции

// Возвращает описание веб-сервиса 1С:Документооборота.
//
// Возвращаемое значение:
//   Строка
//
Функция ОписаниеВебСервисов() Экспорт
	
	Макет = Справочники.ПравилаИнтеграцииС1СДокументооборотом3.ПолучитьМакет("ОписаниеВебСервисов");
	
	Возврат Макет.ПолучитьТекст();
	
КонецФункции

// Добавляет команды Документооборота на форму объекта при создании на сервере.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызвана процедура.
//   МестоРазмещенияКоманд - ГруппаФормы - место для размещения, по умолчанию - командная панель формы.
//   ПараметрыОповещения - Структура - параметры, где может быть установлен источник команды.
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКоманд = Неопределено, ПараметрыОповещения = Неопределено) Экспорт
	
	Если Не ИспользоватьИнтеграцию() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПользователюРазрешеноИспользованиеИнтеграции() Тогда
		Возврат;
	КонецЕсли;
	
	Если МестоРазмещенияКоманд = Неопределено И Форма.Элементы.Найти("Список") <> Неопределено
			И (СтрНайти(Форма.ИмяФормы, "ФормаСписка") <> 0 Или СтрНайти(Форма.ИмяФормы, "ФормаВыбора") <> 0) Тогда
		Для Каждого ЭлементКомПанели Из Форма.Элементы.Список.КоманднаяПанель.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(ЭлементКомПанели) = Тип("ГруппаФормы") Тогда
				Для Каждого ЭлементГруппы Из ЭлементКомПанели.ПодчиненныеЭлементы Цикл
					Если ТипЗнч(ЭлементГруппы) = Тип("ГруппаФормы")
							И (ЭлементГруппы.Заголовок = НСтр("ru = 'Создать на основании'")
								Или ЭлементГруппы.Заголовок = НСтр("ru = 'Органайзер'")
								Или ЭлементГруппы.Заголовок = НСтр("ru = 'Печать'")) Тогда
						МестоРазмещенияКоманд = ЭлементКомПанели;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если МестоРазмещенияКоманд <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Переместим команды создания на основании вниз.
	Если Форма.Элементы.Найти("ФормаСоздатьНаОсновании") <> Неопределено Тогда
		Если Форма.Элементы.Найти("ФормаОбщаяКомандаИнтеграцияС1СДокументооборотНачатьОбработку")
				<> Неопределено Тогда
			Форма.Элементы.Переместить(
				Форма.Элементы.ФормаОбщаяКомандаИнтеграцияС1СДокументооборотНачатьОбработку,
				Форма.Элементы.ФормаСоздатьНаОсновании);
		КонецЕсли;
	КонецЕсли;
	
	// Сохраним тип и идентификатор объекта-основания.
	Если Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО")
			И Форма.Параметры.Свойство("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО") Тогда
		
		ДобавляемыеРеквизиты = Новый Массив;
		
		Реквизит = Новый РеквизитФормы("ИнтеграцияС1СДокументооборотом_ТипОбъектаДО",
			Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Реквизит = Новый РеквизитФормы("ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО",
			Новый ОписаниеТипов("Строка"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
			
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		Форма["ИнтеграцияС1СДокументооборотом_ТипОбъектаДО"] =
			Форма.Параметры.ИнтеграцияС1СДокументооборотом_ТипОбъектаДО;
		Форма["ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО"] =
			Форма.Параметры.ИнтеграцияС1СДокументооборотом_ИдентификаторОбъектаДО;
		
	КонецЕсли;
	
	// Сохраним идентификатор связанного объекта ДО.
	Если Форма.Параметры.Свойство("Основание")
			И ТипЗнч(Форма.Параметры.Основание) = Тип("Структура") Тогда
		Основание = Форма.Параметры.Основание;
		Если Основание.Свойство("Объект1СДокументооборота") Тогда
			КомандаФормы = Форма.Команды.Добавить("ИдентификаторОбъектаДО");
			КомандаФормы.Действие = Основание.Объект1СДокументооборота.ID;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат выполнения выражения на встроенном языке. Выражение может использоваться только для вычисления
// какого-либо значения, которое в итоге вернет функция. Никакие изменения в базу данных при этом вноситься не
// должны, поэтому выражение выполняется в транзакции, которая откатывается после завершения выполнения.
//
// Параметры:
//   ВычисляемоеВыражение - Строка - выражение на встроенном языке.
//   Источник - Произвольный - источник данных.
//   Приемник - Произвольный - приемник данных.
//   ТекущаяСтрока - Произвольный - передается в случае, если выражение используется для заполнения реквизита
//     строки табличной части.
//
// Возвращаемое значение:
//   Произвольный - результат выполнения выражения на встроенном языке.
//
Функция РезультатВыраженияНаВстроенномЯзыке(ВычисляемоеВыражение, Источник, Приемник = Неопределено,
		ТекущаяСтрока = Неопределено) Экспорт
	
	// BSLLS:PairingBrokenTransaction-off
	// Проектное решение. Методы НачатьТранзакцию / ОтменитьТранзакцию используются для предотвращения
	// несанкционированных действий с БД из выражения на встроенном языке
	
	Параметры = Новый Структура;
	Параметры.Вставить("Источник", Источник);
	Параметры.Вставить("Приемник", Приемник);
	Параметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	Параметры.Вставить("Результат", Неопределено);
	
	Ошибки = "";
	НачатьТранзакцию();
	Попытка
		ОбщегоНазначения.ВыполнитьВБезопасномРежиме(
			ВычисляемоеВыражение,
			Параметры);
	Исключение
		Ошибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	Если Ошибки = "" Тогда
		Возврат Параметры.Результат;
	Иначе
		ВызватьИсключение Ошибки;
	КонецЕсли;
	
	// BSLLS:PairingBrokenTransaction-on
	
КонецФункции

// Создает новый объект Документооборота по объекту ИС и указанному правилу.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - правило заполнения.
//
// Возвращаемое значение:
//   ОбъектXDTO - созданный объект, или
//   Строка - сообщение об ошибке.
//
Функция СоздатьОбъектДОПоПравилу(Прокси, ОбъектИС, Правило) Экспорт
	
	СписокОбъектовИС = Новый Массив;
	СписокОбъектовИС.Добавить(ОбъектИС);
	
	ПодходящиеПравилаИнтеграции = Новый Соответствие;
	СписокПравил = Новый Массив;
	СписокПравил.Добавить(Правило);
	ПодходящиеПравилаИнтеграции.Вставить(ОбъектИС, СписокПравил);
	
	Результат = СоздатьОбъектыДОПоПравилам(Прокси, СписокОбъектовИС, ПодходящиеПравилаИнтеграции);
	
	Если Результат[ОбъектИС].Успешно Тогда
		Возврат Результат[ОбъектИС].ОбъектXDTO;
	Иначе
		Возврат Результат[ОбъектИС].ТекстОшибки;
	КонецЕсли;
	
КонецФункции

// Создает новые объекты Документооборота для списка объектов ИС по соответствующих им правилам.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   СписокОбъектовИС - Массив из ЛюбаяСсылка - объекты ИС, источник данных заполнения.
//   ПодходящиеПравилаИнтеграции - Соответствие - соответствующие правила интеграции:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - Массив из СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - список подходящих правил.
//
// Возвращаемое значение:
//   Соответствие:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - Структура - результат по объекту ИС:
//       ** Успешно - Булево - Истина, если связанный объект в ДО был создан успешно, Ложь, если возникли ошибки.
//       ** ТекстОшибки - Строка - сообщение об ошибке.
//       ** ОбъектXDTO - ОбъектXDTO - созданный в ДО объект.
//
Функция СоздатьОбъектыДОПоПравилам(Прокси, СписокОбъектовИС, ПодходящиеПравилаИнтеграции) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMCreateFromIncomingDataRequest");
	
	СоответствиеПравилЗагрузкиВДООбъектамИС = СоответствиеПравилЗагрузкиВДООбъектамИС(
		Прокси,
		СписокОбъектовИС,
		ПодходящиеПравилаИнтеграции);
	СоответствиеСпискаВыраженийОбъектамИС = СоответствиеСпискаВыраженийОбъектамИС(
		Прокси,
		СписокОбъектовИС,
		СоответствиеПравилЗагрузкиВДООбъектамИС);
	
	// Добавим в запрос те объекты, для которых есть единственное подходящее dataLoadingRule
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл
		
		РезультатПоОбъекту = Новый Структура("Успешно, ТекстОшибки, ОбъектXDTO", Истина, "", Неопределено);
		
		ПравилоЗагрузкиВДО = СоответствиеПравилЗагрузкиВДООбъектамИС[ОбъектИС];
		Если ПравилоЗагрузкиВДО = Неопределено Тогда
			РезультатПоОбъекту.Успешно = Ложь;
			РезультатПоОбъекту.ТекстОшибки = НСтр("ru = 'Не найдено подходящее правило загрузки данных в 1С:Документооборот'");
			Результат.Вставить(ОбъектИС, РезультатПоОбъекту);
			Продолжить;
		КонецЕсли;
		
		СтруктураСозданияОбъекта = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMIncomingDataRequestStructure");
		
		Попытка
			СтруктураСозданияОбъекта.incomingData = ВходящиеДанныеОбъектаИС(
				Прокси,
				ОбъектИС,
				СоответствиеСпискаВыраженийОбъектамИС[ОбъектИС]);
		Исключение
			РезультатПоОбъекту.Успешно = Ложь;
			РезультатПоОбъекту.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.Вставить(ОбъектИС, РезультатПоОбъекту);
			Продолжить;
		КонецПопытки;
		
		СтруктураСозданияОбъекта.externalObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"ExternalObjectID");
		СтруктураСозданияОбъекта.externalObject.ID = Строка(ОбъектИС.УникальныйИдентификатор());
		СтруктураСозданияОбъекта.externalObject.type = ОбъектИС.Метаданные().ПолноеИмя();
		
		СтруктураСозданияОбъекта.dataLoadingRule = ПравилоЗагрузкиВДО;
		
		Запрос.objects.Добавить(СтруктураСозданияОбъекта);
		
		Результат.Вставить(ОбъектИС, РезультатПоОбъекту);
		
	КонецЦикла;
	
	Если Запрос.objects.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Для Каждого СтруктураОтвета Из Ответ.objects Цикл
		ОбъектИС = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкаИзUUID(
			СтруктураОтвета.key.type,
			СтруктураОтвета.key.ID);
		Если СтруктураОтвета.success Тогда
			
			ОбъектXDTO = СтруктураОтвета.object;
			Результат[ОбъектИС].ОбъектXDTO = ОбъектXDTO;
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДобавитьСвязь(
				ОбъектXDTO.objectId.ID,
				ОбъектXDTO.objectId.type,
				ОбъектИС);
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьШтрихкод(
				ОбъектИС,
				ОбъектXDTO.objectID.ID,
				ОбъектXDTO.objectID.type);
			
		Иначе
			Результат[ОбъектИС].Успешно = Ложь;
			Результат[ОбъектИС].ТекстОшибки = СтруктураОтвета.error.description;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Находит на стороне 1С:Документооборот правила загрузки данных в 1С:Документооборот, соответствующие
// переданным объектам интегрированной системы.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   СписокОбъектовИС - Массив из ЛюбаяСсылка - объекты ИС, для которых требуется найти соответствующие правила.
//   ПодходящиеПравилаИнтеграции - Соответствие - соответствующие правила интеграции:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - Массив из СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - список подходящих правил.
//
// Возвращаемое значение:
//   Соответствие:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - ОбъектXDTO - объект XDTO типа DMDataLoadingRule.
//                - Неопределено - если подходящее правило загрузки не было найдено.
//
Функция СоответствиеПравилЗагрузкиВДООбъектамИС(Прокси, СписокОбъектовИС, ПодходящиеПравилаИнтеграции) Экспорт
	
	Результат = Новый Соответствие;
	
	Если СписокОбъектовИС.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВсеПравила = Новый Массив;
	Для Каждого СоответствиеПравил Из ПодходящиеПравилаИнтеграции Цикл
		Для Каждого Правило Из СоответствиеПравил.Значение Цикл
			Если ВсеПравила.Найти(Правило) = Неопределено Тогда
				ВсеПравила.Добавить(Правило);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СсылкиНаПравилаЗагрузкиВДО = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеПравила, "ПравилоЗагрузкиДанныхВДО");
	
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл
		Если ПодходящиеПравилаИнтеграции[ОбъектИС].Количество() = 1 Тогда
			ПравилоИнтеграции = ПодходящиеПравилаИнтеграции[ОбъектИС][0];
			Результат.Вставить(
				ОбъектИС,
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
					Прокси,
					СсылкиНаПравилаЗагрузкиВДО[ПравилоИнтеграции],
					"DMDataLoadingRule"));
		Иначе
			Результат.Вставить(ОбъектИС, Неопределено)
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список выражений на встроенном языке, которые требуется выполнить на стороне интегрированной сисетмы,
// для последующей передачи результатов на сторону 1С:Документооборот.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   СписокОбъектовИС - Массив из ЛюбаяСсылка - объекты ИС, для которых требуется найти соответствующие правила.
//   СоответствиеПравилЗагрузкиВДООбъектамИС - Соответствие - соответствующие правила загрузки в ДО:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - ОбъектXDTO - объект XDTO типа DMDataLoadingRule.
//                - Неопределено - если подходящее правило загрузки не было найдено.
//
// Возвращаемое значение:
//   Соответствие:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - Массив из Строка - список выражений на встроенном языке.
//
Функция СоответствиеСпискаВыраженийОбъектамИС(Прокси, СписокОбъектовИС, СоответствиеПравилЗагрузкиВДООбъектамИС) Экспорт
	
	Результат = Новый Соответствие;
	
	Если СписокОбъектовИС.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetExpressionListRequest");
	
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл
		Если СоответствиеПравилЗагрузкиВДООбъектамИС[ОбъектИС] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.objects.Добавить(СоответствиеПравилЗагрузкиВДООбъектамИС[ОбъектИС]);
	КонецЦикла;
	
	Если Запрос.objects.Количество() > 0 Тогда
		Ответ = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		МассивВсехВыражений = Ответ.objectsExpressionRows;
	Иначе
		МассивВсехВыражений = Новый Массив;
	КонецЕсли;
	
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл
		СписокВыражений = Новый Массив;
		ПравилоЗагрузкиВДО = СоответствиеПравилЗагрузкиВДООбъектамИС[ОбъектИС];
		
		Если ПравилоЗагрузкиВДО <> Неопределено Тогда
			Для Каждого Элемент Из МассивВсехВыражений Цикл
				Если Элемент.object.id = ПравилоЗагрузкиВДО.id Тогда
					СписокВыражений = Элемент.expressionRows;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Результат.Вставить(ОбъектИС, СписокВыражений);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВебСервисБИД

Процедура ДобавитьОписаниеРеквизитов(СписокРеквизитовXDTO, СписокРеквизитов, Синонимы, ЭтоСтандартныеРеквизиты = Ложь)
	
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		Если ЭтоСтандартныеРеквизиты
			И (Реквизит.Имя <> "Код"
				И Реквизит.Имя <> "Наименование"
				И Реквизит.Имя <> "Владелец"
				И Реквизит.Имя <> "Родитель"
				И Реквизит.Имя <> "Номер"
				И Реквизит.Имя <> "Дата") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Реквизит.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитXDTO = СоздатьОбъектБИД("DMILMetadataAttribute");
		РеквизитXDTO.name = Реквизит.Имя;
		РеквизитXDTO.synonym = ?(Реквизит.Синоним = "", Реквизит.Имя, Реквизит.Синоним);
		
		ДобавитьОписаниеТиповРеквизита(РеквизитXDTO.typesList, Реквизит.Тип, Синонимы);
		СписокРеквизитовXDTO.Добавить(РеквизитXDTO);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОписаниеДопРеквизитов(СписокРеквизитовXDTO, СписокРеквизитов, Синонимы)
	
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		РеквизитXDTO = СоздатьОбъектБИД("DMILMetadataAttribute");
		РеквизитXDTO.name = Реквизит.Имя;
		РеквизитXDTO.synonym = Реквизит.Наименование;
		
		ДобавитьОписаниеТиповРеквизита(РеквизитXDTO.typesList, Реквизит.ТипЗначения, Синонимы);
		СписокРеквизитовXDTO.Добавить(РеквизитXDTO);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОписаниеТиповРеквизита(СписокТиповXDTO, ТипРеквизита, Синонимы)
	
	МассивТипов = ТипРеквизита.Типы();
	
	Если МассивТипов.Количество() > 3 Тогда
		СписокТиповXDTO.Добавить("Составной тип");
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеТипа Из МассивТипов Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеТипа);
		
		Если (ОбъектМетаданных <> Неопределено) Тогда
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
			Если ЧастиИмени[0] = "Справочник"
					Или ЧастиИмени[0] = "Документ"
					Или ЧастиИмени[0] = "Перечисление"
					Или ЧастиИмени[0] = "ПланВидовХарактеристик"
					Или ЧастиИмени[0] = "БизнесПроцесс"
					Или ЧастиИмени[0] = "Задача" Тогда
				СписокТиповXDTO.Добавить(ПолноеИмя);
				ДобавитьСиноним(Синонимы, ПолноеИмя, ОбъектМетаданных.Синоним);
			Иначе
				СписокТиповXDTO.Добавить(Строка(ОписаниеТипа));
			КонецЕсли;
		Иначе
			СписокТиповXDTO.Добавить(Строка(ОписаниеТипа));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСиноним(Синонимы, ПолноеИмя, Синоним)
	
	Если Синонимы.Получить(ПолноеИмя) = Неопределено Тогда
		Синонимы.Вставить(ПолноеИмя, Синоним);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуПревышенияВремениВыполнения(ВремяВыполнения, Сообщение, Результат)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Сообщение);
	ТекстОбъектаСообщение = ЗаписьXML.Закрыть();
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, Результат);
	ТекстОбъектаРезультат = ЗаписьXML.Закрыть();
	
	ЗаписьЖурналаРегистрации(
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(
			НСтр("ru = 'Обработка запросов XDTO'", ОбщегоНазначения.КодОсновногоЯзыка())),
		УровеньЖурналаРегистрации.Ошибка,,,
		СтрШаблон(НСтр("ru = 'Превышено время ожидания выполнения запроса.
			|Время выполнения: %1
			|
			|Текст запроса:
			|%2
			|
			|Результат запроса:
			|%3'"),
				ВремяВыполнения,
				ТекстОбъектаСообщение,
				ТекстОбъектаРезультат));
	
КонецПроцедуры

// Ищет в правилах интеграции выражения на встроенном языке, которые требуется выполнить на стороне ДО,
// для последующего заполнения данных объекта на стороне ИС.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMILGetExpressionListRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILGetExpressionListResponse или DMILError.
//
Функция СписокВыраженийНаВстроенномЯзыкеДляВыполненияНаСторонеДО(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъектБИД("DMILGetExpressionListResponse");
		
		СписокОбъектовИС = Новый Массив;
		СоответствиеObjectIDОбъектамИС = Новый Соответствие;
		
		Для Каждого ObjectID Из Сообщение.objects Цикл
			Ссылка = ПолучитьСсылкуПоObjectID(ObjectID);
			СписокОбъектовИС.Добавить(Ссылка);
			СоответствиеObjectIDОбъектамИС.Вставить(Ссылка, ObjectID);
		КонецЦикла;
		
		ПодходящиеПравила = ИнтеграцияС1СДокументооборот3ВызовСервера.ПодходящиеПравилаИнтеграции(
			СписокОбъектовИС,
			Истина);
		
		ПравилаДляАнализа = Новый Массив;
		Для Каждого СоответствиеПравил Из ПодходящиеПравила Цикл
			Для Каждого Правило Из СоответствиеПравил.Значение Цикл
				Если ПравилаДляАнализа.Найти(Правило) = Неопределено Тогда
					ПравилаДляАнализа.Добавить(Правило);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПравилаЗаполненияРеквизитовИС.Ссылка КАК Ссылка,
			|	ПравилаЗаполненияРеквизитовИС.id КАК id,
			|	ПравилаЗаполненияРеквизитовИС.ВычисляемоеВыражение КАК ВычисляемоеВыражение,
			|	ПравилаЗаполненияРеквизитовИС.Таблица КАК Таблица,
			|	ПравилаЗаполненияРеквизитовИС.ЭтоТаблица КАК ЭтоТаблица,
			|	ЕСТЬNULL(ПравилаЗаполненияРеквизитовИСРодитель.ИмяРеквизитаОбъектаДО, """") КАК ИмяТаблицыИсточника
			|ИЗ
			|	Справочник.ПравилаИнтеграцииС1СДокументооборотом3.ПравилаЗаполненияРеквизитовИС КАК ПравилаЗаполненияРеквизитовИС
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаИнтеграцииС1СДокументооборотом3.ПравилаЗаполненияРеквизитовИС КАК ПравилаЗаполненияРеквизитовИСРодитель
			|		ПО ПравилаЗаполненияРеквизитовИС.Ссылка = ПравилаЗаполненияРеквизитовИСРодитель.Ссылка
			|			И ПравилаЗаполненияРеквизитовИС.Таблица = ПравилаЗаполненияРеквизитовИСРодитель.ИмяРеквизитаОбъектаИС
			|			И (ПравилаЗаполненияРеквизитовИСРодитель.ЭтоТаблица)
			|ГДЕ
			|	ПравилаЗаполненияРеквизитовИС.Вариант = ЗНАЧЕНИЕ(Перечисление.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке)
			|	И ПравилаЗаполненияРеквизитовИС.МестоВыполненияВыражения = ЗНАЧЕНИЕ(Перечисление.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеДО)
			|	И ПравилаЗаполненияРеквизитовИС.Ссылка В(&ПравилаДляАнализа)");
		Запрос.УстановитьПараметр("ПравилаДляАнализа", ПравилаДляАнализа);
		ТаблицаВыраженияПравил = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СоответствиеПравил Из ПодходящиеПравила Цикл
			СоответствиеПравилXDTO = СоздатьОбъектБИД("DMILObjectExpressionRow");
			СоответствиеПравилXDTO.object = СоответствиеObjectIDОбъектамИС[СоответствиеПравил.Ключ];
			
			КолВоПравил = СоответствиеПравил.Значение.Количество();
			Если КолВоПравил = 1 Тогда
				ВыраженияПравила = ТаблицаВыраженияПравил.НайтиСтроки(Новый Структура("Ссылка", СоответствиеПравил.Значение[0]));
				Для Каждого ВыражениеПравила Из ВыраженияПравила Цикл
					ВыражениеПравилаXDTO = СоздатьОбъектБИД("DMILExpressionRow");
					ВыражениеПравилаXDTO.id = ВыражениеПравила.id;
					ВыражениеПравилаXDTO.expressionOnBuiltInLanguage = ВыражениеПравила.ВычисляемоеВыражение;
					ВыражениеПравилаXDTO.tabularSectionName = ВыражениеПравила.ИмяТаблицыИсточника;
					
					Если ВыражениеПравила.ЭтоТаблица = Истина Тогда
						ВыражениеПравилаXDTO.type = "TabularSection";
						
					ИначеЕсли ВыражениеПравила.ЭтоТаблица = Ложь И ВыражениеПравила.Таблица <> "" Тогда
						ВыражениеПравилаXDTO.type = "TabularSectionAttribute";
						
					Иначе
						ВыражениеПравилаXDTO.type = "Attribute";
						
					КонецЕсли;
					
					СоответствиеПравилXDTO.expressionRows.Добавить(ВыражениеПравилаXDTO);
				КонецЦикла;
			Иначе
				Ошибка = СоздатьОбъектБИД("DMILError");
				Ошибка.subject = НСтр("ru = 'Ошибка при получении списка выражений на встроенном языке'");
				Ошибка.description = СтрШаблон(
					НСтр("ru = 'Для объекта ""%1"" не удалось подобрать единственное подходящее правило интеграции.
						|Всего найдено правил: %2'"),
						СоответствиеПравил.Ключ,
						КолВоПравил);
				СоответствиеПравилXDTO.error = Ошибка;
			КонецЕсли;
			
			Ответ.objectsExpressionRows.Добавить(СоответствиеПравилXDTO);
		КонецЦикла;
		
	Исключение
		
		Ответ = СоздатьОбъектБИД("DMILError");
		Ответ.subject = НСтр("ru = 'Ошибка при получении списка выражений на встроенном языке'");
		Инфо = ИнформацияОбОшибке();
		Ответ.description = ПолучитьОписаниеОшибки(Инфо);
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает структуру метаданных ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILGetMetadataResponse или DMError.
//
Функция СтруктураМетаданныхИнтегрированнойСистемы()
	
	Попытка
		
		Ответ = СоздатьОбъектБИД("DMILGetMetadataResponse");
		
		Описание = СтандартныеПодсистемыПовтИсп.НовоеОписаниеПодсистемы();
		ОбновлениеИнформационнойБазыБИД.ПриДобавленииПодсистемы(Описание);
		
		Ответ.dataBaseName = Метаданные.КраткаяИнформация;
		Ответ.dataBaseID = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ИдентификаторБазыДанных();
		Ответ.dmilVersionNumber = Описание.Версия;
		
		Синонимы = Новый Соответствие;
		
		Для Каждого ТипЗначения Из Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый.Тип.Типы() Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
			
			Если ОбъектМетаданных = Неопределено
				Или (Не ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных)
					И Не ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных)) Тогда
				Продолжить;
			КонецЕсли;
			
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			
			ОбъектМетаданныхXDTO = СоздатьОбъектБИД("DMILMetadataObject");
			ОбъектМетаданныхXDTO.name = ПолноеИмя;
			
			ДобавитьСиноним(Синонимы, ПолноеИмя, ОбъектМетаданных.Синоним);
			
			РеквизитXDTO = СоздатьОбъектБИД("DMILMetadataAttribute");
			РеквизитXDTO.name = "Представление";
			РеквизитXDTO.synonym = НСтр("ru = 'Представление'");
			ДобавитьОписаниеТиповРеквизита(РеквизитXDTO.typesList, Новый ОписаниеТипов("Строка"), Синонимы);
			ОбъектМетаданныхXDTO.attributes.Добавить(РеквизитXDTO);
			
			ДобавитьОписаниеРеквизитов(
				ОбъектМетаданныхXDTO.attributes,
				ОбъектМетаданных.СтандартныеРеквизиты,
				Синонимы,
				Истина);
			ДобавитьОписаниеРеквизитов(
				ОбъектМетаданныхXDTO.attributes,
				ОбъектМетаданных.Реквизиты,
				Синонимы);
			
			ВладелецСвойств = Новый(ТипЗначения);
			Если УправлениеСвойствами.ИспользоватьДопРеквизиты(ВладелецСвойств) Тогда
				ДобавитьОписаниеДопРеквизитов(
					ОбъектМетаданныхXDTO.attributes,
					УправлениеСвойствами.СвойстваОбъекта(ВладелецСвойств, Истина, Ложь),
					Синонимы);
			КонецЕсли;
			
			Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
				
				Если ТабличнаяЧасть.Имя = "ДополнительныеРеквизиты" Или Лев(ТабличнаяЧасть.Имя, 7) = "Удалить" Тогда
					Продолжить;
				КонецЕсли;
				
				ТабличнаяЧастьXDTO = СоздатьОбъектБИД("DMILMetadataTabularSection");
				ТабличнаяЧастьXDTO.name = ТабличнаяЧасть.Имя;
				ТабличнаяЧастьXDTO.synonym = ТабличнаяЧасть.Синоним;
				
				ДобавитьОписаниеРеквизитов(
					ТабличнаяЧастьXDTO.attributes,
					ТабличнаяЧасть.СтандартныеРеквизиты,
					Синонимы,
					Истина);
				ДобавитьОписаниеРеквизитов(
					ТабличнаяЧастьXDTO.attributes,
					ТабличнаяЧасть.Реквизиты,
					Синонимы);
				
				ОбъектМетаданныхXDTO.tabularSections.Добавить(ТабличнаяЧастьXDTO);
				
			КонецЦикла;
			
			Ответ.metadataObjects.Добавить(ОбъектМетаданныхXDTO);
		КонецЦикла;
		
		Для Каждого Синоним Из Синонимы Цикл
			ОбъектМетаданныхXDTO = СоздатьОбъектБИД("DMILMetadataSynonym");
			ОбъектМетаданныхXDTO.name = Синоним.Ключ;
			ОбъектМетаданныхXDTO.synonym = Синоним.Значение;
			Ответ.metadataSynonyms.Добавить(ОбъектМетаданныхXDTO);
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Ошибка = СоздатьОбъектБИД("DMILError");
		Ошибка.subject = НСтр("ru = 'Ошибка при получении данных хронометража'");
		Инфо = ИнформацияОбОшибке();
		Ошибка.description = ПолучитьОписаниеОшибки(Инфо);
		Возврат Ошибка;
		
	КонецПопытки;
	
КонецФункции

// Проверяет корректность выражения на встроенном языке, используемого для заполнения реквизитов в
// правилах интеграции.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMILCheckExpressionOnBuiltInLanguageRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILOK или DMILError.
//
Функция ПроверитьВыражениеНаВстроенномЯзыке(Сообщение)
	
	НачатьТранзакцию();
	
	Попытка
		
		МенеджерИсточника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Сообщение.objectType);
		МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(Сообщение.objectType);
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеИсточника)
				Или ОбщегоНазначения.ЭтоПланВидовРасчета(МетаданныеИсточника) Тогда
			Источник = МенеджерИсточника.СоздатьЭлемент();
		ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеИсточника) Тогда
			Источник = МенеджерИсточника.СоздатьДокумент();
		КонецЕсли;
		Источник.Заполнить(Неопределено);
		
		Если СокрЛП(Сообщение.expressionOnBuiltInLanguage) <> "" Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("Источник", Источник);
			Параметры.Вставить("Результат", Неопределено);
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Сообщение, "tabularSectionName")
					И Сообщение.tabularSectionName <> "" Тогда
				Параметры.Вставить("ТекущаяСтрока", Источник[Сообщение.tabularSectionName].Добавить());
			КонецЕсли;
			
			ОбщегоНазначения.ВыполнитьВБезопасномРежиме(Сообщение.expressionOnBuiltInLanguage, Параметры);
		КонецЕсли;
		
		Ответ = СоздатьОбъектБИД("DMILOK");
		
	Исключение
		
		Ответ = СоздатьОбъектБИД("DMILError");
		Ответ.subject = НСтр("ru = 'Найдена ошибка в выражении на встроенном языке'");
		Инфо = ИнформацияОбОшибке();
		Ответ.description = ПолучитьОписаниеОшибки(Инфо);
		
	КонецПопытки;
	
	Если ТранзакцияАктивна() Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьДанныеИзСпискаВыражений(Прокси, ОбъектИС, ОбъектДанных, СписокВыражений)
	
	Для Каждого Выражение Из СписокВыражений Цикл
		
		Если СокрЛП(Выражение.expressionOnBuiltInLanguage) = "" Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не задан текст выражения на встроенном языке.
					|Идентификатор выражения: %1.'"),
				Выражение.id);
		КонецЕсли;
		
		Если Выражение.type = "Attribute" Тогда
			// Выражение для заполнения реквизита. Выполняем единожды, помещаем в attributes.
			РезультатВыражения = РезультатВыраженияНаВстроенномЯзыке(
				Выражение.expressionOnBuiltInLanguage,
				ОбъектИС);
			ОбъектДанных.attributes.Добавить(
				ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, Выражение.id, РезультатВыражения));
			
		ИначеЕсли Выражение.type = "TabularSection" Тогда
			// Выражение для заполнения табличной части. Выполняем единожды, помещаем в tabularSections.
			РезультатВыражения = РезультатВыраженияНаВстроенномЯзыке(
				Выражение.expressionOnBuiltInLanguage,
				ОбъектИС);
			ОбъектДанных.tabularSections.Добавить(ПреобразоватьТаблицуОбъектаИСВОбъектXDTO(
				Прокси,
				Выражение.id,
				РезультатВыражения,
				РезультатВыражения.Колонки));
			
		ИначеЕсли Выражение.type = "TabularSectionAttribute" Тогда
			// Выражение для заполнения реквизита таб. части.
			ТаблицаРезультат = Новый ТаблицаЗначений;
			ТаблицаРезультат.Колонки.Добавить("Result");
			
			Если Выражение.tabularSectionName = "" Тогда
				// Вариант: по правилам для отдельных реквизитов.
				// Выполняем единожды, помещаем в attributes.
				РезультатВыражения = РезультатВыраженияНаВстроенномЯзыке(
					Выражение.expressionOnBuiltInLanguage,
					ОбъектИС);
				СтрокаРезультат = ТаблицаРезультат.Добавить();
				СтрокаРезультат.Result = РезультатВыражения;
				
			Иначе
				// Вариант: из таблицы источника.
				// Выполняем многократно для каждой строки источника, помещаем в tabularSections.
				Для Каждого ТекущаяСтрока Из ОбъектИС[Выражение.tabularSectionName] Цикл
					РезультатВыражения = РезультатВыраженияНаВстроенномЯзыке(
						Выражение.expressionOnBuiltInLanguage,
						ОбъектИС,,
						ТекущаяСтрока);
					СтрокаРезультат = ТаблицаРезультат.Добавить();
					СтрокаРезультат.Result = РезультатВыражения;
				КонецЦикла;
				
			КонецЕсли;
			
			ОбъектДанных.tabularSections.Добавить(ПреобразоватьТаблицуОбъектаИСВОбъектXDTO(
				Прокси,
				Выражение.id,
				ТаблицаРезультат,
				ТаблицаРезультат.Колонки));
			
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не задан вариант выполнения выражения на встроенном языке.
					|Идентификатор выражения: %1.'"),
				Выражение.id);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыИзМетаданных(Прокси, РеквизитыПриемник, РеквизитыИсточник, ОбъектИС,
		ЭтоСтандартныеРеквизиты = Ложь, ЭтоДопРеквизиты = Ложь)
	
	Для Каждого Реквизит Из РеквизитыИсточник Цикл
		Если ЭтоДопРеквизиты Тогда
			Значение = УправлениеСвойствами.ЗначениеСвойства(ОбъектИС.Ссылка, Реквизит);
		Иначе
			Значение = ОбъектИС[Реквизит.Имя];
		КонецЕсли;
		
		РеквизитыПриемник.Добавить(ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, Реквизит.Имя, Значение));
	КонецЦикла;
	
КонецПроцедуры

Функция ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, ИмяРеквизита, ЗначениеРеквизита)
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMDataAttribute");
	Результат.name = ИмяРеквизита;
	
	ТипРеквизита = ТипЗнч(ЗначениеРеквизита);
	
	Если ТипРеквизита = Тип("Неопределено") Тогда
		// Свойство value оставляем не установленным.
		Возврат Результат;
		
	ИначеЕсли ТипРеквизита = Тип("ОбъектXDTO") Тогда
		СкопироватьОбъектXDTO(Прокси, Результат.value, ЗначениеРеквизита);
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипРеквизита) Тогда
		Если ЗначениеРеквизита.Пустая() Тогда
			// Свойство value оставляем не установленным.
			Возврат Результат;
		Иначе
			ИмяТипаXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаXDTO(
				Метаданные.НайтиПоТипу(ТипРеквизита).ПолноеИмя());
			
			Если ИмяТипаXDTO = "" Тогда
				Результат.value = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObject");
			Иначе
				Результат.value = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, ИмяТипаXDTO);
			КонецЕсли;
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитыИзПотребителя(
				Прокси,
				Результат.value,
				ЗначениеРеквизита);
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("Строка")
			Или ТипРеквизита = Тип("Число")
			Или ТипРеквизита = Тип("Дата")
			Или ТипРеквизита = Тип("Булево") Тогда
		Результат.value = ЗначениеРеквизита;
		
	ИначеЕсли ТипРеквизита = Тип("УникальныйИдентификатор") Тогда
		Результат.value = Строка(ЗначениеРеквизита);
		
	Иначе
		Результат.error = СтрШаблон(
			НСтр("ru = 'Невозможно выгрузить данные из реквизита ""%1"" с типом ""%2"".'"),
			ИмяРеквизита,
			ТипРеквизита);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьТаблицуОбъектаИСВОбъектXDTO(Прокси, ИмяТаблицы, ТаблицаЗначений, Колонки)
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMDataTabularSection");
	Результат.name = ИмяТаблицы;
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		СтрокаXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMDataTabularSectionRow");
		
		Для Каждого Колонка Из Колонки Цикл
			СтрокаXDTO.attributes.Добавить(
				ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, Колонка.Имя, Строка[Колонка.Имя]));
		КонецЦикла;
		
		Результат.rows.Добавить(СтрокаXDTO);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура СкопироватьОбъектXDTO(Прокси, Приемник, Источник)
	
	Приемник = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, Источник.Тип().Имя);
	Для Каждого Свойство Из Источник.Тип().Свойства Цикл
		
		Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Источник, Свойство.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Источник[Свойство.Имя]) = Тип("ОбъектXDTO") Тогда
			СкопироватьОбъектXDTO(Прокси, Приемник[Свойство.Имя], Источник[Свойство.Имя]);
			
		ИначеЕсли ТипЗнч(Источник[Свойство.Имя]) = Тип("СписокXDTO") Тогда
			Для Каждого СтрокаСпискаИсточника Из Источник[Свойство.Имя] Цикл
				СтрокаСпискаПриемника = Неопределено;
				СкопироватьОбъектXDTO(Прокси, СтрокаСпискаПриемника, СтрокаСпискаИсточника);
				Приемник[Свойство.Имя].Добавить(СтрокаСпискаПриемника);
			КонецЦикла;
			
		Иначе
			Приемник[Свойство.Имя] = Источник[Свойство.Имя];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти