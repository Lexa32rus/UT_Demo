////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборот3ВызовСервера: сервер, вызов сервера
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Возвращает навигационную ссылку, по которой открывается связанная база 1С:Документооборот.
//
// Параметры:
//   БезАвторизации - Булево - к навигационной ссылке следует добавить параметры авторизации.
//
// Возвращаемое значение:
//   Строка
//
Функция НавигационнаяСсылкаБазыДО(БезАвторизации = Ложь) Экспорт
	
	Если БезАвторизации = Ложь
			И ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен
			И Не ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС Тогда
		Адрес = СтрШаблон("%1?N=%2&P=%3",
			Константы.АдресВебСервиса1СДокументооборот.Получить(),
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя,
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль);
	Иначе
		Адрес = Константы.АдресВебСервиса1СДокументооборот.Получить();
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

// Стартует в 1С:Документооборот обработку объекта.
//
// Параметры:
//   ОбъектДО - Структура- объект ДО, обработку которого требуется запустить:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//   ТекстОшибки - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево - Истина, если обработка была запущена успешно.
//
Функция НачатьОбработку(ОбъектДО, ТекстОшибки) Экспорт
	
	Успешно = Истина;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMStartProcessingRequest");
	Запрос.object = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ОбъектДО.ID,
		ОбъектДО.type);
	
	Ответ = Прокси.execute(Запрос);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		Успешно = Ложь;
		ТекстОшибки = СокрЛП(Ответ.description);
		// Запишем в ЖР полный текст ошибки.
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(Ответ.subject),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецЕсли;
	
	Возврат Успешно;
	
КонецФункции

// Получает из Документооборота подходящие для указанного типа объекта ИС правила загрузки данных в ДО.
//
// Параметры:
//   ТипОбъектаИС - Строка - полное имя типа объекта ИС.
//   ПравилаЗагрузкиXDTO - СписокXDTO - список правил загрузки, которые в целях оптимизации могли быть
//      получены ранее в пакетном запросе к 1С:Документооборот.
//
// Возвращаемое значение:
//   Массив из Структура:
//     * ПравилоЗагрузкиВДО - Строка
//     * ПравилоЗагрузкиВДОID - Строка
//     * ТипОбъектаДО - Строка
//     * ВидДокументаДО - Строка
//     * ВидДокументаДОID - Строка
//
Функция ПодходящиеПравилаЗагрузкиВДО(ТипОбъектаИС, Знач ПравилаЗагрузкиXDTO = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ТипОбъектаИС) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПравилаЗагрузкиXDTO = Неопределено Тогда
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetDataLoadingRulesRequest");
		Запрос.externalObjectType = ТипОбъектаИС;
		
		Ответ = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		
		ПравилаЗагрузкиXDTO = Ответ.dataLoadingRules;
	КонецЕсли;
	
	Для Каждого ПравилоЗагрузкиXDTO Из ПравилаЗагрузкиXDTO Цикл
		Правило = Новый Структура;
		
		Правило.Вставить("ПравилоЗагрузкиВДО", ПравилоЗагрузкиXDTO.objectName);
		Правило.Вставить("ПравилоЗагрузкиВДОID", ПравилоЗагрузкиXDTO.objectID.id);
		Правило.Вставить("НавигационнаяСсылка", ПравилоЗагрузкиXDTO.objectID.navigationRef);
		
		Правило.Вставить("ТипОбъектаДО", ПравилоЗагрузкиXDTO.objectType);
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
				ПравилоЗагрузкиXDTO, "documentType") Тогда
			Правило.Вставить("ВидДокументаДО", ПравилоЗагрузкиXDTO.documentType.name);
			Правило.Вставить("ВидДокументаДОID", ПравилоЗагрузкиXDTO.documentType.objectID.id);
		КонецЕсли;
		
		Результат.Добавить(Правило);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Подбирает для переданных объектов ИС подходящие им правила интеграции.
//
// Параметры:
//   СписокОбъектовИС - Массив из ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - список
//     объектов ИС, для которых требуется подобрать подходящие правила интеграции.
//   ТолькоПриоритетные - Булево - правила будут отсортированы по приоритету, и в выборку попадут только
//     правила с наивысшим приоритетом. Чем больше ключевых реквизитов правила совпало со значениями реквизитов
//     объекта ИС, тем выше приоритет правила для данного конкретного объекта ИС.
//
// Возвращаемое значение:
//   Соответствие:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - Массив из СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - список подходящих правил.
//
Функция ПодходящиеПравилаИнтеграции(СписокОбъектовИС, ТолькоПриоритетные = Ложь) Экспорт
	
	Результат = Новый Соответствие;
	
	Если СписокОбъектовИС.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Сформируем массив из типов переданных объектов ИС без повторений.
	МассивТиповОбъектовИС = Новый Массив;
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл
		ТипОбъектаИС = ОбъектИС.Метаданные().ПолноеИмя();
		Если МассивТиповОбъектовИС.Найти(ТипОбъектаИС) = Неопределено Тогда
			МассивТиповОбъектовИС.Добавить(ТипОбъектаИС);
		КонецЕсли;
	КонецЦикла;
	
	// Найдем правила интеграции, соответствующие указанным типам.
	// Выберем имена и значения, указанных в них ключевых реквизитов.
	ЗапросВсеПравила = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаИнтеграцииС1СДокументооборотом3.ТипОбъектаИС КАК ТипОбъектаИС,
		|	ПравилаИнтеграцииС1СДокументооборотом3.Ссылка КАК Правило,
		|	ПравилаИнтеграцииС1СДокументооборотом3КлючевыеРеквизитыИС.Имя КАК ИмяРеквизита,
		|	ПравилаИнтеграцииС1СДокументооборотом3КлючевыеРеквизитыИС.ЭтоДополнительныйРеквизитИС КАК ЭтоДополнительныйРеквизитИС,
		|	ПравилаИнтеграцииС1СДокументооборотом3КлючевыеРеквизитыИС.ЗначениеРеквизита КАК Значение
		|ПОМЕСТИТЬ ВсеПравила
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом3 КАК ПравилаИнтеграцииС1СДокументооборотом3
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаИнтеграцииС1СДокументооборотом3.КлючевыеРеквизитыИС КАК ПравилаИнтеграцииС1СДокументооборотом3КлючевыеРеквизитыИС
		|		ПО (ПравилаИнтеграцииС1СДокументооборотом3КлючевыеРеквизитыИС.Ссылка = ПравилаИнтеграцииС1СДокументооборотом3.Ссылка)
		|ГДЕ
		|	НЕ ПравилаИнтеграцииС1СДокументооборотом3.ПометкаУдаления
		|	И ПравилаИнтеграцииС1СДокументооборотом3.ТипОбъектаИС В(&МассивТиповОбъектовИС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПравила.ТипОбъектаИС КАК ТипОбъектаИС,
		|	ВсеПравила.Правило КАК Правило,
		|	ВсеПравила.ИмяРеквизита КАК ИмяРеквизита,
		|	ВсеПравила.ЭтоДополнительныйРеквизитИС КАК ЭтоДополнительныйРеквизитИС,
		|	ВсеПравила.Значение КАК Значение
		|ИЗ
		|	ВсеПравила КАК ВсеПравила
		|ИТОГИ ПО
		|	ТипОбъектаИС,
		|	Правило
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеПравила.ТипОбъектаИС КАК ТипОбъектаИС,
		|	ВЫБОР
		|		КОГДА ВсеПравила.ЭтоДополнительныйРеквизитИС
		|			ТОГДА """"
		|		ИНАЧЕ ВсеПравила.ИмяРеквизита
		|	КОНЕЦ КАК ИмяРеквизита,
		|	ВсеПравила.ЭтоДополнительныйРеквизитИС КАК ЭтоДополнительныйРеквизитИС
		|ИЗ
		|	ВсеПравила КАК ВсеПравила
		|ГДЕ
		|	НЕ ВсеПравила.ИмяРеквизита ЕСТЬ NULL
		|ИТОГИ ПО
		|	ТипОбъектаИС");
	ЗапросВсеПравила.УстановитьПараметр("МассивТиповОбъектовИС", МассивТиповОбъектовИС);
	
	МассивРезультатовВсеПравила = ЗапросВсеПравила.ВыполнитьПакет();
	КолВоТаблиц = МассивРезультатовВсеПравила.Количество();
	
	ВыборкаПравилаГруппировкаПоТипам = МассивРезультатовВсеПравила[КолВоТаблиц - 2].Выбрать(
		ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыборкаРеквизитыДляАнализа = МассивРезультатовВсеПравила[КолВоТаблиц - 1].Выбрать(
		ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Динамически сформируем и выполним запрос, который выберет из БД список объектов ИС,
	// для которых требуется подобрать правила интеграции, а также значения их реквизитов,
	// которые будем анализировать при поиске подходящего правила.
	ЗапросДанныеОбъектов = Новый Запрос;
	ЗапросДанныеОбъектов.УстановитьПараметр("СписокОбъектовИС", СписокОбъектовИС);
	МассивОбщийТекстЗапроса = Новый Массив;
	
	Для Каждого ТипОбъектаИС Из МассивТиповОбъектовИС Цикл
		ТекстЗапросаДляТипа = СтрШаблон(
			"ВЫБРАТЬ
			|	""%1"" КАК ТипОбъектаИС,
			|	&ВыборкаПолей
			|	ОбъектИС.Ссылка КАК Ссылка
			|ИЗ
			|	%1 КАК ОбъектИС
			|ГДЕ
			|	ОбъектИС.Ссылка В(&СписокОбъектовИС)",
			ТипОбъектаИС);
		
		ВыборкаПолей = "";
		ВыборкаРеквизитыДляАнализа.Сбросить();
		Если ВыборкаРеквизитыДляАнализа.НайтиСледующий(ТипОбъектаИС, "ТипОбъектаИС") Тогда
			МассивВыборкаПолей = Новый Массив;
			ВыборкаДетальныеЗаписи = ВыборкаРеквизитыДляАнализа.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если Не ВыборкаДетальныеЗаписи.ЭтоДополнительныйРеквизитИС Тогда
					МассивВыборкаПолей.Добавить(СтрШаблон("ОбъектИС.%1 КАК %1", ВыборкаДетальныеЗаписи.ИмяРеквизита));
				КонецЕсли;
			КонецЦикла;
			
			Если МассивВыборкаПолей.Количество() > 0 Тогда
				ВыборкаПолей = СтрСоединить(МассивВыборкаПолей, ", ") + ", ";
			КонецЕсли;
		КонецЕсли;
		
		МассивОбщийТекстЗапроса.Добавить(СтрЗаменить(ТекстЗапросаДляТипа, "&ВыборкаПолей", ВыборкаПолей));
	КонецЦикла;
	
	ЗапросДанныеОбъектов.Текст = СтрСоединить(МассивОбщийТекстЗапроса, " ; ");
	МассивРезультатовДанныеОбъектов = ЗапросДанныеОбъектов.ВыполнитьПакет();
	
	// Для каждого из объектов ИС переберем все подходящие им по типу правила, и добавим в результат
	// функции те из правил, которые подходят по ключевым реквизитам для конкретного объекта.
	Индекс = 0;
	Для Каждого ТипОбъектаИС Из МассивТиповОбъектовИС Цикл
		ВыборкаПравилаГруппировкаПоТипам.Сбросить();
		Если ВыборкаПравилаГруппировкаПоТипам.НайтиСледующий(ТипОбъектаИС, "ТипОбъектаИС") Тогда
			ЕстьПравила = Истина;
			ВыборкаПравила = ВыборкаПравилаГруппировкаПоТипам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Иначе
			ЕстьПравила = Ложь;
		КонецЕсли;
		
		ТаблицаДанныхОбъекта = МассивРезультатовДанныеОбъектов[Индекс].Выгрузить();
		Для Каждого ДанныеОбъектаИС Из ТаблицаДанныхОбъекта Цикл
			ПодходящиеПравила = Новый ТаблицаЗначений;
			ПодходящиеПравила.Колонки.Добавить("Правило",
				Новый ОписаниеТипов("СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3"));
			ПодходящиеПравила.Колонки.Добавить("Приоритет",
				Новый ОписаниеТипов("Число"));
			
			Если ЕстьПравила Тогда
				ВыборкаПравила.Сбросить();
				Пока ВыборкаПравила.Следующий() Цикл
					ДанныеПравила = ВыборкаПравила.Выбрать();
					Приоритет = 0;
					
					Если ПравилоПодходитОбъекту(ДанныеПравила, ДанныеОбъектаИС, Приоритет) Тогда
						СтрокаПодходящиеПравила = ПодходящиеПравила.Добавить();
						СтрокаПодходящиеПравила.Правило = ВыборкаПравила.Правило;
						СтрокаПодходящиеПравила.Приоритет = Приоритет;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Вернем только правила с наивысшим приоритетом.
			ПравилаСВысшимПриоритетом = Новый Массив;
			Если ПодходящиеПравила.Количество() > 0 Тогда
				ПодходящиеПравила.Сортировать("Приоритет УБЫВ");
				МаксПриоритет = ПодходящиеПравила[0].Приоритет;
				Для Каждого Строка Из ПодходящиеПравила Цикл
					Если (Строка.Приоритет = МаксПриоритет) Или Не ТолькоПриоритетные Тогда
						ПравилаСВысшимПриоритетом.Добавить(Строка.Правило);
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Результат.Вставить(ДанныеОбъектаИС.Ссылка, ПравилаСВысшимПриоритетом);
		КонецЦикла;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Подбирает для переданного объекта ИС подходящие ему правила интеграции.
//
// Параметры:
//   ОбъектИС - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС,
//     для которого требуется подобрать подходящие правила интеграции.
//   ТолькоПриоритетные - Булево - правила будут отсортированы по приоритету, и в выборку попадут только
//     правила с наивысшим приоритетом. Чем больше ключевых реквизитов правила совпало со значениями реквизитов
//     объекта ИС, тем выше приоритет правила для данного конкретного объекта ИС.
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - список подходящих правил.
//
Функция ПодходящиеПравилаИнтеграцииОбъекта(ОбъектИС, ТолькоПриоритетные = Ложь) Экспорт
	
	СписокОбъектовИС = Новый Массив;
	СписокОбъектовИС.Добавить(ОбъектИС);
	
	ПодходящиеПравилаИнтеграции = ПодходящиеПравилаИнтеграции(СписокОбъектовИС, ТолькоПриоритетные);
	
	Возврат ПодходящиеПравилаИнтеграции[ОбъектИС];
	
КонецФункции

// Возвращает из кеша ссылку на объект ДО.
//
// Возвращаемое значение:
//   Строка - ссылка на объект ДО.
//
Функция ПолучитьСсылкуНаОбъектДО() Экспорт
	
	Возврат ПараметрыСеанса.ИнтеграцияС1СДокументооборотОбъектДО;
	
КонецФункции

// Помещает в кеш ссылку на объект ДО.
//
// Параметры:
//   ОбъектДО - Строка - ссылка на объект ДО.
//
Процедура УстановитьСсылкуНаОбъектДО(ОбъектДО) Экспорт
	
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотОбъектДО = ОбъектДО;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПравилоПодходитОбъекту(ДанныеПравила, ДанныеОбъектаИС, Приоритет)
	
	ПравилоПодходит = Истина;
	
	Пока ДанныеПравила.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ДанныеПравила.ИмяРеквизита) Тогда
			// Ключевые реквизиты не заданы, считаем что правило подходит
			Прервать;
			
		ИначеЕсли ДанныеПравила.ЭтоДополнительныйРеквизитИС Тогда
			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(
				Новый УникальныйИдентификатор(ДанныеПравила.ИмяРеквизита));
			ЗначениеСвойства = УправлениеСвойствами.ЗначениеСвойства(ДанныеОбъектаИС.Ссылка, Свойство);
			Если ЗначениеСвойства = Неопределено Тогда
				// В объекте доп свойство не задано. Но в правилах ключевой реквизит может быть задан как пустой.
				ПравилоПодходит = (ДанныеПравила.Значение = Ложь) Или Не ЗначениеЗаполнено(ДанныеПравила.Значение);
				Если Не ПравилоПодходит Тогда
					Прервать;
				КонецЕсли;
				
			ИначеЕсли ЗначениеСвойства <> ДанныеПравила.Значение Тогда
				ПравилоПодходит = Ложь;
				Прервать;
				
			КонецЕсли;
			
		ИначеЕсли ДанныеОбъектаИС[ДанныеПравила.ИмяРеквизита] <> ДанныеПравила.Значение Тогда
			ПравилоПодходит = Ложь;
			Прервать;
			
		КонецЕсли;
		
		Приоритет = Приоритет + 1;
	КонецЦикла;
	
	Возврат ПравилоПодходит;
	
КонецФункции

#КонецОбласти