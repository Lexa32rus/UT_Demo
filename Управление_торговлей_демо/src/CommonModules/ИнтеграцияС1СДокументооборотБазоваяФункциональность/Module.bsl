////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотБазоваяФункциональность: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.БазоваяФункциональность

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
// 
// Параметры:
//  Обработчики - Соответствие:
//    * Ключ     - Строка - в формате "<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>".
//                   Символ '*'используется в конце имени параметра сеанса и обозначает,
//                   что один обработчик будет вызван для инициализации всех параметров сеанса
//                   с именем, начинающимся на слово НачалоИмениПараметраСеанса.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотВерсияСервиса",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотИмяПользователя",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотПароль",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотПарольИзвестен",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
	Обработчики.Вставить("ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС",
		"ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьПараметрыСеанса");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.РегламентныеЗадания

// Определяет зависимости регламентных заданий и их дополнительные свойства.
//
// Параметры:
//  Настройки - ТаблицаЗначений:
//    * РегламентноеЗадание - ОбъектМетаданныхРегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданныхФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ - Булево - если регламентное задание зависит более чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево
//                                              - Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - Неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево
//                                  - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - Неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево
//                                      - Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - Неопределено.
//    * ДоступноВМоделиСервиса - Булево
//                             - Неопределено - Ложь, если необходимо блокировать выполнение регламентного
//        задания (в т.ч. задания очереди) в информационной базе с включенным использованием разделителя.
//        Значение Неопределено трактуется как Истина.
//        По умолчанию - Неопределено.
//    * РаботаетСВнешнимиРесурсами - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.). Не следует устанавливать
//        значение Истина для регламентных заданий, не модифицирующих данные во внешних источниках.
//        Например, регламентное задание ЗагрузкаКурсовВалют. Регламентные задания, работающие с внешними ресурсами,
//        автоматически отключаются в копии информационной базы. По умолчанию - Ложь.
//    * Параметризуется - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ИнтеграцияС1СДокументооборотВыполнитьОбменДанными;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РегламентныеЗадания

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Вызывается для формирования списка команд создания на основании КомандыСозданияНаОсновании, однократно для при первой
// необходимости, а затем результат кэшируется с помощью модуля с повторным использованием возвращаемых значений.
// Здесь можно определить команды создания на основании, общие для большинства объектов конфигурации.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - сформированные команды для вывода в подменю:
//     
//     Общие настройки:
//       * Идентификатор - Строка - идентификатор команды.
//     
//     Настройки внешнего вида:
//       * Представление - Строка   - представление команды в форме.
//       * Важность      - Строка   - группа в подменю, в которой следует вывести эту команду.
//                                    Допустимо использовать: "Важное", "Обычное" и "СмТакже".
//       * Порядок       - Число    - порядок размещения команды в подменю. Используется для настройки под конкретное
//                                    рабочее место.
//       * Картинка      - Картинка - картинка команды.
//     
//     Настройки видимости и доступности:
//       * ТипПараметра - ОписаниеТипов - типы объектов, для которых предназначена эта команда.
//       * ВидимостьВФормах    - Строка - имена форм через запятую, в которых должна отображаться команда.
//                                        Используется когда состав команд отличается для различных форм.
//       * ФункциональныеОпции - Строка - имена функциональных опций через запятую, определяющих видимость команды.
//       * УсловияВидимости    - Массив - определяет видимость команды в зависимости от контекста.
//                                        Для регистрации условий следует использовать процедуру
//                                        ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды().
//                                        Условия объединяются по "И".
//       * ИзменяетВыбранныеОбъекты - Булево - определяет доступность команды в ситуации,
//                                        когда у пользователя нет прав на изменение объекта.
//                                        Если Истина, то в описанной выше ситуации кнопка будет недоступна.
//                                        Необязательный. Значение по умолчанию: Ложь.
//     
//     Настройки процесса выполнения:
//       * МножественныйВыбор - Булево
//                            - Неопределено - если Истина, то команда поддерживает множественный выбор.
//             В этом случае в параметре выполнения будет передан список ссылок.
//             Необязательный. Значение по умолчанию: Ложь.
//       * РежимЗаписи - Строка - действия, связанные с записью объекта, которые выполняются перед обработчиком команды.
//             "НеЗаписывать"          - Объект не записывается, а в параметрах обработчика вместо ссылок передается
//                                       вся форма. В этом режиме рекомендуется работать напрямую с формой,
//                                       которая передается в структуре 2 параметра обработчика команды.
//             "ЗаписыватьТолькоНовые" - Записывать новые объекты.
//             "Записывать"            - Записывать новые и модифицированные объекты.
//             "Проводить"             - Проводить документы.
//             Перед записью и проведением у пользователя запрашивается подтверждение.
//             Необязательный. Значение по умолчанию: "Записывать".
//       * ТребуетсяРаботаСФайлами - Булево - если Истина, то в веб-клиенте предлагается
//             установить расширение работы с файлами.
//             Необязательный. Значение по умолчанию: Ложь.
//     
//     Настройки обработчика:
//       * Менеджер - Строка - объект, отвечающий за выполнение команды.
//       * ИмяФормы - Строка - имя формы, которую требуется получить для выполнения команды.
//             Если Обработчик не указан, то у формы вызывается метод "Открыть".
//       * ПараметрыФормы - Неопределено
//                        - ФиксированнаяСтруктура - необязательный. Параметры формы, указанной в ИмяФормы.
//       * Обработчик - Строка - описание процедуры, обрабатывающей основное действие команды.
//             Формат "<ИмяОбщегоМодуля>.<ИмяПроцедуры>" используется когда процедура размещена в общем модуле.
//             Формат "<ИмяПроцедуры>" используется в следующих случаях:
//               1) если ИмяФормы заполнено то в модуле указанной формы ожидается клиентская процедура.
//               2) если ИмяФормы не заполнено то в модуле менеджера этого объекта ожидается серверная процедура.
//       * ДополнительныеПараметры - ФиксированнаяСтруктура - необязательный. Параметры обработчика, указанного в Обработчик.
//   
//   Параметры - Структура - сведения о контексте исполнения:
//       * ИмяФормы - Строка - полное имя формы.
//
//   СтандартнаяОбработка - Булево - если установить в Ложь, то событие "ДобавитьКомандыСозданияНаОсновании" менеджера
//                                   объекта не будет вызвано.
//
Процедура ПередДобавлениемКомандСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры, СтандартнаяОбработка) Экспорт
	
	Для Каждого ТипИсточника Из Параметры.ТипыИсточников Цикл
		Если Не Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый.Тип.СодержитТип(
				Параметры.ТипыИсточников[0]) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Порядок = 99;
	
	Если ЕстьПодсистемаДО2() Тогда
		ДобавитьКомандуСозданияНаОсновании(
			КомандыСозданияНаОсновании,
			Метаданные.ОбщиеКоманды["ИнтеграцияС1СДокументооборотСоздатьПисьмо"],
			"ИнтеграцияС1СДокументооборотКлиент.ОбработкаКомандыИсходящееПисьмо",
			Параметры.ВидВРег,
			"ИспользоватьЭлектроннуюПочту1СДокументооборота",
			Порядок);
		
		ДобавитьКомандуСозданияНаОсновании(
			КомандыСозданияНаОсновании,
			Метаданные.ОбщиеКоманды["ИнтеграцияС1СДокументооборотСоздатьБизнесПроцесс"],
			"ИнтеграцияС1СДокументооборотКлиент.ОбработкаКомандыСоздатьБизнесПроцесс",
			Параметры.ВидВРег,
			"ИспользоватьПроцессыИЗадачи1СДокументооборота",
			Порядок);
	КонецЕсли;
	
	Если ЕстьПодсистемаДО3() Тогда
		ДобавитьКомандуСозданияНаОсновании(
			КомандыСозданияНаОсновании,
			Метаданные.ОбщиеКоманды["ИнтеграцияС1СДокументооборотНачатьОбработку"],
			"ИнтеграцияС1СДокументооборот3Клиент.ОбработкаКомандыНачатьОбработку",
			Параметры.ВидВРег,
			"ИспользоватьОбработкуОбъектов1СДокументооборота",
			Порядок);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Получает версию сервиса из параметров сеанса, возможно, инициируя ее получение в фоновом задании.
//
// Параметры:
//   Таймаут - Число - неявно возвращаемое значение, установленный для прокси таймаут в секундах,
//     в течение которого клиент может ожидать успешного подключения или ответа о недоступности сервиса.
//
// Возвращаемое значение:
//   Строка - версия сервиса.
//
Функция ВерсияСервиса(Таймаут = Неопределено) Экспорт
	
	Таймаут = ТаймаутСервиса();
	
	ВерсияСервиса = ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса;
	Если ЭтоАдресВременногоХранилища(ВерсияСервиса) Тогда
		ВерсияСервиса = ПолучитьИзВременногоХранилища(ВерсияСервиса);
	КонецЕсли;
	
	Возврат ВерсияСервиса;
	
КонецФункции

// Выполняет запрос к сервису, превращая сообщения об ошибках в вид, понятный пользователю.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Запрос - ОбъектXDTO - выполняемый запрос.
//
// Возвращаемое значение:
//   ОбъектXDTO - результат выполнения запроса.
//
Функция ВыполнитьЗапрос(Прокси, Запрос) Экспорт
	
	Попытка
		Результат = Прокси.execute(Запрос);
		Возврат Результат;
	Исключение
		Инфо = ИнформацияОбОшибке();
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(Инфо);
		// По известным видам ошибок изменим текст сообщения.
		Если Найти(КраткоеПредставлениеОшибки, НСтр("ru = 'Аутентификация пользователя не выполнена'")) <> 0 Тогда
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "0.0.0.0";
			КраткоеПредставлениеОшибки = НСтр("ru = 'Неверное имя пользователя или пароль. Проверьте имя
				|и пароль в настройках авторизации в 1С:Документообороте.'");
		// По неизвестным видам ошибок превратим HTML в простой текст.
		ИначеЕсли Найти(КраткоеПредставлениеОшибки, "<html>") <> 0 Тогда
			HTMLДокумент = Новый ФорматированныйДокумент;
			HTMLДокумент.УстановитьHTML(КраткоеПредставлениеОшибки, Новый Структура);
			КраткоеПредставлениеОшибки = HTMLДокумент.ПолучитьТекст();
		КонецЕсли;
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(Инфо));
		ВызватьИсключение КраткоеПредставлениеОшибки;
	КонецПопытки;
	
КонецФункции

// Добавляет строку инвертируемых констант в таблицу зависимости констант.
//
// Параметры:
//   ТаблицаКонстант - ТаблицаЗначений - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗависимостиКонстант().
//   ИмяРодительскойКонстанты - Строка - имя родительской константы как оно задано в конфигураторе.
//   ИмяПодчиненнойКонстанты - Строка - имя подчиненной константы как оно задано в конфигураторе.
//
Процедура ДобавитьСтрокуИнвертируемыхКонстант(ТаблицаКонстант, ИмяРодительскойКонстанты,
		ИмяПодчиненнойКонстанты = "") Экспорт
	
	Если ИмяПодчиненнойКонстанты = "" Тогда
		ИмяПодчиненнойКонстанты = "Не" + ИмяРодительскойКонстанты;
	КонецЕсли;
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		ИмяРодительскойКонстанты,
		Ложь,
		ИмяПодчиненнойКонстанты,
		Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(
		ТаблицаКонстант,
		ИмяРодительскойКонстанты,
		Истина,
		ИмяПодчиненнойКонстанты,
		Ложь);
	
КонецПроцедуры

// Добавляет строку в таблицу соответствия типов.
//
// Параметры:
//   Таблица - ТаблицаЗначений - таблица соответствия типов.
//   ИмяТипаXDTO - Строка - имя типа XDTO
//   ТипОбъектаИС - Тип - тип объекта ИС.
//
Процедура ДобавитьСтрокуСоответствияТипов(Таблица, ИмяТипаXDTO, ТипОбъектаИС) Экспорт
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ИмяТипаXDTO = ИмяТипаXDTO;
	НоваяСтрока.ТипОбъектаИС = ТипОбъектаИС;
	
КонецПроцедуры

// Добавляет строку в таблицу зависимости констант.
//
// Параметры:
//   ТаблицаКонстант - ТаблицаЗначений - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗависимостиКонстант()
//   ИмяРодительскойКонстанты - Строка - имя родительской константы как оно задано в конфигураторе
//   ЗначениеРодительскойКонстанты - Произвольный - значение родительской константы
//   ИмяПодчиненнойКонстанты - Строка - имя подчиненной константы как оно задано в конфигураторе
//   ЗначениеПодчиненнойКонстанты - Произвольный - значение подчиненной константы
//
Процедура ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаКонстант, ИмяРодительскойКонстанты,
		ЗначениеРодительскойКонстанты, ИмяПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты) Экспорт
	
	НоваяСтрока = ТаблицаКонстант.Добавить();
	НоваяСтрока.ИмяРодительскойКонстанты = ИмяРодительскойКонстанты;
	НоваяСтрока.ЗначениеРодительскойКонстанты = ЗначениеРодительскойКонстанты;
	НоваяСтрока.ИмяПодчиненнойКонстанты = ИмяПодчиненнойКонстанты;
	НоваяСтрока.ЗначениеПодчиненнойКонстанты = ЗначениеПодчиненнойКонстанты;
	
КонецПроцедуры

// Получает доступность функционала версии web-сервиса Документооборота.
//
// Параметры:
//   ВерсияСервиса - Строка - версия web-сервиса Документооборота, содержащая требуемый функционал.
//   Оптимистично - Булево - признак необходимости вернуть Истина, если версия сервиса пока неизвестна.
//
// Возвращаемое значение:
//   Булево - Истина, если web-сервис Документооборота указанной версии доступен.
//
Функция ДоступенФункционалВерсииСервиса(ВерсияСервиса = "", Оптимистично = Ложь) Экспорт
	
	Если Оптимистично И Не ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекущаяВерсия = ВерсияСервиса();
	Если ТекущаяВерсия = "0.0.0.0" Тогда // ошибка подключения
		Возврат Ложь;
	ИначеЕсли ПустаяСтрока(ТекущаяВерсия) Тогда // в процессе получения
		Если Оптимистично Тогда 
			Возврат Истина; // пока не знаем, но, скорее всего, доступна
		Иначе
			Возврат Ложь; // пока не знаем, но, скорее всего, недоступна
		КонецЕсли;
	ИначеЕсли ПустаяСтрока(ВерсияСервиса) Тогда // нужна хоть какая-нибудь
		Возврат Истина;
	КонецЕсли;
	
	ОписаниеТекущейВерсии = СтрРазделить(ТекущаяВерсия, ".");
	Если ОписаниеТекущейВерсии.Количество() <> 5 Тогда
		// Старые версии не сообщают редакцию, а для этих версий она важна.
		// Оптимистично предположим КОРП.
		Если ТекущаяВерсия = "1.2.7.3" Или ТекущаяВерсия = "1.2.8.1" Тогда
			ОписаниеТекущейВерсии.Добавить("CORP");
		Иначе
			ОписаниеТекущейВерсии.Добавить("PROF");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВерсияНеМеньше(ОписаниеТекущейВерсии, ВерсияСервиса);
	
КонецФункции

// Определяет, встроены ли в конфигурации модули БИД, предназначенные для интеграции с 1С:Документооборотом редакции 2.
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьПодсистемаДО2() Экспорт
	
	Возврат ОбщегоНазначения.ПодсистемаСуществует(
		"ИнтеграцияС1СДокументооборотом.ИнтеграцияС1СДокументооборотомРедакции2");
	
КонецФункции

// Определяет, встроены ли в конфигурации модули БИД, предназначенные для интеграции с 1С:Документооборотом редакции 3.
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьПодсистемаДО3() Экспорт
	
	Возврат ОбщегоНазначения.ПодсистемаСуществует(
		"ИнтеграцияС1СДокументооборотом.ИнтеграцияС1СДокументооборотомРедакции3");
	
КонецФункции

// Проверяет значение на объектный тип, содержащий уникальный идентификатор.
//
// Параметры:
//   Значение - Произвольный - проверяемое значение.
//
// Возвращаемое значение:
//   Булево - Признак наличия у объекта уникального идентификатора.
//
Функция ЕстьУникальныйИдентификатор(Значение) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тип = ТипЗнч(Значение);
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
		Или Документы.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		Или Задачи.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

// Возвращает таблицу, описывающую зависимость констант в конфигурации.
// Каждая строка таблицы означает:
// для родительской константы со значением Х допустимо только значение Y для подчиненной константы.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * ИмяРодительскойКонстанты - Строка
//     * ИмяПодчиненнойКонстанты - Строка
//     * ЗначениеРодительскойКонстанты - Произвольный
//     * ЗначениеПодчиненнойКонстанты - Произвольный
//
Функция ЗависимостиКонстант() Экспорт
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ИмяРодительскойКонстанты", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяПодчиненнойКонстанты",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗначениеРодительскойКонстанты");
	Результат.Колонки.Добавить("ЗначениеПодчиненнойКонстанты");
	
	Результат.Индексы.Добавить("ИмяРодительскойКонстанты");
	Результат.Индексы.Добавить("ИмяПодчиненнойКонстанты");
	
	Если ЕстьПодсистемаДО2() И ЕстьПодсистемаДО3() Тогда
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот3",
			Истина,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь);
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Истина,
			"ИспользоватьИнтеграциюС1СДокументооборот3",
			Ложь);
	КонецЕсли;
	
	Если ЕстьПодсистемаДО2() Тогда
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьЕжедневныеОтчеты1СДокументооборота",
			Ложь);
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьЭлектроннуюПочту1СДокументооборота",
			Ложь);
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьФайловоеХранилище1СДокументооборота",
			Ложь);
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьПроцессыИЗадачи1СДокументооборота",
			Ложь);
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьСвязанныеДокументы1СДокументооборота",
			Ложь);
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьПрисоединенныеФайлы1СДокументооборота",
			Ложь);
		
		// Согласование через 1С:Документооборот
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот",
			Ложь,
			"ИспользоватьСогласованиеЧерез1СДокументооборот",
			Ложь);
		Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
			ДобавитьСтрокуТаблицыЗависимостиКонстант(
				Результат,
				"ИспользоватьПроцессыИЗадачи1СДокументооборота",
				Ложь,
				"ИспользоватьСогласованиеЧерез1СДокументооборот",
				Ложь);
			ДобавитьСтрокуТаблицыЗависимостиКонстант(
				Результат,
				"ИспользоватьСогласованиеЧерез1СДокументооборот",
				Истина,
				"ИспользоватьПроцессыИЗадачи1СДокументооборота",
				Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьПодсистемаДО3() Тогда
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот3",
			Ложь,
			"ИспользоватьОбработкуОбъектов1СДокументооборота",
			Ложь);
		
		// Согласование через 1С:Документооборот
		ДобавитьСтрокуТаблицыЗависимостиКонстант(
			Результат,
			"ИспользоватьИнтеграциюС1СДокументооборот3",
			Ложь,
			"ИспользоватьСогласованиеЧерез1СДокументооборот",
			Ложь);
		Если Настройки.ИспользоватьИнтеграциюДО3 Тогда
			ДобавитьСтрокуТаблицыЗависимостиКонстант(
				Результат,
				"ИспользоватьОбработкуОбъектов1СДокументооборота",
				Ложь,
				"ИспользоватьСогласованиеЧерез1СДокументооборот",
				Ложь);
			ДобавитьСтрокуТаблицыЗависимостиКонстант(
				Результат,
				"ИспользоватьСогласованиеЧерез1СДокументооборот",
				Истина,
				"ИспользоватьОбработкуОбъектов1СДокументооборота",
				Истина);
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриПолученииТаблицыЗависимостиКонстант(Результат);
	
	Возврат Результат;
	
КонецФункции

// Записывает изменения объекта в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объект - ОбъектXDTO - XDTO объект с сохраняемыми данными.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMUpdateResponse.
//
Функция ЗаписатьОбъект(Прокси, Объект) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMUpdateRequest");
	СписокОбъектов = Запрос.objects; // СписокXDTO
	
	СписокОбъектов.Добавить(Объект);
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Записывает изменения объектов в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объекты - Массив из ОбъектXDTO - массив XDTO объектов с сохраняемыми данными.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMUpdateResponse.
//
Функция ЗаписатьОбъекты(Прокси, Объекты) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMUpdateRequest");
	СписокОбъектов = Запрос.objects; // СписокXDTO
	
	Для Каждого Объект Из Объекты Цикл
		СписокОбъектов.Добавить(Объект);
	КонецЦикла;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

// Заполняет свойства объекта-приемника по объекту-источнику.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Приемник - ОбъектXDTO - заполняемый объект.
//   Источник - ОбъектXDTO - источник данных заполнения.
//
Процедура ЗаполнитьЗначенияСвойствXDTO(Прокси, Приемник, Источник) Экспорт
	
	Для Каждого Свойство Из Источник.Свойства() Цикл
		
		СвойствоПриемника = Приемник.Свойства().Получить(Свойство.Имя);
		Если СвойствоПриемника <> Неопределено
				И (Источник.Установлено(Свойство.Имя) Или СвойствоПриемника.НижняяГраница <> 0) Тогда
			
			Если ТипЗнч(Источник[Свойство.Имя]) = Тип("ОбъектXDTO") Тогда
				ОбъектноеСвойство = СоздатьОбъект(Прокси, Свойство.Тип.Имя);
				ЗаполнитьЗначенияСвойствXDTO(Прокси, ОбъектноеСвойство, Источник[Свойство.Имя]);
				Приемник[Свойство.Имя] = ОбъектноеСвойство;
				
			ИначеЕсли ТипЗнч(Источник[Свойство.Имя]) = Тип("СписокXDTO") Тогда
				СписокПриемника = Приемник[Свойство.Имя]; // СписокXDTO
				Для Каждого Элемент Из Источник[Свойство.Имя] Цикл
					НовыйЭлемент = СоздатьОбъект(Прокси,Свойство.Тип.Имя);
					ЗаполнитьЗначенияСвойствXDTO(Прокси, НовыйЭлемент, Элемент);  
					СписокПриемника.Добавить(НовыйЭлемент);
				КонецЦикла;
				
			Иначе
				Приемник[Свойство.Имя] = Источник[Свойство.Имя];
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет указанный реквизит формы по свойству объекта XDTO.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, реквизит которой заполняется.
//   ИмяРеквизитаФормы - Строка - имя заполняемого реквизита.
//   ОбъектXDTO - ОбъектXDTO - источник данных заполнения.
//   ИмяСвойстваXDTO - Строка - имя свойства-источника данных.
//
Процедура ЗаполнитьРеквизитФормыИзXDTO(Форма, ИмяРеквизитаФормы, ОбъектXDTO, ИмяСвойстваXDTO) Экспорт
	
	Если ОбъектXDTO.Установлено(ИмяСвойстваXDTO) Тогда
		ЗначениеСвойстваXDTO = ОбъектXDTO[ИмяСвойстваXDTO];
		Если ТипЗнч(ЗначениеСвойстваXDTO) = Тип("ОбъектXDTO") Тогда
			Форма[ИмяРеквизитаФормы + "Тип"] = ЗначениеСвойстваXDTO.objectID.type;
			Форма[ИмяРеквизитаФормы + "ID"] = ЗначениеСвойстваXDTO.objectID.ID;
			Форма[ИмяРеквизитаФормы] = ЗначениеСвойстваXDTO.name;
		Иначе
			Форма[ИмяРеквизитаФормы] = ЗначениеСвойстваXDTO;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты объекта XDTO по объекту ИС.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект.
//   ОбъектИС - ЛюбаяСсылка - источник заполнения.
//
Процедура ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, ОбъектИС) Экспорт
	
	Если ТипЗнч(ОбъектXDTO) = Тип("Строка") Тогда
		// Перечисления имеют атомарный строковый тип
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ЗаполнитьРеквизитыИзПотребителя(
			Прокси,
			ОбъектXDTO,
			ОбъектИС);
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданных = ОбъектИС.Метаданные();
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	
	ЕстьНаименование = Ложь;
	Если Найти(ПолноеИмя, "Справочник.") > 0 Тогда
		Для Каждого Реквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			Если Реквизит.Имя = "Наименование" Тогда
				ЕстьНаименование = Истина;
				Прервать
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьНаименование Тогда
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектИС, "Наименование");
	Иначе
		Наименование = Строка(ОбъектИС);
	КонецЕсли;
	
	ОбъектXDTO.name = Наименование;
	ОбъектXDTO.objectID = СоздатьObjectID(Прокси, "", "");
	
	ВнешнийОбъект = СоздатьОбъект(Прокси, "ExternalObject");
	
	Если ОбъектИС.Пустая() Тогда
		ВнешнийОбъект.ID = "";
		ВнешнийОбъект.type = ПолноеИмя;
		ВнешнийОбъект.name = "";
		
	ИначеЕсли Найти(ПолноеИмя, "Перечисление.") > 0 Тогда
		ВнешнийОбъект.ID = ОбщегоНазначения.ИмяЗначенияПеречисления(ОбъектИС);
		ВнешнийОбъект.type = ПолноеИмя;
		ВнешнийОбъект.name = Наименование;
		
	Иначе
		ВнешнийОбъект.ID = Строка(ОбъектИС.УникальныйИдентификатор());
		ВнешнийОбъект.type = ПолноеИмя;
		ВнешнийОбъект.name = Наименование;
		
	КонецЕсли;
	
	ОбъектXDTO.externalObject = ВнешнийОбъект;
	
	Если ПроверитьТип(Прокси, ОбъектXDTO, "DMCurrency")
			И ТипЗнч(ОбъектИС) = Тип("СправочникСсылка.Валюты") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектИС, "Код, НаименованиеПолное");
		ОбъектXDTO.code = Реквизиты.Код;
		ОбъектXDTO.fullName = Реквизиты.НаименованиеПолное;
		
	ИначеЕсли ПроверитьТип(Прокси, ОбъектXDTO, "DMBank")
			И ТипЗнч(ОбъектИС) = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектИС, "Код");
		ОбъектXDTO.BIC = Реквизиты.Код;
		
	ИначеЕсли ПроверитьТип(Прокси, ОбъектXDTO, "DMUser")
			И ТипЗнч(ОбъектИС) = Тип("СправочникСсылка.Пользователи") Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектИС, "ФизическоеЛицо");
		Если ЗначениеЗаполнено(Реквизиты.ФизическоеЛицо) Тогда
			ОбъектXDTO.privatePerson = СоздатьОбъект(Прокси, "DMPrivatePerson");
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизиты.ФизическоеЛицо)) Тогда
				ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO.privatePerson, Реквизиты.ФизическоеЛицо);
			Иначе
				ОбъектXDTO.privatePerson.name = Строка(Реквизиты.ФизическоеЛицо);
				ОбъектXDTO.privatePerson.objectID = СоздатьObjectID(Прокси, "", "");
				ОбъектXDTO.privatePerson.externalObject = СоздатьОбъект(Прокси, "ExternalObject");
				ОбъектXDTO.privatePerson.externalObject.ID = "";
				ОбъектXDTO.privatePerson.externalObject.type = Строка(ТипЗнч(Реквизиты.ФизическоеЛицо));
				ОбъектXDTO.privatePerson.externalObject.name = Строка(Реквизиты.ФизическоеЛицо);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПроверитьТип(Прокси, ОбъектXDTO, "DMEmployee")
			И ТипЗнч(ОбъектИС) = Тип("СправочникСсылка.Пользователи") Тогда
		ОбъектXDTO.user = СоздатьОбъект(Прокси, "DMUser");
		ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO.user, ОбъектИС);
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектИС, "ФизическоеЛицо, Подразделение");
		Если ЗначениеЗаполнено(Реквизиты.ФизическоеЛицо) Тогда
			ОбъектXDTO.privatePerson = СоздатьОбъект(Прокси, "DMPrivatePerson");
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизиты.ФизическоеЛицо)) Тогда
				ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO.privatePerson, Реквизиты.ФизическоеЛицо);
			Иначе
				ОбъектXDTO.privatePerson.name = Строка(Реквизиты.ФизическоеЛицо);
				ОбъектXDTO.privatePerson.objectID = СоздатьObjectID(Прокси, "", "");
				ОбъектXDTO.privatePerson.externalObject = СоздатьОбъект(Прокси, "ExternalObject");
				ОбъектXDTO.privatePerson.externalObject.ID = "";
				ОбъектXDTO.privatePerson.externalObject.type = Строка(ТипЗнч(Реквизиты.ФизическоеЛицо));
				ОбъектXDTO.privatePerson.externalObject.name = Строка(Реквизиты.ФизическоеЛицо);
			КонецЕсли;
			ОбъектXDTO.name = ОбъектXDTO.privatePerson.name;
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизиты.Подразделение) Тогда
			ОбъектXDTO.subdivision = СоздатьОбъект(Прокси, "DMSubdivision");
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Реквизиты.Подразделение)) Тогда
				ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO.subdivision, Реквизиты.Подразделение);
			Иначе
				ОбъектXDTO.subdivision.name = Строка(Реквизиты.Подразделение);
				ОбъектXDTO.subdivision.objectID = СоздатьObjectID(Прокси, "", "");
				ОбъектXDTO.subdivision.externalObject = СоздатьОбъект(Прокси, "ExternalObject");
				ОбъектXDTO.subdivision.externalObject.ID = "";
				ОбъектXDTO.subdivision.externalObject.type = Строка(ТипЗнч(Реквизиты.Подразделение));
				ОбъектXDTO.subdivision.externalObject.name = Строка(Реквизиты.Подразделение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ЗаполнитьРеквизитыИзПотребителя(
		Прокси,
		ОбъектXDTO,
		ОбъектИС);
	
КонецПроцедуры

// Возвращает значение реквизита объекта ИС по значению реквизита объекта ДО.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, соответствие которому нужно найти.
//   ТипРеквизита - Тип - тип заполняемого реквизита объекта ИС.
//   ИмяРеквизита - Строка - имя заполняемого реквизита ИС.
//   ТипОбъекта - Тип - тип заполняемого объекта ИС.
//   Объект - Произвольный - заполняемый объект ИС.
//   ЭтоДополнительноеСвойство - Булево - истина, если переданный объект является доп. свойством.
//   Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - свойство-владелец.
//   ПараметрыВыбора - Соответствие - параметры выбора, где ключ - имя параметра вида "Отбор.Владелец",
//     значение - значение параметра (отбора).
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на найденный или созданный объект.
//
Функция ЗначениеРеквизитаПоОбъектуXDTO(ОбъектXDTO, ТипРеквизита, ИмяРеквизита = Неопределено, ТипОбъекта = Неопределено,
		Объект = Неопределено, ЭтоДополнительноеСвойство = Ложь, Свойство = Неопределено,
		ПараметрыВыбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(
		Результат,
		ОбъектXDTO,
		ТипРеквизита,
		ИмяРеквизита,
		ТипОбъекта,
		Объект,
		ЭтоДополнительноеСвойство,
		Свойство,
		ПараметрыВыбора);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипРеквизита = Тип("Строка") Тогда
		Возврат ОбъектXDTO.name;
		
	ИначеЕсли ТипРеквизита = Тип("Число") Или ТипРеквизита = Тип("Дата") Или ТипРеквизита = Тип("Булево") Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипРеквизита);
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		Возврат ОписаниеТипов.ПривестиЗначение(ОбъектXDTO.name);
		
	КонецЕсли;
	
	Если ОбъектXDTO.externalObject <> Неопределено Тогда
		Результат = СсылкаИзUUID(ОбъектXDTO.externalObject.type, ОбъектXDTO.externalObject.ID);
	КонецЕсли;
	Если Результат = Неопределено Тогда
		Результат = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.
			СсылкаНаОбъектПоДаннымДокументооборота(ОбъектXDTO.objectID.ID, ОбъектXDTO.objectID.type, ТипРеквизита);
	КонецЕсли;
	
	Если Результат = Неопределено
			И ЗначениеЗаполнено(ОбъектXDTO.objectID.ID)
			И СтрДлина(ОбъектXDTO.objectID.ID) = 36
			И ЗначениеЗаполнено(ОбъектXDTO.objectID.type)
			И ЗначениеЗаполнено(ОбъектXDTO.name) Тогда
		
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипРеквизита);
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
		
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
			
			// Возможно, соответствия созданы синхронизацией данных и унаследовали идентификаторы.
			УникальныйИдентификатор = Новый УникальныйИдентификатор(ОбъектXDTO.objectID.ID);
			ВидСправочника = МетаданныеОбъекта.Имя;
			СсылкаПоИдентификатору = Справочники[ВидСправочника].ПолучитьСсылку(УникальныйИдентификатор);
			
			// Возможно исключение RLS.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	Ссылка
				|ИЗ
				|	Справочник." + ВидСправочника + "
				|ГДЕ
				|	Ссылка = &СсылкаПоИдентификатору");
			Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
			
			Ошибка = Неопределено;
			Попытка
				Выборка = Запрос.Выполнить().Выбрать();
			Исключение
				Ошибка = ИнформацияОбОшибке();
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(Ошибка);
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,,
					СсылкаПоИдентификатору,
					ПредставлениеОшибки);
			КонецПопытки;
			
			Если Ошибка <> Неопределено Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					Результат = Строка(Выборка.Ссылка);
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Недостаточно прав для доступа к этому объекту (%1).
						|Обратитесь к администратору.'"),
						Результат);
					ВызватьИсключение ТекстСообщения; // Подробные сведения - в журнале регистрации.
				КонецЕсли;
				
			КонецЕсли;
			
			Если Выборка.Следующий() Тогда // объект найден
				
				Результат = Выборка.Ссылка;
				
			Иначе // продолжим поиск по другим реквизитам
				
				Если ЭтоДополнительноеСвойство
					И (ТипРеквизита = Тип("СправочникСсылка.ЗначенияСвойствОбъектов")
						Или ТипРеквизита = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия")) Тогда
					Владелец = Свойство;
				ИначеЕсли ПараметрыВыбора <> Неопределено Тогда
					Владелец = ПараметрыВыбора["Отбор.Владелец"];
				Иначе
					Владелец = Неопределено;
				КонецЕсли;
				
				// Поиск по наименованию и другим реквизитам нельзя выполнять, если не определен
				// владелец для справочника со владельцами.
				Если МетаданныеОбъекта.Владельцы.Количество() = 0 Или ЗначениеЗаполнено(Владелец) Тогда
					
					Результат = МенеджерОбъекта.НайтиПоНаименованию(ОбъектXDTO.name, Истина,, Владелец);
					
					Если Не ЗначениеЗаполнено(Результат) Тогда
						Если ПравоДоступа("Добавление", МетаданныеОбъекта) Тогда
							Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
							НовыйОбъект = Менеджер.СоздатьЭлемент(); // ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
							НовыйОбъект.Наименование = ОбъектXDTO.name;
							НовыйОбъект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
							Если ЗначениеЗаполнено(Владелец) Тогда
								НовыйОбъект.Владелец = Владелец;
							КонецЕсли;
							ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриСозданииПоСсылке(
								НовыйОбъект,
								ОбъектXDTO,
								Объект);
							НовыйОбъект.Записать();
							Результат = НовыйОбъект.Ссылка;
							РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.ДобавитьСвязь(
								ОбъектXDTO.objectID.ID,
								ОбъектXDTO.objectID.type,
								Результат);
						Иначе
							ТекстСообщения = СтрШаблон(
								НСтр("ru = 'Недостаточно прав для создания новых элементов (%1).
								|Обратитесь к администратору.'"),
								МетаданныеОбъекта.Представление());
							ВызватьИсключение ТекстСообщения; // Подробные сведения - в журнале регистрации.
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначения.ЭтоПеречисление(МетаданныеОбъекта) Тогда
			МетаданныеЗначения = МетаданныеОбъекта.ЗначенияПеречисления.
				Найти(ОбъектXDTO.objectID.ID); // ОбъектМетаданныхЗначениеПеречисления
			Если МетаданныеЗначения = Неопределено Тогда
				Для Каждого ЗначениеПеречисления Из МетаданныеОбъекта.ЗначенияПеречисления Цикл
					Если ЗначениеПеречисления.Синоним = ОбъектXDTO.name Тогда
						МетаданныеЗначения = ЗначениеПеречисления;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если МетаданныеЗначения <> Неопределено Тогда
				Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
				Результат = Менеджер[МетаданныеЗначения.Имя];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает локализованное имя события журнала регистрации для интеграции с ДО.
//
// Параметры:
//   СобытиеВторогоУровня - Строка - имя события, добавляемое через точку к имени события по умолчанию.
//
// Возвращаемое значение:
//   Строка - Интеграция с 1С:Документооборотом
//        или Интеграция с 1С:Документооборотом.<ИмяСобытияВторогоУровня>.
//
Функция ИмяСобытияЖурналаРегистрации(СобытиеВторогоУровня = "") Экспорт
	
	Если СобытиеВторогоУровня = "" Тогда
		Возврат НСтр("ru = 'Интеграция с 1С:Документооборотом'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Возврат СтрШаблон("%1.%2",
			НСтр("ru = 'Интеграция с 1С:Документооборотом'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			СобытиеВторогоУровня);
	КонецЕсли;
	
КонецФункции

// Возвращает индекс картинки элемента справочника.
//
// Возвращаемое значение:
//   Число - индекс картинки.
//
Функция ИндексКартинкиЭлементаСправочника() Экспорт
	
	ИндексКартинки = 3;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииИндексаКартинкиЭлементаСправочника(ИндексКартинки);
	
	Возврат ИндексКартинки;
	
КонецФункции

// Назначает новому документу идентификатор основания, если это возможно.
//
// Параметры:
//   Источник - ДокументОбъект - записываемый документ.
//   Отказ - Булево - признак необходимости отказаться от записи.
//   РежимЗаписи - РежимЗаписиДокумента - режим записи документа.
//   РежимПроведения - РежимПроведенияДокумента - режим проведения документа.
//
Процедура ИнтеграцияС1СДокументооборотПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСсылкуНовогоПередЗаписьюОбъекта(Источник);
	
КонецПроцедуры

// Назначает новому элементу справочника идентификатор основания, если это возможно.
//
// Параметры:
//   Источник - СправочникОбъект - записываемый справочник.
//   Отказ - Булево - признак необходимости отказаться от записи.
//
Процедура ИнтеграцияС1СДокументооборотПередЗаписьюСправочника(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСсылкуНовогоПередЗаписьюОбъекта(Источник);
	
КонецПроцедуры

// Получает значения, доступные для выбора по запросу DMGetObjectListRequest.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ТипОбъектаВыбораXDTO - Строка - имя типа объекта, значения которого требуется получить.
//   УсловияОтбораОбъектов - ОбъектXDTO - объект XDTO типа DMObjectListQuery.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetObjectListResponse.
//
Функция НайтиСписокОбъектов(Прокси, ТипОбъектаВыбораXDTO, УсловияОтбораОбъектов = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = ТипОбъектаВыбораXDTO;
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО3
			И (ТипОбъектаВыбораXDTO = "DMDocument"
				Или ТипОбъектаВыбораXDTO = "DMCorrespondent"
				Или ТипОбъектаВыбораXDTO = "DMMeeting") Тогда
		РеквизитыОбъектаДО = Справочники["ПравилаИнтеграцииС1СДокументооборотом3"].ПолучитьРеквизитыОбъектаДО(
			ТипОбъектаВыбораXDTO,,,
			Истина);
		Если УсловияОтбораОбъектов = Неопределено Тогда
			УсловияОтбораОбъектов = СоздатьОбъект(Прокси, "DMObjectListQuery");
		КонецЕсли;
		Для Каждого РеквизитОбъектаДО Из РеквизитыОбъектаДО Цикл
			Если РеквизитОбъектаДО.ИмяРеквизитаВДО = "" Тогда
				Продолжить;
			КонецЕсли;
			Соответствие = СоздатьОбъект(Прокси, "DMObjectListColumnConformity");
			Соответствие.xdtoPropertyName = РеквизитОбъектаДО.Имя;
			Соответствие.dmPropertyName = РеквизитОбъектаДО.ИмяРеквизитаВДО;
			УсловияОтбораОбъектов.columnConformity.Добавить(Соответствие);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.query = УсловияОтбораОбъектов;
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Получает объект XDTO исходящего письма, заполненный по умолчанию.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Предмет - Структура - описание предмета (ID, type).
//
// Возвращаемое значение:
//   ОбъектXDTO - новое исходящее письмо.
//
Функция НовоеИсходящееПисьмо(Прокси, Предмет = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMGetNewEMailRequest");
	
	Запрос.type = "DMOutgoingEMail";
	Если Предмет <> Неопределено Тогда
		Запрос.targetID = СоздатьОбъект(Прокси, "DMObjectID");
		Запрос.targetID.ID = Предмет.ID;
		Запрос.targetID.type = Предмет.type;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Если ПроверитьТип(Прокси, Ответ, "DMGetNewEMailResponse") Тогда
		Возврат Ответ.object;
	Иначе
		ВызватьИсключение НСтр("ru = 'Эта версия 1С:Документооборота не поддерживает создание исходящих писем'");
	КонецЕсли;
	
КонецФункции

// Обработчик подписки на событие ОбработкаЗаполнения для документов.
//
// Параметры:
//   Источник - ОпределяемыйТип.ИнтеграцияС1СДокументооборотДокументыОбъектыПереопределяемый
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияДокументы(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Объект1СДокументооборота") Тогда
		
		// Заполним реквизиты шапки.
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения.ЗначенияРеквизитов);
		
		// Заполним табличные части.
		Для Каждого ЗначениеРеквизита Из ДанныеЗаполнения.ЗначенияРеквизитов Цикл
			Если ТипЗнч(ЗначениеРеквизита.Значение) = Тип("Массив") Тогда
				Источник[ЗначениеРеквизита.Ключ].Очистить();
				Для Каждого Строка Из ЗначениеРеквизита.Значение Цикл
					ЗаполнитьЗначенияСвойств(Источник[ЗначениеРеквизита.Ключ].Добавить(), Строка);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним дополнительные реквизиты.
		Если ДанныеЗаполнения.ДополнительныеРеквизиты.Количество() > 0
				И Источник.Метаданные().ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено Тогда
			ДополнительныеРеквизитыДокумента = Источник.ДополнительныеРеквизиты; // ТабличнаяЧасть
			Для Каждого Строка Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
				НоваяСтрока = ДополнительныеРеквизитыДокумента.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие ОбработкаЗаполнения для справочников.
//
// Параметры:
//   Источник - ОпределяемыйТип.ИнтеграцияС1СДокументооборотСправочникиОбъектыПереопределяемый
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения.
//   ТекстЗаполнения - Строка
//                   - Неопределено
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполненияСправочники(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Объект1СДокументооборота") Тогда
		
		// Заполним реквизиты шапки.
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения.ЗначенияРеквизитов);
		
		// Заполним табличные части.
		Для Каждого ЗначениеРеквизита Из ДанныеЗаполнения.ЗначенияРеквизитов Цикл
			Если ТипЗнч(ЗначениеРеквизита.Значение) = Тип("Массив") Тогда
				Источник[ЗначениеРеквизита.Ключ].Очистить();
				Для Каждого Строка Из ЗначениеРеквизита.Значение Цикл
					ЗаполнитьЗначенияСвойств(Источник[ЗначениеРеквизита.Ключ].Добавить(), Строка);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Заполним дополнительные реквизиты.
		Для Каждого Строка Из ДанныеЗаполнения.ДополнительныеРеквизиты Цикл
			НоваяСтрока = Источник.ДополнительныеРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание веб-сервиса 1С:Документооборота.
//
// Возвращаемое значение:
//   Строка
//
Функция ОписаниеВебСервисов() Экспорт
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		Возврат МодульИнтеграцияС1СДокументооборот.ОписаниеВебСервисов();
		
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
		Возврат МодульИнтеграцияС1СДокументооборот3.ОписаниеВебСервисов();
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Помещает в дополнительные свойства идентификатор объекта-основания. Вызывается перед записью объекта.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма записываемого объекта.
//   Объект - ДокументОбъект, СправочникОбъект - записываемый объект.
//   ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//
Процедура ПередЗаписьюНаСервере(Форма, Объект, ПараметрыЗаписи) Экспорт
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПередЗаписьюНаСервере(
			Форма,
			Объект,
			ПараметрыЗаписи);
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Определяет возможность использования аутентификации ОС платформой 1С:Предприятия.
// Возвращает Истина для версий 8.3.7 и старше под MS Windows, и Ложь в остальных случаях.
//
// Возвращаемое значение:
//   Булево
//
Функция ПоддерживаетсяАутентификацияОС() Экспорт
	
	Если Не СерверРаботаетПодWindows() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СисИнфо = Новый СистемнаяИнформация;
	Версия = СтрРазделить(СисИнфо.ВерсияПриложения, ".");
	
	Возврат (Число(Версия[0]) >= 8)
		И (Число(Версия[1]) >= 3)
		И (Число(Версия[2]) >= 7);
	
КонецФункции

// Возвращает подходящий тип потребителя для объекта XDTO.
//
// Параметры:
//   ТипОбъектаXDTO - Строка - тип объекта XDTO, соответствие которому следует выбрать
//   ТипыКандидаты - Массив - массив типов, из которых требуется выбрать подходящий
//
// Возвращаемое значение:
//   Тип - один из элементов массива ТипыКандидаты, подходящий для типа объекта XDTO
//
Функция ПодходящийТип(ТипОбъектаXDTO, ТипыКандидаты) Экспорт
	
	Попытка
		ТипИС = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ТипИС(ТипОбъектаXDTO);
		Если ТипыКандидаты.Найти(ТипИС) <> Неопределено Тогда
			ПодходящийТип = ТипИС;
		Иначе
			ПодходящийТип = ТипыКандидаты[0];
		КонецЕсли;
	Исключение
		ПодходящийТип = ТипыКандидаты[0];
	КонецПопытки;
	
	Возврат ПодходящийТип;
	
КонецФункции

// Получает заполненный по умолчанию объект из Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - имя типа XDTO объекта.
//   Предмет - Структура - Используется для получения бизнес-процессов:
//     * ID - Строка - уникальный идентификатор объекта в Документооборот.
//     * type - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMGetNewObjectResponse.
//
Функция ПолучитьНовыйОбъект(Прокси, Тип, Предмет = Неопределено) Экспорт
	
	Если Предмет <> Неопределено Тогда
		Если Найти(Тип,"BusinessProcess") <> 0 Тогда
			Возврат НовыйБизнесПроцесс(Прокси, Тип, Предмет);
		ИначеЕсли Тип = "DMOutgoingEMail" Тогда
			Возврат НовоеИсходящееПисьмо(Прокси, Предмет);
		Иначе
			Возврат Неопределено
		КонецЕсли;
	Иначе
		Запрос = СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
		Запрос.type = Тип;
		
		Ответ = ВыполнитьЗапрос(Прокси, Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Ответ);
		
		Если ПроверитьТип(Прокси, Ответ, "DMGetNewObjectResponse") Тогда
			Возврат Ответ.object;
		КонецЕсли;
		
		Возврат Ответ;
		
	КонецЕсли;
	
КонецФункции

// Получает объект из Документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - имя типа XDTO.
//   Ид - Строка - уникальный идентификатор объекта в Документообороте.
//   Колонки - Массив - необязательно, состав заполняемых колонок.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMRetrieveResponse.
//
Функция ПолучитьОбъект(Прокси, Тип, Ид, Колонки = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMRetrieveRequest");
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	
	objectID = СоздатьObjectID(Прокси, Ид, Тип);
	СписокОбъектов.Добавить(objectID);
	
	Если Колонки <> Неопределено Тогда
		Для Каждого Колонка Из Колонки Цикл
			ПолучаемыеПоля.Добавить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Получает объекты из документооборота.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объекты - Массив из Структура:
//     * ID - Строка
//     * type - Строка
//   Колонки - Массив из Строка, Структура:
//     * ID - Строка
//     * type - Строка
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMRetrieveResponse
//
Функция ПолучитьОбъекты(Прокси, Объекты, Колонки = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMRetrieveRequest");
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	
	Для Каждого Объект Из Объекты Цикл
		objectID = СоздатьObjectID(Прокси, Объект.ID, Объект.type);
		СписокОбъектов.Добавить(objectID);
	КонецЦикла;
	
	Если Колонки <> Неопределено Тогда
		Для Каждого Колонка Из Колонки Цикл
			ПолучаемыеПоля.Добавить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Создает прокси веб-сервиса Документооборота с настройками авторизации из параметров сеанса или, если это
// невозможно, например, при создании прокси в фоновом задании, с настройками, переданными напрямую.
//
// Параметры:
//   ВызыватьИсключение - Булево - Истина, если при невозможности получения следует вызвать исключение.
//   ИмяПользователя - Строка - имя пользователя ДО, или
//                   - Неопределено - признак необходимости получить имя, сохраненное в параметрах сеанса.
//   Пароль - Строка - пароль пользователя ДО, или
//          - Неопределено - признак необходимости получить пароль, сохраненное в параметрах сеанса.
//   ИспользуетсяАутентификацияОС - Булево - признак необходимости использовать аутентификацию ОС (8.3.7 и выше), или
//                                - Неопределено - признак необходимости получить этот признак из параметров сеанса.
//
// Возвращаемое значение:
//   WSПрокси, Неопределено - прокси веб-сервиса.
//
Функция ПолучитьПрокси(ВызыватьИсключение = Истина, ИмяПользователя = Неопределено, Пароль = Неопределено,
	ИспользуетсяАутентификацияОС = Неопределено) Экспорт
	
	// Получим настройки авторизации из параметров сеанса, если они не переданы параметрами функции.
	Если ИспользуетсяАутентификацияОС = Неопределено Тогда 
		ИспользуетсяАутентификацияОС = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС;
	КонецЕсли;
	
	Если ИмяПользователя = Неопределено Тогда
		ИмяПользователя = ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяПользователя) И Не ИспользуетсяАутентификацияОС Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Пароль = Неопределено Тогда
		Если Не ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен И Не ИспользуетсяАутентификацияОС Тогда
			Возврат Неопределено;
		КонецЕсли;
		Пароль = ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль;
	КонецЕсли;
	
	МестоположениеWSDL = Константы.АдресВебСервиса1СДокументооборот.Получить();
	Если ЗначениеЗаполнено(МестоположениеWSDL)
			И Прав(МестоположениеWSDL, 1) <> "/"
			И Прав(МестоположениеWSDL, 1) <> "\" Тогда
		МестоположениеWSDL = МестоположениеWSDL + "/";
	КонецЕсли;
	
	// При необходимости создадим защищенное соединение. Используем сертификаты из хранилища
	// Windows, если это имеет смысл для текущей платформы.
	ЭтоСоединениеSSL = СтрНачинаетсяС(МестоположениеWSDL, "https");
	Если ЭтоСоединениеSSL Тогда
		Если СерверРаботаетПодWindows() Тогда
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(
				Новый СертификатКлиентаWindows(),
				Новый СертификатыУдостоверяющихЦентровWindows());
		Иначе
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
		КонецЕсли;
	Иначе
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Таймаут = ТаймаутСервиса();
	ИнтернетПрокси = Неопределено;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриПолученииWSПрокси(ИнтернетПрокси);
	
	Попытка
		Определения = Новый WSОпределения(МестоположениеWSDL + "ws/dm.1cws?wsdl",
			ИмяПользователя,
			Пароль,
			ИнтернетПрокси,
			Таймаут,
			ЗащищенноеСоединение,
			ИспользуетсяАутентификацияОС);
	Исключение
		Определения = Неопределено;
		ТекстСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Определения = Неопределено Тогда
		Попытка
			Определения = Новый WSОпределения(МестоположениеWSDL + "ws/DMService?wsdl",
				ИмяПользователя,
				Пароль,
				ИнтернетПрокси,
				Таймаут,
				ЗащищенноеСоединение,
				ИспользуетсяАутентификацияОС);
		Исключение
			Определения = Неопределено;
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если Определения = Неопределено Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщенияОбОшибке);
		Если ВызыватьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка подключения к 1С:Документообороту.
				|
				|Возможно, не прошла авторизация, указан неверный адрес веб-сервиса 
				|или база 1С:Документооборота не опубликована на веб-сервере.
				|
				|Подробности в журнале регистрации. Обратитесь к администратору системы.'");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Прокси = Новый WSПрокси(Определения,
			"http://www.1c.ru/dm",
			"DMService",
			"DMServiceSoap",
			ИнтернетПрокси,
			Таймаут,
			ЗащищенноеСоединение,,
			ИспользуетсяАутентификацияОС);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(Инфо));
		Если ВызыватьИсключение Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка подключения к 1С:Документообороту.
				|
				|Возможно, не прошла авторизация, указан неверный адрес веб-сервиса 
				|или база 1С:Документооборота не опубликована на веб-сервере.
				|
				|Подробности в журнале регистрации. Обратитесь к администратору системы.'");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецПопытки;
	
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = Пароль;
	
	Возврат Прокси;
	
КонецФункции

// Возвращает реквизиты объекта потребителя указанного типа.
//
// Параметры:
//   ТипОбъектаИС - Строка - полное имя метаданных объекта.
//   ДляВыражения - Булево - возвращает список реквизитов для составления выражения на встроенном языке.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Имя - Строка
//     * Представление - Строка
//     * Тип - ОписаниеТипов
//     * ЭтоТаблица - Булево
//     * Таблица - Строка
//     * ТаблицаДляСортировки - Строка
//     * ЭтоДополнительныйРеквизитИС - Булево
//     * ДополнительныйРеквизитИС - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения
//     * СвязиПараметровВыбора - Массив из Структура:
//         ** Имя - Строка
//         ** ПутьКДанным - Строка
//     * Порядок - Число
//
Функция ПолучитьРеквизитыОбъектаИС(ТипОбъектаИС, ДляВыражения = Ложь) Экспорт
	
	Реквизиты = Новый ТаблицаЗначений;
	Реквизиты.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("Тип", Новый ОписаниеТипов("ОписаниеТипов"));
	Реквизиты.Колонки.Добавить("ЭтоТаблица", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("Таблица", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ТаблицаДляСортировки", Новый ОписаниеТипов("Строка"));
	Реквизиты.Колонки.Добавить("ЭтоДополнительныйРеквизитИС", Новый ОписаниеТипов("Булево"));
	Реквизиты.Колонки.Добавить("ДополнительныйРеквизитИС",
		Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	Реквизиты.Колонки.Добавить("СвязиПараметровВыбора", Новый ОписаниеТипов("Массив"));
	Реквизиты.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Реквизиты.Индексы.Добавить("Имя");
	Реквизиты.Индексы.Добавить("Таблица, Имя");
	
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ТипОбъектаИС);
	Если МетаданныеОбъекта = Неопределено Тогда
		Возврат Реквизиты;
	КонецЕсли;
	
	Порядок = 0;
	
	Для Каждого МетаданныеРеквизита Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		
		Если МетаданныеРеквизита.Имя = "Код"
				Или МетаданныеРеквизита.Имя = "Наименование"
				Или МетаданныеРеквизита.Имя = "Владелец"
				Или МетаданныеРеквизита.Имя = "Номер"
				Или МетаданныеРеквизита.Имя = "Дата" Тогда
			
			Реквизит = Реквизиты.Добавить();
			Порядок = Порядок + 1;
			Реквизит.Порядок = Порядок;
			Реквизит.Имя = МетаданныеРеквизита.Имя;
			Реквизит.Тип = МетаданныеРеквизита.Тип;
			Реквизит.Представление = ?(ЗначениеЗаполнено(МетаданныеРеквизита.Синоним),
				МетаданныеРеквизита.Синоним,
				МетаданныеРеквизита.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого МетаданныеРеквизита Из МетаданныеОбъекта.Реквизиты Цикл
		
		Если СтрНачинаетсяС(МетаданныеРеквизита.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизит = Реквизиты.Добавить();
		Порядок = Порядок + 1;
		Реквизит.Порядок = Порядок;
		Реквизит.Имя = МетаданныеРеквизита.Имя;
		Реквизит.Тип = МетаданныеРеквизита.Тип;
		Реквизит.Представление = ?(ЗначениеЗаполнено(МетаданныеРеквизита.Синоним),
			МетаданныеРеквизита.Синоним,
			МетаданныеРеквизита.Имя);
		Для Каждого СвязьПараметровВыбора Из МетаданныеРеквизита.СвязиПараметровВыбора Цикл
			СтруктураСвязи = Новый Структура("Имя, ПутьКДанным",
				СвязьПараметровВыбора.Имя,
				СвязьПараметровВыбора.ПутьКДанным);
			Реквизит.СвязиПараметровВыбора.Добавить(СтруктураСвязи);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого МетаданныеТаблицы Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		Если СтрНачинаетсяС(МетаданныеТаблицы.Имя, "Удалить")
				Или МетаданныеТаблицы.Имя = "ДополнительныеРеквизиты"
				Или МетаданныеТаблицы.Имя = "КонтактнаяИнформация" Тогда
			Продолжить;
		КонецЕсли;
		
		Таблица = Реквизиты.Добавить();
		Порядок = Порядок + 1;
		Таблица.Порядок = Порядок;
		Таблица.Имя = МетаданныеТаблицы.Имя;
		Таблица.ТаблицаДляСортировки = МетаданныеТаблицы.Имя;
		Таблица.ЭтоТаблица = Истина;
		Таблица.Представление = ?(ЗначениеЗаполнено(МетаданныеТаблицы.Синоним),
			МетаданныеТаблицы.Синоним,
			МетаданныеТаблицы.Имя);
		
		Для Каждого МетаданныеРеквизита Из МетаданныеТаблицы.Реквизиты Цикл
			
			Если СтрНачинаетсяС(МетаданныеРеквизита.Имя, "Удалить") Тогда
				Продолжить;
			КонецЕсли;
			
			Реквизит = Реквизиты.Добавить();
			Порядок = Порядок + 1;
			Реквизит.Порядок = Порядок;
			Реквизит.Имя = МетаданныеРеквизита.Имя;
			Реквизит.Тип = МетаданныеРеквизита.Тип;
			Реквизит.Представление = ?(ЗначениеЗаполнено(МетаданныеРеквизита.Синоним),
				МетаданныеРеквизита.Синоним,
				МетаданныеРеквизита.Имя);
			
			Для Каждого СвязьПараметровВыбора Из МетаданныеРеквизита.СвязиПараметровВыбора Цикл
				СтруктураСвязи = Новый Структура("Имя, ПутьКДанным",
					СвязьПараметровВыбора.Имя,
					СвязьПараметровВыбора.ПутьКДанным);
				Реквизит.СвязиПараметровВыбора.Добавить(СтруктураСвязи);
			КонецЦикла;
			
			Реквизит.Таблица = Таблица.Имя;
			Реквизит.ТаблицаДляСортировки = Таблица.Имя;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Метаданные.ФункциональныеОпции.Найти("ИспользоватьДополнительныеРеквизитыИСведения") <> Неопределено
			И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		
		ВладелецСвойств = Новый(Тип(СтрЗаменить(ТипОбъектаИС, ".", "Ссылка.")));
		
		Если УправлениеСвойствами.ИспользоватьДопРеквизиты(ВладелецСвойств) Тогда
			
			НаборДопРеквизитов = УправлениеСвойствами.СвойстваОбъекта(ВладелецСвойств, Истина, Ложь);
			СвойстваДопРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
				НаборДопРеквизитов,
				"Наименование, ТипЗначения");
			
			Для Каждого ДопРеквизит Из НаборДопРеквизитов Цикл
				СвойстваДопРеквизита = СвойстваДопРеквизитов[ДопРеквизит];
				
				Реквизит = Реквизиты.Добавить();
				Порядок = Порядок + 1;
				Реквизит.Порядок = Порядок;
				Реквизит.Имя = Строка(ДопРеквизит.УникальныйИдентификатор());
				Реквизит.Представление = СвойстваДопРеквизита.Наименование;
				Реквизит.Тип = СвойстваДопРеквизита.ТипЗначения;
				Реквизит.ЭтоДополнительныйРеквизитИС = Истина;
				Реквизит.ДополнительныйРеквизитИС = ДопРеквизит;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.
		ПолучитьРеквизитыОбъектаИС(ТипОбъектаИС, Реквизиты);
	
	// Определим порядок с учетом зависимостей по параметрам выбора.
	Повторять = Истина;
	Пока Повторять Цикл
		Повторять = Ложь;
		Для Каждого Реквизит Из Реквизиты Цикл
			ПутьКДанным = ПутьКДаннымРеквизита(Реквизит);
			МаксимальныйПорядок = 0;
			Для Каждого СвязьПараметровВыбора Из Реквизит.СвязиПараметровВыбора Цикл
				Зависимости = Реквизиты.НайтиСтроки(СтруктураПоискаРеквизита(СвязьПараметровВыбора.ПутьКДанным));
				Для Каждого Зависимость Из Зависимости Цикл
					ЕстьЗацикливание = Ложь;
					Для Каждого ЗависимостьСвязьПараметровВыбора Из Зависимость.СвязиПараметровВыбора Цикл
						Если ЗависимостьСвязьПараметровВыбора.ПутьКДанным = ПутьКДанным Тогда
							ЕстьЗацикливание = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не ЕстьЗацикливание Тогда
						МаксимальныйПорядок = Макс(МаксимальныйПорядок, Зависимость.Порядок);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Если МаксимальныйПорядок >= Реквизит.Порядок Тогда
				Реквизит.Порядок = МаксимальныйПорядок + 1;
				Повторять = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ДляВыражения Тогда
		Реквизиты.Сортировать("ТаблицаДляСортировки, ЭтоТаблица, Имя");
	Иначе
		Реквизиты.Сортировать("ТаблицаДляСортировки, Порядок");
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

// Определяет доступность интеграции для текущего пользователя. Может переопределяться
// при отказе от использования поставляемой роли ИспользованиеИнтеграцииС1СДокументооборотом.
//
// Возвращаемое значение:
//   Булево - Истина, если использование интеграции разрешено.
//
Функция ПользователюРазрешеноИспользованиеИнтеграции() Экспорт
	
	Разрешено = Ложь;
	
	Если ЕстьПодсистемаДО2() Тогда
		Разрешено = ПравоДоступа("Использование", Метаданные.Обработки["ИнтеграцияС1СДокументооборот"]);
	ИначеЕсли ЕстьПодсистемаДО3() Тогда
		Разрешено = ПравоДоступа("Использование", Метаданные.Обработки["ИнтеграцияС1СДокументооборот3"]);
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииРазрешенияПользователяИспользоватьИнтеграцию(Разрешено);
	
	Возврат Разрешено;
	
КонецФункции

// Помечает объект на удаление или снимает пометку.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Идентификатор - Строка - идентификатор помечаемого на удаление объекта.
//   Тип - Строка - тип помечаемого на удаление объекта.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMDeleteResponse.
//
Функция ПометитьНаУдалениеСнятьПометку(Прокси, Идентификатор, Тип) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMDeleteRequest");
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	
	ObjectID = СоздатьObjectID(Прокси, Идентификатор, Тип);
	СписокОбъектов.Добавить(ObjectID);
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает предельное количество объектов, выбираемых сервисом при получении списков.
//
// Параметры:
//   Тип - Строка - тип объекта XDTO
//
// Возвращаемое значение:
//   Число - предельное количество элементов, выбираемых за раз
//
Функция ПредельноеКоличествоВыбираемыхОбъектов(Тип) Экспорт
	
	ПредельноеКоличество = 20;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииПредельногоКоличестваВыбираемыхОбъектов(
		Тип, ПредельноеКоличество);
	
	Возврат ПредельноеКоличество;
	
КонецФункции

// Запрашивает ссылку на предопределенный объект Документооборота по заданному имени и типу.
//
// Параметры:
//   ТипОбъекта - Строка - Имя класса XDTO, предопределенный объект которого требуется получить.
//   ИмяПредопределенногоЭлемента - Строка - Имя предопределенного элемента.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMObject.
//
Функция ПредопределенноеЗначениеДО(ТипОбъекта, ИмяПредопределенногоЭлемента) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Запрос = СоздатьОбъект(Прокси, "DMGetPredefinedObjectRequest");
	Запрос.type = ТипОбъекта;
	Запрос.predefinedObjectName = ИмяПредопределенногоЭлемента;
	
	Результат = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	Возврат Результат.result;
	
КонецФункции

// Возвращает представление типа объекта XDTO Документооборота по имени типа.
//
// Параметры:
//   ТипXDTO - Строка - имя типа объекта XDTO.
//
// Возвращаемое значение:
//   Строка - представление типа объекта XDTO Документооборота по имени типа.
//
Функция ПредставлениеТипаОбъектаXDTO(ТипXDTO) Экспорт
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборотКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборотКлиентСервер");
		Возврат МодульИнтеграцияС1СДокументооборотКлиентСервер.ПредставлениеТипаОбъектаXDTO(ТипXDTO);
		
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульИнтеграцияС1СДокументооборот3КлиентСервер = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3КлиентСервер");
		Возврат МодульИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеТипаОбъектаXDTO(ТипXDTO);
		
	КонецЕсли;
	
КонецФункции

// Вызывается при записи констант подсистемы Интеграция с 1С:Документооборотом.
//
// Параметры:
//   Источник - КонстантаМенеджерЗначения - записываемая константа.
//   Отказ - Булево - флаг отказа от выполнения записи.
//
Процедура ПриЗаписиКонстанты(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриЗаписиКонстанты(Источник, Отказ);
	
	ИмяКонстанты = Источник.ЭтотОбъект.Метаданные().Имя;
	ЗначениеКонстанты = Источник.Значение;
	
	ТипКонстанты = ТипЗнч(ЗначениеКонстанты);
	ПримитивныеТипы = Новый ОписаниеТипов("Число,Строка,Дата,Булево,Неопределено");
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Синхронизировать "простые" зависимые константы
	Если ПримитивныеТипы.СодержитТип(ТипКонстанты) Или ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеКонстанты) Тогда
		
		ПодчиненныеКонстанты = ПолучитьДопустимыеЗначенияПодчиненныхКонстант(ИмяКонстанты, ЗначениеКонстанты);
		
		Если ЗначениеЗаполнено(ПодчиненныеКонстанты) Тогда
			
			Для Каждого КлючИЗначение Из ПодчиненныеКонстанты Цикл
				Если Константы[КлючИЗначение.Ключ].Получить() <> КлючИЗначение.Значение Тогда
					Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет команды Документооборота на форму объекта при создании на сервере.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызвана процедура.
//   МестоРазмещенияКоманд - ГруппаФормы - место для размещения, по умолчанию - командная панель формы.
//   ПараметрыОповещения - Структура - параметры, где может быть установлен источник команды.
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКоманд = Неопределено, ПараметрыОповещения = Неопределено) Экспорт
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		МодульИнтеграцияС1СДокументооборот = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот");
		МодульИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(
			Форма,
			МестоРазмещенияКоманд,
			ПараметрыОповещения);
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		МодульИнтеграцияС1СДокументооборот3 = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияС1СДокументооборот3");
		МодульИнтеграцияС1СДокументооборот3.ПриСозданииНаСервере(
			Форма,
			МестоРазмещенияКоманд,
			ПараметрыОповещения);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возврат WEB-сервиса. В случае возврата объекта типа DMError вызывает исключение.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Ответ - ОбъектXDTO - проверяемый результат вызова сервиса.
//
Процедура ПроверитьВозвратВебСервиса(Прокси, Ответ) Экспорт
	
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		
		ТекстОшибки = СокрЛП(Ответ.description);
		
		// Запишем в ЖР полный текст ошибки.
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(Ответ.subject),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
		ВызватьИсключение
			Ответ.subject + ":" + Символы.ПС + ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет тип объекта XDTO.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - проверяемый объект
//   Тип - Строка - имя типа для проверки
//
// Возвращаемое значение:
//   Булево - Истина если объект является объектом указанного типа и Ложь в противном случае.
//
Функция ПроверитьТип(Прокси, ОбъектXDTO, Тип) Экспорт
	
	Если Прокси = Неопределено Тогда
		// Подключение к 1С:Документооборот не было установлено.
		Возврат (НРег(СокрЛП(ОбъектXDTO.Тип().Имя)) = НРег(СокрЛП(Тип)));
		
	Иначе
		Возврат (ОбъектXDTO.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", Тип));
		
	КонецЕсли;
	
КонецФункции

// Определяет существует ли свойство в объекте XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, свойство которого нужно проверить.
//   ИмяСвойства - Строка - имя свойства.
//
// Возвращаемое значение:
//   Булево - свойство существует.
//
Функция СвойствоСуществует(ОбъектXDTO, ИмяСвойства) Экспорт
	
	Возврат (ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойства) <> Неопределено);
	
КонецФункции

// Определяет было ли установлено свойство в объекте XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - исходный объект, свойство которого нужно проверить.
//   ИмяСвойства - Строка - имя свойства.
//
// Возвращаемое значение:
//   Булево - свойство установлено.
//
Функция СвойствоУстановлено(ОбъектXDTO, ИмяСвойства) Экспорт
	
	Возврат (СвойствоСуществует(ОбъектXDTO, ИмяСвойства) И ОбъектXDTO.Установлено(ИмяСвойства));
	
КонецФункции

// Возвращает Истина, если сервер работает под Windows, и Ложь в противном случае.
//
// Возвращаемое значение:
//   Булево
//
Функция СерверРаботаетПодWindows() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	
	Возврат (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86)
		Или (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64);
	
КонецФункции

// Возвращает признак состояния "Согласован" по данным документооборота.
//
// Параметры:
//   СсылкаНаОбъект - ЛюбаяСсылка - ссылка на объект ИС.
//
// Возвращаемое значение:
//   Булево - состояние согласования в ДО.
//
Функция СогласованВ1СДокументооборот(СсылкаНаОбъект) Экспорт
	
	Согласован = Ложь;
	
	Попытка
		
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		
		Если Прокси <> Неопределено Тогда
			
			ВнешнийОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "ExternalObject");
			ВнешнийОбъектXDTO.ID = Строка(СсылкаНаОбъект.УникальныйИдентификатор());
			ВнешнийОбъектXDTO.type = СсылкаНаОбъект.Метаданные().ПолноеИмя();
			ВнешнийОбъектXDTO.name = Строка(СсылкаНаОбъект);
			
			Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
			ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
			Владельцы = Запрос.externalObjects; // СписокXDTO
			
			Владельцы.Добавить(ВнешнийОбъектXDTO);
			
			ПолучаемыеПоля.Добавить("status");
			
			Результат = Прокси.execute(Запрос);
			
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, Результат, "DMError") = Ложь
					И Результат.documents.Количество() > 0 Тогда
				Объект = Результат.documents[0];
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Объект, "status")
						И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Объект.status, "name")
						И Объект.status.name = "Согласован" Тогда
					Согласован = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		// Если нет соединения, вернем статус Ложь
		Согласован = Ложь;
	КонецПопытки;
	
	Возврат Согласован;
	
КонецФункции

// Создает объект DMObjectID.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ID - Строка - идентификатор объекта XDTO
//   type - Строка - тип объекта XDTO
//
// Возвращаемое значение:
//  ОбъектXDTO
//
Функция СоздатьObjectID(Прокси, ID, type) Экспорт
	
	objectID = СоздатьОбъект(Прокси, "DMObjectID");
	objectID.ID = ID;
	objectID.type = type;
	
	Возврат objectID;
	
КонецФункции

// Создает новый объект в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Объект - ОбъектXDTO - описание создаваемого объекта.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект типа DMCreateResponse или DMError.
//
Функция СоздатьНовыйОбъект(Прокси, Объект) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMCreateRequest");
	Запрос.object = Объект;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Создает XDTO объект указанного типа из пространства имен "http://www.1c.ru/dm".
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ТипОбъекта - Строка - тип объекта XDTO
//
// Возвращаемое значение:
//  ОбъектXDTO
//
Функция СоздатьОбъект(Прокси, ТипОбъекта) Экспорт
	
	Если Прокси = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Интеграция с 1С:Документооборотом не настроена, или сервис
			|1С:Документооборота недоступен. Обратитесь к администратору.'");
	КонецЕсли;
	
	ТипОбъектаXDTO = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", ТипОбъекта);
	
	Если ТипОбъектаXDTO = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Тип объекта ""%1"" не поддерживается веб-сервисом 1С:Документооборот версии %2'"),
			ТипОбъекта,
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса);
	КонецЕсли;
	
	Если НРег(ТипОбъектаXDTO.БазовыйТип.Имя) = "string" Тогда
		Возврат "";
	КонецЕсли;
	
	НовыйОбъект = Прокси.ФабрикаXDTO.Создать(ТипОбъектаXDTO);
	Если СвойствоСуществует(НовыйОбъект, "dataBaseID") Тогда
		НовыйОбъект.dataBaseID = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ИдентификаторБазыДанных();
	КонецЕсли;
	
	Возврат НовыйОбъект;
	
КонецФункции

// Возвращает сокращенное наименование интегрируемой конфигурации для вывода в заголовках и декорациях.
//
// Возвращаемое значение:
//   Строка - сокращенное наименование конфигурации.
//
Функция СокращенноеНаименованиеКонфигурации() Экспорт
	
	СокращенноеНаименование = НСтр("ru = 'БИД (демо)'");
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.
		ПриОпределенииСокращенногоНаименованияКонфигурации(СокращенноеНаименование);
	
	Возврат СокращенноеНаименование;
	
КонецФункции

// Получает ссылку на объект по имени объекта конфигурации и ID.
//
// Параметры:
//   Тип - Строка - тип объекта конфигурации.
//   UUID - Строка - идентификатор объекта конфигурации.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на объект.
//
Функция СсылкаИзUUID(Тип, UUID) Экспорт
	
	СсылкаНаПотребителя = Неопределено;
	
	Если СтрНачинаетсяС(Тип, "Справочник.") Тогда
		СсылкаНаПотребителя = Справочники[СтрЗаменить(Тип,
			"Справочник.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "Документ.")Тогда
		СсылкаНаПотребителя = Документы[СтрЗаменить(Тип,
			"Документ.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "ПланСчетов.") Тогда
		СсылкаНаПотребителя = ПланыСчетов[СтрЗаменить(Тип,
			"ПланСчетов.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "ПланВидовРасчета.") Тогда
		СсылкаНаПотребителя = ПланыВидовРасчета[СтрЗаменить(Тип,
			"ПланВидовРасчета.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "ПланВидовХарактеристик.") Тогда
		СсылкаНаПотребителя = ПланыВидовХарактеристик[СтрЗаменить(Тип,
			"ПланВидовХарактеристик.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "БизнесПроцесс.") Тогда
		СсылкаНаПотребителя = БизнесПроцессы[СтрЗаменить(Тип,
			"БизнесПроцесс.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "Задача.") Тогда
		СсылкаНаПотребителя = Задачи[СтрЗаменить(Тип,
			"Задача.", "")].ПолучитьСсылку(Новый УникальныйИдентификатор(UUID));
		
	ИначеЕсли СтрНачинаетсяС(Тип, "Перечисление.") И ЗначениеЗаполнено(UUID) Тогда
		СсылкаНаПотребителя = Перечисления[СтрЗаменить(Тип,
			"Перечисление.", "")][UUID];
		
	КонецЕсли;
	
	Возврат СсылкаНаПотребителя;
	
КонецФункции

// Возвращает ссылки на объекты этой конфигурации по информации о них в объекте ДО.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO, Структура - потомок DMObject, объект ДО. Или структура:
//     * ID - Строка - идентификатор внешнего объекта по данным 1С:Документооборота;
//     * type - Строка - тип внешнего объекта по данным 1С:Документооборота.
//
// Возвращаемое значение:
//   Массив - массив ссылок на связанные объекты этой конфигурации.
//
Функция СсылкиПоВнешнимОбъектам(ОбъектXDTO) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(ОбъектXDTO) = Тип("Структура") Тогда
		ВнешниеОбъекты = Новый Массив;
		ВнешниеОбъекты.Добавить(ОбъектXDTO);
		
	ИначеЕсли СвойствоУстановлено(ОбъектXDTO, "externalObjects") Тогда
		ВнешниеОбъекты = ОбъектXDTO.externalObjects;
		
	ИначеЕсли СвойствоУстановлено(ОбъектXDTO, "externalObject") Тогда
		ВнешниеОбъекты = Новый Массив;
		ВнешниеОбъекты.Добавить(ОбъектXDTO.externalObject);
		
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ВнешнийОбъект Из ВнешниеОбъекты Цикл
	
		Попытка
			Ссылка = СсылкаИзUUID(ВнешнийОбъект.type, ВнешнийОбъект.ID);
		Исключение
			// Тип объекта не найден в текущей конфигурации.
			Продолжить;
		КонецПопытки;
		
		Если Ссылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ " + ВнешнийОбъект.type + "
			|ГДЕ
			|	Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Результат.Добавить(Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает таймаут прокси веб-сервиса Документооборота, возможно, переопределенный в настройках.
//
// Возвращаемое значение:
//   Число - таймаут в секундах.
//
Функция ТаймаутСервиса() Экспорт
	
	Таймаут = 20;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииТаймаутаСервиса(Таймаут);
	
	Возврат Таймаут;
	
КонецФункции

// Получает текущего пользователя 1С:Документооборота.
//
// Возвращаемое значение:
//   ОбъектXDTO - Объект XDTO типа DMUser или Неопределено.
//
Функция ТекущийПользовательДокументооборота() Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	Запрос = СоздатьОбъект(Прокси, "DMGetCurrentUserRequest");
	Ответ = Прокси.execute(Запрос);
	
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		Возврат Неопределено;
	Иначе
		Возврат Ответ.user;
	КонецЕсли;
	
КонецФункции

// Устанавливает версию сервиса в параметрах сеанса. Вызывается напрямую или как фоновое задание.
//
// Параметры:
//   АдресВХранилище - Строка - адрес во временном хранилище для помещения версии сервиса (для ФЗ).
//                   - Неопределено - версию сервиса следует установить сразу в параметры сеанса.
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - истина, если используется аутентификация ОС (8.3.7 и выше).
//
Процедура УстановитьВерсиюСервиса(АдресВХранилище, ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС) Экспорт
	
	ВерсияСервиса = ПолучитьВерсиюВызовомСервиса(ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС);
	
	Если АдресВХранилище = Неопределено Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = ВерсияСервиса;
	Иначе
		ПоместитьВоВременноеХранилище(ВерсияСервиса, АдресВХранилище);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Завершено получение версии сервиса'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Устанавливает параметры сеанса работы с подсистемой "Интеграция с 1С:Документооборотом".
//
// Параметры:
//   ИмяПараметра - Строка
//   УстановленныеПараметры - Массив из Строка
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС = Ложь;
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС");
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотПарольИзвестен" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Ложь;
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотПарольИзвестен");
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотПароль" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль = "";
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотПароль");
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотИмяПользователя" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя = "";
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотИмяПользователя");
		КонецЕсли;
	КонецЕсли;
		
	Если ИмяПараметра = "ИнтеграцияС1СДокументооборотВерсияСервиса" Тогда
		
		Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы()
			Или ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
			
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "0.0.0.0";
			
		Иначе
			
#Если ВнешнееСоединение Тогда
			Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				УстановитьВерсиюСервиса(Неопределено,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
			Иначе // получим версию сервиса асинхронно, в фоновом задании
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Информация,,,
					НСтр("ru = 'Начато получение версии сервиса'",
						ОбщегоНазначения.КодОсновногоЯзыка()));
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор));
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя);
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль);
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
				ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = МассивПараметров[0];
				ФоновыеЗадания.Выполнить("ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьВерсиюСервиса", МассивПараметров);
			КонецЕсли;
#Иначе
			Если ЭтоЗадание() Тогда
				УстановитьВерсиюСервиса(Неопределено,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль,
					ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
			Иначе // получим версию сервиса асинхронно, в фоновом задании
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Информация,,,
					НСтр("ru = 'Начато получение версии сервиса'",
						ОбщегоНазначения.КодОсновногоЯзыка()));
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(ПоместитьВоВременноеХранилище("", Новый УникальныйИдентификатор));
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотИмяПользователя);
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотПароль);
				МассивПараметров.Добавить(ПараметрыСеанса.ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС);
				ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = МассивПараметров[0];
				ФоновыеЗадания.Выполнить("ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьВерсиюСервиса", МассивПараметров);
			КонецЕсли;
#КонецЕсли
			
		КонецЕсли;
		
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ИнтеграцияС1СДокументооборотВерсияСервиса");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры сеанса по массиву имен.
//
// Параметры:
//   ИменаПараметров - Массив - массив строк с именами параметров сеанса к установке.
//
Процедура УстановитьПараметрыСеансаПоМассивуИмен(ИменаПараметров) Экспорт
	
	Если ТипЗнч(ИменаПараметров) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяПараметра Из ИменаПараметров Цикл
		УстановитьПараметрыСеанса(ИмяПараметра, Неопределено);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в связанный документ в ДО штрихкод по объекту ИС.
//
// Параметры:
//   ОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота
//
Процедура УстановитьШтрихкод(ОбъектИС, ID, Тип) Экспорт
	
	Если Найти(Тип, "Document") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	ШтрихкодОбъектаИС = "";
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииШтрихкодаДокумента(
		ОбъектИС,
		ШтрихкодОбъектаИС);
	Если ЗначениеЗаполнено(ШтрихкодОбъектаИС)
			И ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.3.1.CORP") Тогда
		
		Запрос = СоздатьОбъект(Прокси, "DMRetrieveBarcodesRequest");
		
		Запрос.objectID = СоздатьОбъект(Прокси, "DMObjectID");
		Запрос.objectID.ID = ID;
		Запрос.objectID.type = Тип;
		
		Результат = Прокси.execute(Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		Запрос = СоздатьОбъект(Прокси, "DMUpdateBarcodesRequest");
		
		Запрос.objectBarcodes = Результат.objectBarcodes;
		СписокШтрихкодов = Запрос.objectBarcodes.barcodes; // СписокXDTO
		
		Штрихкод = СоздатьОбъект(Прокси, "DMBarcode");
		Штрихкод.internal = Ложь;
		Штрихкод.barcodeData = ШтрихкодОбъектаИС;
		СписокШтрихкодов.Добавить(Штрихкод);
		
		Результат = Прокси.execute(Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, является ли значение объектным, т.е. наследуется от типа DMObject.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Значение - Произвольный - проверяемое значение.
//
// Возвращаемое значение:
//   Булево - Истина, в случае, если значение является потомком типа DMObject, иначе Ложь.
//
Функция ЭтоОбъектноеЗначение(Прокси, Значение) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("ОбъектXDTO") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектныйТип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject");
	Возврат ОбъектныйТип.ЭтоПотомок(Значение.Тип());
	
КонецФункции

// Проверяет, является ли свойство объектным, т.е. наследуется от типа DMObject.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - объект, содержащий проверяемое свойство
//   ИмяСвойстваXDTO - Строка - имя проверяемого свойства
//
// Возвращаемое значение:
//   Булево - Истина, в случае, если свойство является потомком типа DMObject, иначе Ложь
//
Функция ЭтоОбъектноеСвойство(Прокси, ОбъектXDTO, ИмяСвойстваXDTO) Экспорт
	
	ТипСвойства = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойстваXDTO).Тип;
	ТипРодитель = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject");
	
	Возврат ТипЗнч(ТипСвойства) = Тип("ТипОбъектаXDTO") И ТипРодитель.ЭтоПотомок(ТипСвойства);
	
КонецФункции

#КонецОбласти

#Область ПрисоединенныеФайлы

// Устанавливает признак наличия присоединенных файлов ДО для объекта ИС. Вызывается при добавлении
// связи с объектом ДО, имеющим файлы, при добавлении файла из интерфейса ИС и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС.
//
Процедура ПриПоявленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриПоявленииПрисоединенныхФайловДокументооборота(
		ID, Тип, ОбъектИС, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами")
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьПрисоединенныеФайлы1СДокументооборота") Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецПрисоединенныхФайлов = Метаданные.ОпределяемыеТипы.Найти("ВладелецПрисоединенныхФайлов");
	Если ВладелецПрисоединенныхФайлов = Неопределено
			Или Не ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(ОбъектИС)) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФайлов = КоличествоФайловСвязанногоОбъекта(ID, Тип);
	
	Если КоличествоФайлов = Неопределено Или КоличествоФайлов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьИзменилась = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений["НаличиеФайлов"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
	МенеджерЗаписи.Прочитать();
	
	Если Не ЗначениеЗаполнено(МенеджерЗаписи.ОбъектСФайлами) Тогда
		МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если Не МенеджерЗаписи.ЕстьФайлы Тогда
		МенеджерЗаписи.ЕстьФайлы = Истина;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(МенеджерЗаписи.ИдентификаторОбъекта) Тогда
		МенеджерЗаписи.ИдентификаторОбъекта = "0000000000";
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ЗаписьИзменилась Тогда
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Снимает признак наличия присоединенных файлов для объекта ИС, если их нет в самой ИС. Вызывается при
// удалении связи с объектом ДО и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ОпределяемыйТип.ВладелецПрисоединенныхФайлов - объект ИС.
//
Процедура ПриУдаленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриУдаленииПрисоединенныхФайловДокументооборота(
		ID, Тип, ОбъектИС, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами")
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьПрисоединенныеФайлы1СДокументооборота") Тогда
		Возврат;
	КонецЕсли;
	
	ВладелецПрисоединенныхФайлов = Метаданные.ОпределяемыеТипы.Найти("ВладелецПрисоединенныхФайлов");
	Если Не ВладелецПрисоединенныхФайлов.Тип.СодержитТип(ТипЗнч(ОбъектИС)) Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	МодульРаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ОбъектИС, МассивФайлов);
	
	Если МассивФайлов.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удалим запись.
	МенеджерЗаписи = РегистрыСведений["НаличиеФайлов"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ОбъектИС;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.ЕстьФайлы = Ложь;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при определении наличия файлов, хранимых в интегрируемой конфигурации.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ЕстьФайлы - Булево, Неопределено - неявно возвращаемое значение, признак наличия присоединенных файлов.
//
Процедура ПриОпределенииНаличияПрисоединенныхФайлов(ВладелецФайлов, ЕстьФайлы) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииНаличияПрисоединенныхФайлов(
		ВладелецФайлов, ЕстьФайлы, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФайловВДО = Неопределено;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПрисоединенныеФайлы1СДокументооборота") Тогда
		ДанныеОбъектаДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.
			ДанныеОбъектаДОПоВнешнемуОбъекту(ВладелецФайлов);
		Если ДанныеОбъектаДО <> Неопределено И ДанныеОбъектаДО.ID <> "" И ДанныеОбъектаДО.type <> "" Тогда
			КоличествоФайловВДО = КоличествоФайловСвязанногоОбъекта(
				ДанныеОбъектаДО.ID,
				ДанныеОбъектаДО.type);
		КонецЕсли;
	КонецЕсли;
	
	Если КоличествоФайловВДО = Неопределено Или КоличествоФайловВДО = 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НаличиеФайлов.ЕстьФайлы
			|ИЗ
			|	РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
			|ГДЕ
			|	НаличиеФайлов.ОбъектСФайлами = &ВладелецФайлов
			|	И НаличиеФайлов.ЕстьФайлы
			|");
		Запрос.УстановитьПараметр("ВладелецФайлов", ВладелецФайлов);
		
		УстановитьПривилегированныйРежим(Истина);
		
		ЕстьФайлы = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при получении присоединенных файлов.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ДанныеФайлов - Массив из Структура:
//     * Ссылка - ОпределяемыйТип.ПрисоединенныйФайл - ссылка на элемент справочника с файлом.
//     * СсылкаНаДвоичныеДанныеФайла - Строка - адрес во временном хранилище, по которому помещены данные.
//     * ОтносительныйПуть - Строка - относительный путь файла.
//     * ДатаМодификацииУниверсальная - Дата - дата изменения фала.
//     * ИмяФайла - Строка - имя файла.
//     * Наименование - Строка - наименование файла в справочнике хранения файлов.
//     * Расширение - Строка - расширение файла без точки.
//     * Размер - Число - размер файла.
//     * Редактирует - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи, Неопределено - ссылка на
//         пользователя, занявшего файл.
//     * ПодписанЭП - Булево - признак того, что файл подписан.
//     * Зашифрован - Булево - признак того, что файл зашифрован.
//     * Версия - ОпределяемыйТип.ПрисоединенныйФайл - если справочник файлов поддерживает создание
//         версий, содержит ссылку на текущую версию файла. В ином случае содержит ссылку на файл.
//     * НомерВерсии - Число - если справочник файлов поддерживает создание версий, содержит номер
//         текущей версии файла, иначе - 0.
//     * Том - СправочникСсылка.ТомаХраненияФайлов - том хранения файла.
//     * Автор - СправочникСсылка.УчетныеЗаписиСинхронизацииФайлов
//             - СправочникСсылка.Пользователи,
//             - СправочникСсылка.ВнешниеПользователи - автор файла.
//     * СтатусИзвлеченияТекста - ПеречислениеСсылка.СтатусыИзвлеченияТекстаФайлов - статус извлечения текста
//         из файла.
//     * ПолноеНаименованиеВерсии - Строка - если справочник файлов поддерживает создание версий, содержит полное
//         наименование текущей версии файла. В ином случае содержит полное наименование файла.
//     * КодировкаТекущейВерсии - Строка - кодировка текстового файла.
//     * НаЧтение - Булево - признак того, что файл редактируется пользователем, отличным от текущего.
//     * ПолноеИмяФайлаВРабочемКаталоге - Строка - путь к файлу в рабочем каталоге.
//     * ВРабочемКаталогеНаЧтение - Булево - файл в рабочем каталоге помечен только для чтения.
//     * РабочийКаталогВладельца - Строка - путь к рабочему каталогу владельца.
//     * ПапкаДляСохранитьКак - Строка - путь к каталогу сохранения.
//     * ФайлРедактируется - Булево - признак того, что файл занят для редактирования.
//     * ФайлРедактируетТекущийПользователь - Булево - признак того, что файл занят для редактирования
//         текущим пользователем.
//     * Служебный - Булево - признак того, что файл является служебным.
//
Процедура ПриПолученииПрисоединенныхФайлов(ВладелецФайлов, ДанныеФайлов) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриПолученииПрисоединенныхФайлов(
		ВладелецФайлов, ДанныеФайлов, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВладелецФайлов, Файлы);
	
	Для Каждого Файл Из Файлы Цикл
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Файл, Неопределено, Истина, Ложь);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает количество прикрепленных файлов к связанному объекту 1С:Документооборот.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ВключаяУдаленные - Булево - учитывать ли помеченные на удаление файлы.
//
// Возвращаемое значение:
//   Число - количество прикрепленных файлов.
//
Функция КоличествоФайловСвязанногоОбъекта(ID, Тип, ВключаяУдаленные = Истина) Экспорт
	
	Если ID = "" Или Тип = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ОбъектИд = СоздатьObjectID(Прокси, ID, Тип);
	
	Запрос = СоздатьОбъект(Прокси, "DMRetrieveRequest");
	СписокОбъектов = Запрос.objectIDs; // СписокXDTO
	ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
	
	СписокОбъектов.Добавить(ОбъектИд);
	
	ПолучаемыеПоля.Добавить("files");
	
	Если СтрНайти(Тип, "Document") > 0 Тогда
		ПолучаемыеПоля.Добавить("enabledProperties");
	КонецЕсли;
	
	Если ВключаяУдаленные Тогда
		ПолучаемыеПоля.Добавить("ignoreDeletionMark");
	КонецЕсли;
	
	Результат = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	ОбъектXDTO = Результат.objects[0];
	
	Если СвойствоУстановлено(ОбъектXDTO, "files") Тогда
		Возврат ОбъектXDTO.files.Количество();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцессыИЗадачи

// Получает объект XDTO бизнес-процесса.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Тип - Строка - тип бизнес-процесса.
//   Предмет - Структура:
//     * ID - Строка - идентификатор предмета.
//     * type - Строка - тип предмета.
//
// Возвращаемое значение:
//   ОбъектXDTO, Неопределено - XDTO объект с бизнес-процессом заданного типа.
//
Функция НовыйБизнесПроцесс(Прокси, Тип, Предмет = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMGetNewBusinessProcessRequest");
	
	Запрос.type = Тип;
	Если Предмет <> Неопределено Тогда
		Запрос.targetID = СоздатьОбъект(Прокси, "DMObjectID");
		Запрос.targetID.ID = Предмет.ID;
		Запрос.targetID.type = Предмет.type;
	КонецЕсли;
	
	Ответ = ВыполнитьЗапрос(Прокси, Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Если ПроверитьТип(Прокси, Ответ, "DMGetNewBusinessProcessResponse") Тогда
		Возврат Ответ.object;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет, является ли версия сервиса более свежей или такой же, как требуемая версия.
// 
// Параметры:
//   ОписаниеВерсииСервиса - Массив - массив из 4-5 элементов, составляющий полный номер версии
//   ТребуемаяВерсия - Строка - строка с номером требуемой версии
//
// Возвращаемое значение:
//   Булево - Истина, если описание версии - не меньше требуемой версии
//
Функция ВерсияНеМеньше(ОписаниеВерсииСервиса, ТребуемаяВерсия)
	
	ОписаниеТребуемойВерсии = СтрРазделить(ТребуемаяВерсия, ".");
	Если ОписаниеТребуемойВерсии.Количество() <> 5 Тогда
		ОписаниеТребуемойВерсии.Добавить("PROF");
	КонецЕсли;
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	ОписаниеВерсииСервиса0 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[0]);
	ОписаниеТребуемойВерсии0 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[0]);
	ОписаниеВерсииСервиса1 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[1]);
	ОписаниеТребуемойВерсии1 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[1]);
	ОписаниеВерсииСервиса2 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[2]);
	ОписаниеТребуемойВерсии2 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[2]);
	ОписаниеВерсииСервиса3 = ОписаниеТипа.ПривестиЗначение(ОписаниеВерсииСервиса[3]);
	ОписаниеТребуемойВерсии3 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[3]);
	
	НомерНеМеньше = Ложь;
	Если ОписаниеВерсииСервиса0 > ОписаниеТребуемойВерсии0 Тогда
		НомерНеМеньше = Истина;
	ИначеЕсли ОписаниеВерсииСервиса0 = ОписаниеТребуемойВерсии0 Тогда
		Если ОписаниеВерсииСервиса1 > ОписаниеТребуемойВерсии1 Тогда
			НомерНеМеньше = Истина;
		ИначеЕсли ОписаниеВерсииСервиса1 = ОписаниеТребуемойВерсии1 Тогда
			Если ОписаниеВерсииСервиса2 > ОписаниеТребуемойВерсии2 Тогда
				НомерНеМеньше = Истина;
			ИначеЕсли ОписаниеВерсииСервиса2 = ОписаниеТребуемойВерсии2 Тогда
				Если ОписаниеВерсииСервиса3 >= ОписаниеТребуемойВерсии3 Тогда
					НомерНеМеньше = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерНеМеньше
		И ((ОписаниеВерсииСервиса[4] = ОписаниеТребуемойВерсии[4]) Или ОписаниеВерсииСервиса[4] = "CORP");
	
КонецФункции

Процедура ДобавитьКомандуСозданияНаОсновании(ТаблицаКоманд, Команда, Обработчик, ВидВРег, ФункциональныеОпции, Порядок)
	
	КомандаСозданияНаОсновании = ТаблицаКоманд.Добавить();
	КомандаСозданияНаОсновании.Обработчик = Обработчик;
	КомандаСозданияНаОсновании.Идентификатор = Команда.Имя;
	КомандаСозданияНаОсновании.Представление = Команда.Синоним;
	КомандаСозданияНаОсновании.РежимЗаписи = ?(ВидВРег = "ДОКУМЕНТ", "Записывать", "Записывать");
	КомандаСозданияНаОсновании.ФункциональныеОпции = ФункциональныеОпции;
	КомандаСозданияНаОсновании.Порядок = Порядок;
	
	Порядок = Порядок - 1;
	
КонецПроцедуры

// Получает версию сервиса, обратившись к нему напрямую.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - истина, если используется аутентификация ОС (8.3.7 и выше).
//
Функция ПолучитьВерсиюВызовомСервиса(ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС)
	
	ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Ложь;
	
	Прокси = ПолучитьПрокси(Ложь, // не вызывать исключение
		ИмяПользователя,
		Пароль,
		ИспользуетсяАутентификацияОС);
	
	Если Прокси = Неопределено Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru = 'Сервис недоступен'",
				ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат "0.0.0.0";
	Иначе
		Запрос = СоздатьОбъект(Прокси, "DMGetVersionRequest");
		Ответ = Прокси.execute(Запрос);
		Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда 
			ТекстОшибки = Ответ.description;
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
			Возврат "0.0.0.0";
		Иначе
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Подключен сервис версии %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Ответ.versionNumber);
			ЗаписьЖурналаРегистрации(
				ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,,,
				ТекстСообщения);
			
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Истина;
			
			Возврат Ответ.versionNumber;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру, описывающую "подчиненные" константы для указанной "родительской" константы.
//
// Параметры:
//   ИмяРодительскойКонстанты - Строка - имя константы как оно задано в конфигураторе.
//   ЗначениеРодительскойКонстанты - Произвольный - значение константы.
//
// Возвращаемое значение:
//   Структура:
//     * Ключ - Строка - имя подчиненной константы.
//     * Значение - Произвольный - значение подчиненной константы, соответствующее значению родительской константы.
//
Функция ПолучитьДопустимыеЗначенияПодчиненныхКонстант(ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты)
	
	Результат = Новый Структура;
	ТаблицаКонстант = ЗависимостиКонстант();
	
	ПодчиненныеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура(
			"ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты",
			ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты));
	
	Для Каждого СтрокаТаблицы Из ПодчиненныеКонстанты Цикл
		Результат.Вставить(СтрокаТаблицы.ИмяПодчиненнойКонстанты, СтрокаТаблицы.ЗначениеПодчиненнойКонстанты);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПутьКДаннымРеквизита(Реквизит)
	
	Если Реквизит.Таблица <> "" Тогда
		Возврат Реквизит.Таблица + "." + Реквизит.Имя;
	Иначе
		Возврат Реквизит.Имя;
	КонецЕсли;
	
КонецФункции

Функция СтруктураПоискаРеквизита(ПутьКДанным)
	
	РазделеннаяСтрока = СтрРазделить(ПутьКДанным, ".");
	Если РазделеннаяСтрока.Количество() = 1 Тогда
		СтруктураПоиска = Новый Структура("Таблица, Имя", "", РазделеннаяСтрока[0]);
	Иначе
		СтруктураПоиска = Новый Структура("Таблица, Имя", РазделеннаяСтрока[0], РазделеннаяСтрока[1]);
	КонецЕсли;
	
	Возврат СтруктураПоиска;
	
КонецФункции

// Устанавливает ссылку нового объекта согласно идентификатору в дополнительных свойствах.
//
// Параметры:
//   Объект - ДокументОбъект
//          - СправочникОбъект - записываемый объект.
//
Процедура УстановитьСсылкуНовогоПередЗаписьюОбъекта(Объект)
	
	Если Не Объект.ДополнительныеСвойства.Свойство("ИдентификаторОбъектаДО")
			Или Не Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОбъектаДО = Объект.ДополнительныеСвойства.ИдентификаторОбъектаДО;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторОбъектаДО);
	ПолноеИмя = Объект.Метаданные().ПолноеИмя();
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	СсылкаПоИдентификатору = Менеджер.ПолучитьСсылку(УникальныйИдентификатор);
	
	ТекстЗапроса = СтрЗаменить(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПолноеИмя.Ссылка КАК Ссылка
		|ИЗ
		|	&ПолноеИмя КАК ПолноеИмя
		|ГДЕ
		|	ПолноеИмя.Ссылка = &СсылкаПоИдентификатору",
		"&ПолноеИмя",
		ПолноеИмя);
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Объект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
	КонецЕсли;
	
КонецПроцедуры

// Определяет, является ли текущий сеанс сеансом фонового или регламентного задания..
//
Функция ЭтоЗадание()
	
	УстановитьПривилегированныйРежим(Истина);
	Сеанс = ПолучитьТекущийСеансИнформационнойБазы();
	
	Возврат Сеанс.ИмяПриложения = "BackgroundJob" Или Сеанс.ИмяПриложения = "JobScheduler";
	
КонецФункции

#КонецОбласти