////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборот3Клиент: клиент
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Открывает форму выбора значения из списка объектов документооборота и помещает выбранное значение на форме.
//
// Параметры:
//   ТипОбъектаВыбора - Строка - имя класса XDTO, соответствующего типу выбираемого объекта.
//   Реквизит - Строка - имя реквизита формы, в который будет помещено значение, выбранное из документооборота.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызывается форма выбора.
//   Отбор - Структура - условия, накладываемые на список.
//
Процедура ВыбратьЗначениеИзСписка(ТипОбъектаВыбора, Реквизит, ФормаВладелец, Отбор = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Реквизит", Реквизит);
	Параметры.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеИзСпискаЗавершение",
		ИнтеграцияС1СДокументооборот3Клиент, Параметры);
	
	ВыбратьЗначениеПоТипуОбъекта(Оповещение, ТипОбъектаВыбора, Отбор, ФормаВладелец[Реквизит + "ID"], ФормаВладелец);
	
КонецПроцедуры

// Обработка выбора значения из списка.
//
Процедура ВыбратьЗначениеИзСпискаЗавершение(Результат, Параметры) Экспорт
	
	ФормаВладелец = Параметры.ФормаВладелец;
	Реквизит = Параметры.Реквизит;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ФормаВладелец[Реквизит] = Результат.РеквизитПредставление;
		ФормаВладелец[Реквизит + "ID"] = Результат.РеквизитID;
		ФормаВладелец[Реквизит + "Тип"] = Результат.РеквизитТип;
		
		ФормаВладелец.Модифицированность = Истина;
		
		Оповестить("Документооборот_ВыбратьЗначениеИзСпискаЗавершение", Реквизит, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму выбора значения реквизита в таблице из списка объектов документооборота.
//
Процедура ВыбратьЗначениеИзСпискаВТаблице(ТипОбъектаВыбора, Реквизит, ТекущиеДанные, ФормаВладелец,
		Отбор = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	Параметры.Вставить("Реквизит", Реквизит);
	Параметры.Вставить("ФормаВладелец", ФормаВладелец);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьЗначениеИзСпискаВТаблицеЗавершение",
		ИнтеграцияС1СДокументооборот3Клиент, Параметры);
	
	ВыбратьЗначениеПоТипуОбъекта(Оповещение, ТипОбъектаВыбора, Отбор, ТекущиеДанные[Реквизит + "ID"], ФормаВладелец);
	
КонецПроцедуры

// Обработка выбора значения в таблице из списка.
//
Процедура ВыбратьЗначениеИзСпискаВТаблицеЗавершение(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Параметры.ТекущиеДанные;
	Реквизит = Параметры.Реквизит;
	ФормаВладелец = Параметры.ФормаВладелец;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ТекущиеДанные[Реквизит] = Результат.РеквизитПредставление;
		ТекущиеДанные[Реквизит + "ID"] = Результат.РеквизитID;
		ТекущиеДанные[Реквизит + "Тип"] = Результат.РеквизитТип;
		
		ФормаВладелец.Модифицированность = Истина;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		ПараметрыОповещения.Вставить("Данные", ТекущиеДанные);
		ПараметрыОповещения.Вставить("Результат", Результат);
		
		Оповестить("Документооборот_ВыбратьЗначениеИзСпискаВТаблицеЗавершение", ПараметрыОповещения, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

// Начинает процесс выбора объекта ДО указанного типа, возвращая результат вызовом оповещения.
//
// Параметры:
//   ОписаниеОповещения - ОписаниеОповещения - вызывается после завершения выбора с передачей структуры,
//      описывающей выбранный объект.
//   ТипОбъектаВыбора - Строка - тип выбираемого объекта (XDTO, например, "DMCorrespondent").
//   Отбор - Структура - накладываемый отбор.
//   ВыбранноеЗначение - Строка - идентификатор ранее выбранного значения.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой вызван выбор.
//
Процедура ВыбратьЗначениеПоТипуОбъекта(ОписаниеОповещения, ТипОбъектаВыбора, Отбор = Неопределено,
		ВыбранноеЗначение = "", ФормаВладелец = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаВыбора", ТипОбъектаВыбора);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("Заголовок", ИнтеграцияС1СДокументооборот3КлиентСервер.ПредставлениеТипаОбъектаXDTO(
		ТипОбъектаВыбора, "ЗаголовокФормыВыбора"));
	ПараметрыФормы.Вставить("ВыбранныйЭлемент", ВыбранноеЗначение);
	
	Если ТипОбъектаВыбора = "DMDocument"
			Или ТипОбъектаВыбора = "DMCorrespondent"
			Или ТипОбъектаВыбора = "DMMeeting" Тогда
		ПараметрыФормы.Вставить("ИскатьСразу", Ложь);
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот3.Форма.ВыборОбъектаПоиском",
			ПараметрыФормы,
			ФормаВладелец,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборИзСписка",
			ПараметрыФормы,
			ФормаВладелец,
			Новый УникальныйИдентификатор,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск связанного объекта ДО, при необходимости создавая его на основании объекта ИС
// с заполнением по правилам интеграции, если подходящее правило существует.
//
// Параметры:
//   ОбъектИС - Произвольный - объект ИС, для которого разыскивается связанный объект ДО.
//   ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания с
//     передачей в качестве параметра Структуры (ID, type, name).
//
Процедура НачатьПоискСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения) Экспорт
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДанныеОбъектаДОПоВнешнемуОбъекту(
		ОбъектИС);
	
	Если Результат <> Неопределено Тогда // найден
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
	НачатьСозданиеСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения);
	
КонецПроцедуры

// Выполняет создание объекта ДО, его заполнение по объекту ИС и установку связи после записи. При
// необходимости предлагает пользователю выбор правила.
//
// Параметры:
//   ОбъектИС - Произвольный - объект ИС, на основании которого создается объект ДО.
//   ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//
Процедура НачатьСозданиеСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектИС", ОбъектИС);
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	СписокОбъектовИС = Новый Массив;
	СписокОбъектовИС.Добавить(ОбъектИС);
	ПодходящиеПравилаИнтеграции = ИнтеграцияС1СДокументооборот3ВызовСервера.ПодходящиеПравилаИнтеграции(
		СписокОбъектовИС);
	Правила = ПодходящиеПравилаИнтеграции[ОбъектИС];
	
	Если Правила.Количество() = 1 Тогда
		
		НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила(Правила[0], Параметры);
		
	ИначеЕсли Правила.Количество() > 1 Тогда
		
		// несколько правил, требуется выбор пользователя
		ОписаниеОповещенияОПродолжении = Новый ОписаниеОповещения(
			"НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила",
			ИнтеграцияС1СДокументооборот3Клиент,
			Параметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Правила", Правила);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборПравила",
			ПараметрыФормы,,,,,
			ОписаниеОповещенияОПродолжении,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Для объекта %1 нет подходящих правил интеграции.'"),
			ОбъектИС);
		ПоказатьПредупреждение(,ТекстОшибки,,
			НСтр("ru = 'Не удалось создать объект 1С:Документооборота'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет создание объекта ДО, его заполнение по объекту ИС и установку связи после записи. При
// необходимости предлагает пользователю выбор правила.
//
// Параметры:
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - правило заполнения.
//   Параметры - Структура:
//     ОбъектИС - Произвольный - объект ИС, на основании которого создается объект ДО.
//     ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания.
//
Процедура НачатьСозданиеСвязанногоОбъектаДОПослеВыбораПравила(Знач Правило, Параметры) Экспорт
	
	Если Правило = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Правило) = Тип("Структура") Тогда
		Правило = Правило.Ссылка;
	КонецЕсли;
	
	ОбъектДОИлиСообщение = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СоздатьОбъектДОПоПравилу(
		Параметры.ОбъектИС,
		Правило);
	
	Если ТипЗнч(ОбъектДОИлиСообщение) = Тип("Строка") Тогда // сообщение об ошибке
		
		ПоказатьПредупреждение(,ОбъектДОИлиСообщение,,
			НСтр("ru = 'Не удалось создать объект 1С:Документооборота'"));
		
	Иначе // структура с описанием созданного объекта результата
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.Оповестить_ДобавлениеСвязи(
			ОбъектДОИлиСообщение.ID,
			ОбъектДОИлиСообщение.type,
			Параметры.ОбъектИС);
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, ОбъектДОИлиСообщение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Запускает интегрированную базу ДО и переходит по указанной ссылке.
//
// Параметры:
//   СсылкаНаОбъектДО - Строка - навигационная ссылка по которой требуется перейти в базе ДО.
//     Если параметр не задан, то ссылка будет браться из параметра сеанса ИнтеграцияС1СДокументооборотОбъектДО.
//
Процедура ОткрытьОбъектДО(Знач СсылкаНаОбъектДО = Неопределено) Экспорт
	
	Если СсылкаНаОбъектДО = Неопределено Тогда
		СсылкаНаОбъектДО = ИнтеграцияС1СДокументооборот3ВызовСервера.ПолучитьСсылкуНаОбъектДО();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъектДО) Тогда
		Возврат;
	КонецЕсли;
	
	АдресКоманды = СтрШаблон("%1#%2",
		ИнтеграцияС1СДокументооборот3ВызовСервера.НавигационнаяСсылкаБазыДО(Истина),
		СсылкаНаОбъектДО);
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(АдресКоманды);
	
КонецПроцедуры

#КонецОбласти

#Область Обработка

// Стартует обработку связанного объекта ДО. При передаче в качестве предмета ссылки на объект ИС
// создает связанный объект ДО, если эта связь не была установлена ранее.
//
// Параметры:
//   Предмет - ЛюбаяСсылка
//           - Структура:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//     * ВнешнийОбъект - ЛюбаяСсылка
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого при завершении.
//
Процедура НачатьОбработку(Предмет = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры.Вставить("Предмет", Предмет);
	
	ОписаниеОповещенияПродолжение = Новый ОписаниеОповещения(
		"НачатьОбработкуПослеПоискаСвязанногоОбъектаДО",
		ИнтеграцияС1СДокументооборот3Клиент,
		Параметры);
	
	Если ТипЗнч(Предмет) = Тип("Структура") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПродолжение, Предмет);
	Иначе
		НачатьПоискСвязанногоОбъектаДО(Предмет, ОписаниеОповещенияПродолжение);
	КонецЕсли;
	
КонецПроцедуры

// Продолжает создание бизнес-процесса после поиска связанного объекта ДО.
//
// Параметры:
//   Результат - Неопределено
//             - Структура:
//     * ID - Строка
//     * type - Строка
//     * name - Строка
//   Параметры - Структура:
//     * ГлавнаяЗадача- Структура:
//         ** ID - Строка
//         ** type - Строка
//         ** name - Строка
//     * ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого при завершении.
//     * Предмет - ЛюбаяСсылка,
//               - Структура:
//         ** ID - Строка
//         ** type - Строка
//         ** name - Строка
//         ** ВнешнийОбъект - ЛюбаяСсылка
//
Процедура НачатьОбработкуПослеПоискаСвязанногоОбъектаДО(Результат, Параметры) Экспорт
	
	// Отличим случай, когда предмет не выбран, от случая, когда предмет не нужен.
	Если Параметры.Предмет <> Неопределено Тогда
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Параметры.Предмет = Результат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если ИнтеграцияС1СДокументооборот3ВызовСервера.НачатьОбработку(Параметры.Предмет, ТекстОшибки) Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru= 'Обработка'"),,
			СтрШаблон(НСтр("ru = 'Обработка ""%1"" успешно запущена'"), Параметры.Предмет.name),
			БиблиотекаКартинок.Информация32,
			СтатусОповещенияПользователя.Важное);
		Если Параметры.ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения);
		КонецЕсли;
		
	Иначе
		
		ПозицияСсылки = СтрНайти(ТекстОшибки, "Ссылка на объект в ДО: ");
		Если ПозицияСсылки > 0 Тогда
			ИнтеграцияС1СДокументооборот3ВызовСервера.УстановитьСсылкуНаОбъектДО(
				Сред(ТекстОшибки, ПозицияСсылки + 23, СтрДлина(ТекстОшибки)));
			Инфо = СтроковыеФункцииКлиент.ФорматированнаяСтрока(
				СтрШаблон(
					НСтр("ru = '%1
						|<a href = ""%2"">Ссылка на объект в ДО</a>'"),
					Лев(ТекстОшибки, ПозицияСсылки - 2),
					"e1cib/command/Обработка.ИнтеграцияС1СДокументооборот3.Команда.ОткрытьОбъектДО"));
		Иначе
			Инфо = ТекстОшибки;
		КонецЕсли;
		
		ПоказатьПредупреждение(,Инфо,,
			НСтр("ru = 'Не удалось начать обработку'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаКоманды

// Обработчик общей команды ИнтеграцияС1СДокументооборотНачатьОбработку
//
// Параметры:
//   МассивСсылок - Произвольный - в параметр передается значение от источника, в котором реализована команда.
//     Может содержать как единичное значение, так и массив значений.
//   ПараметрыВыполнения - ПараметрыВыполненияКоманды - в обработчике команды можно изменить значение свойств
//     параметра.
//
Процедура ОбработкаКомандыНачатьОбработку(МассивСсылок, ПараметрыВыполнения) Экспорт
	
	Если ТипЗнч(МассивСсылок) = Тип("Массив") И МассивСсылок.Количество() > 0 Тогда
		ПараметрКоманды = МассивСсылок[0];
	Иначе
		ПараметрКоманды = МассивСсылок;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НачатьОбработкуПроверитьПодключениеЗавершение",
		ЭтотОбъект,
		ПараметрКоманды);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
		ОписаниеОповещения,,,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Продолжение процедуры ОбработкаКомандыНачатьОбработку.
Процедура НачатьОбработкуПроверитьПодключениеЗавершение(Результат, ПараметрКоманды) Экспорт
	
	Если Результат = Истина Тогда
		// авторизация успешна
		НачатьОбработку(ПараметрКоманды);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти