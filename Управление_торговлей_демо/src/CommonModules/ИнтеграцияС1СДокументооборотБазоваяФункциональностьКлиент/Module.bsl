////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент: клиент
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.БазоваяФункциональность

// Начинает асинхронное подключение к Документообороту, если известны настройки авторизации. Не
// запрашивает имя пользователя и пароль, если они неизвестны. Для вывода окна авторизации и для
// оповещения о результате следует использовать процедуру ПроверитьПодключение.
//
Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	ПараметрыПриЗапускеПрограммы = ПараметрыПриложения[
		"СтандартныеПодсистемы.ПараметрыПриЗапускеПрограммы"];
	Если ПараметрыПриЗапускеПрограммы.Свойство("СкрытьРабочийСтолПриНачалеРаботыСистемы") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	Если Не ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	// Если получение пароля не требуется, сразу инициируем подключение обращением к версии сервиса.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПарольИзвестен() Тогда
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВерсияСервиса();
		
	Иначе // пароль пока не известен, получим его
		
		ИмяПользователя = Неопределено;
		Пароль = Неопределено;
		ПарольСохранен = Неопределено;
		ИспользуетсяАутентификацияОС = Ложь;
		ПрочитатьНастройкиАвторизации(ИмяПользователя, ПарольСохранен, Пароль, ИспользуетсяАутентификацияОС);
		
		Если (ИмяПользователя <> Неопределено И ПарольСохранен)
			Или ИспользуетсяАутентификацияОС Тогда
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
				ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС);
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВерсияСервиса();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БазоваяФункциональность

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Возвращает сохраненный ранее признак состоявшегося показа окна авторизации.
//
// Возвращаемое значение:
//   Булево - Истина, если авторизация была предложена в этом сеансе, и Ложь в противном случае.
//
Функция АвторизацияПредложена() Экспорт
	
	Результат = (ПараметрыПриложения["ИнтеграцияС1СДокументооборот.АвторизацияПредложена"] = Истина);
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ПриОпределенииПредложенияАвторизации(
		Результат);
	
	Возврат Результат;
	
КонецФункции

// Универсальный метод для выбора произвольного значения в поле ввода.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается команда.
//   Элемент - ПолеФормы - поле, куда должно быть помещено выбранное значение.
//   Типы - СписокЗначений - тип значения, которое требуется выбрать.
//   Представление - Строка - представление реквизита, для которого выбирается значение.
//   ЗначениеРеквизита - Строка - текущее значение в поле ввода.
//   ЗначениеРеквизитаID - Строка - текущее значение в поле ввода.
//   ЗначениеРеквизитаТип - Строка - текущее значение в поле ввода.
//   Оповещение - ОписаниеОповещения - вызывает процедуру формы, в которую передается выбранное значение.
//
Процедура ВыбратьЗначениеРеквизитаДО(Форма, Элемент, Типы, Представление, ЗначениеРеквизита,
		ЗначениеРеквизитаID, ЗначениеРеквизитаТип, Оповещение) Экспорт
	
	ПараметрыВыбратьЗначение = Новый Структура;
	ПараметрыВыбратьЗначение.Вставить("ТекстРедактирования", Элемент.ТекстРедактирования);
	ПараметрыВыбратьЗначение.Вставить("Представление", Представление);
	ПараметрыВыбратьЗначение.Вставить("ЗначениеРеквизита", ЗначениеРеквизита);
	ПараметрыВыбратьЗначение.Вставить("ЗначениеРеквизитаID", ЗначениеРеквизитаID);
	ПараметрыВыбратьЗначение.Вставить("ЗначениеРеквизитаТип", ЗначениеРеквизитаТип);
	ПараметрыВыбратьЗначение.Вставить("Оповещение", Оповещение);
	
	Если Типы.Количество() = 1 Тогда
		Если ТипЗнч(Типы) = Тип("Массив") Тогда
			Значение = Типы[0];
		Иначе
			Значение = Типы[0].Значение;
		КонецЕсли;
		ВыбратьЗначениеРеквизитаДОЗавершение(Значение, ПараметрыВыбратьЗначение);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыбратьЗначениеРеквизитаДОЗавершение",
			ЭтотОбъект,
			ПараметрыВыбратьЗначение);
		Если ТипЗнч(Типы) = Тип("Массив") Тогда
			СписокТипов = Новый СписокЗначений;
			СписокТипов.ЗагрузитьЗначения(Типы);
		Иначе
			СписокТипов = Типы;
		КонецЕсли;
		
		Форма.ПоказатьВыборИзСписка(ОписаниеОповещения, СписокТипов, Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Универсальный метод для выбора произвольного значения в поле ввода.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается команда.
//   Элемент - ПолеФормы - поле, куда должно быть помещено выбранное значение.
//   Тип - ОписаниеТипов - тип значения, которое требуется выбрать.
//   Представление - Строка - представление реквизита, для которого выбирается значение.
//   ЗначениеРеквизита - Произвольный - текущее значение в поле ввода.
//   Оповещение - ОписаниеОповещения - вызывает процедуру формы, в которую передается выбранное значение.
//
Процедура ВыбратьЗначениеРеквизитаИС(Форма, Элемент, Тип, Представление, ЗначениеРеквизита, Оповещение) Экспорт
	
	Типы = Тип.Типы();
	
	ПараметрыВыбратьЗначение = Новый Структура;
	ПараметрыВыбратьЗначение.Вставить("ОписаниеТипа", Тип);
	ПараметрыВыбратьЗначение.Вставить("ТекстРедактирования", Элемент.ТекстРедактирования);
	ПараметрыВыбратьЗначение.Вставить("Представление", Представление);
	ПараметрыВыбратьЗначение.Вставить("ЗначениеРеквизита", ЗначениеРеквизита);
	ПараметрыВыбратьЗначение.Вставить("Оповещение", Оповещение);
	
	Если Типы.Количество() = 1 Тогда
		ВыбратьЗначениеРеквизитаИСЗавершениеВыбораТипа(Типы[0], ПараметрыВыбратьЗначение);
	Иначе
		ОповещениеВыбратьЗначение = Новый ОписаниеОповещения(
			"ВыбратьЗначениеРеквизитаИСЗавершениеВыбораТипа",
			ЭтотОбъект,
			ПараметрыВыбратьЗначение);
		СписокТипов = Новый СписокЗначений;
		СписокТипов.ЗагрузитьЗначения(Типы);
		Форма.ПоказатьВыборИзСписка(ОповещениеВыбратьЗначение, СписокТипов, Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет подключаемую команду интеграции с 1С:Документооборотом из формы объекта или списка.
//
// Параметры:
//   Команда - КомандаФормы - вызванная команда.
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается команда.
//   Источник - ДанныеФормыСтруктура, ДанныеФормыКоллекция - данные, уточняющие параметр команды.
//
Процедура ВыполнитьПодключаемуюКомандуИнтеграции(Команда, Форма, Источник) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Команда", Команда);
	Параметры.Вставить("Форма", Форма);
	Параметры.Вставить("Источник", Источник);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьПодключаемуюКомандуИнтеграцииЗавершение",
		ЭтотОбъект,
		Параметры);
	ПроверитьПодключение(
		ОписаниеОповещения,,,
		Истина);
	
КонецПроцедуры

// Продолжает выполнение подключаемой команды интеграции после проверки подключения.
//
// Параметры:
//   Результат - Булево - Истина, если подключение успешно.
//   Параметры - Структура:
//     * Команда - КомандаФормы - вызванная команда.
//     * Форма - ФормаКлиентскогоПриложения - форма, из которой вызывается команда.
//     * Источник - ДанныеФормыСтруктура:
//         ** Ссылка - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый
//                - ДанныеФормыКоллекция
//
Процедура ВыполнитьПодключаемуюКомандуИнтеграцииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Команда = Параметры.Команда;
	Форма = Параметры.Форма;
	Источник = Параметры.Источник;
	
	Если ЕстьПодсистемаДО2() Тогда
		МодульИнтеграцияС1СДокументооборотКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияС1СДокументооборотКлиент");
		МодульИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграцииЗавершение(
			Команда,
			Форма,
			Источник);
	ИначеЕсли ЕстьПодсистемаДО3() Тогда
	
	КонецЕсли;
	
КонецПроцедуры

// Определяет, встроены ли в конфигурации модули БИД, предназначенные для интеграции с 1С:Документооборотом редакции 2.
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьПодсистемаДО2() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует(
		"ИнтеграцияС1СДокументооборотом.ИнтеграцияС1СДокументооборотомРедакции2");
	
КонецФункции

// Определяет, встроены ли в конфигурации модули БИД, предназначенные для интеграции с 1С:Документооборотом редакции 3.
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьПодсистемаДО3() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ПодсистемаСуществует(
		"ИнтеграцияС1СДокументооборотом.ИнтеграцияС1СДокументооборотомРедакции3");
	
КонецФункции

// Заполняет реквизиты формы по выбранному значению.
//
// Параметры:
//   Реквизит - Строка - строка с именем реквизита формы.
//   ВыбранноеЗначение - Строка, Структура - выбранное значение.
//   СтандартнаяОбработка - Булево - признак стандартной обработки выбора.
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, содержащая заполняемый реквизит.
//   ЭтоТаблица - Булево - признак, указывающий на то что заполнить требуется реквизит строки табличной части.
//   Элемент - ПолеФормы - поле табличной части, в которое пользователь вводит значение.
//
Процедура ОбработкаВыбораДанныхДляАвтоПодбора(Реквизит, ВыбранноеЗначение, СтандартнаяОбработка, ФормаВладелец,
		ЭтоТаблица = Ложь, Элемент = Неопределено) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		Если Не ЭтоТаблица Тогда
			ФормаВладелец[Реквизит] = ВыбранноеЗначение.name;
			ФормаВладелец[Реквизит + "ID"] = ВыбранноеЗначение.ID;
			ФормаВладелец[Реквизит + "Тип"] = ВыбранноеЗначение.type;
		Иначе
			Элемент.Родитель.ТекущиеДанные[Реквизит] = ВыбранноеЗначение.name;
			Элемент.Родитель.ТекущиеДанные[Реквизит + "ID"] = ВыбранноеЗначение.ID;
			Элемент.Родитель.ТекущиеДанные[Реквизит + "Тип"] = ВыбранноеЗначение.type;
		КонецЕсли;
		ФормаВладелец.Модифицированность = Истина;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		ПараметрыОповещения.Вставить("ЭтоТаблица", ЭтоТаблица);
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		
		Оповестить("Документооборот_ВыборДанныхДляАвтоПодбора",
			ПараметрыОповещения, ФормаВладелец);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Не ЭтоТаблица Тогда
			ФормаВладелец[Реквизит] = ВыбранноеЗначение;
		Иначе
			Элемент.Родитель.ТекущиеДанные[Реквизит] = ВыбранноеЗначение;
		КонецЕсли;
		ФормаВладелец.Модифицированность = Истина;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Реквизит", Реквизит);
		ПараметрыОповещения.Вставить("ЭтоТаблица", ЭтоТаблица);
		ПараметрыОповещения.Вставить("Элемент", Элемент);
		
		Оповестить("Документооборот_ВыборДанныхДляАвтоПодбора",
			ПараметрыОповещения, ФормаВладелец);
	КонецЕсли;
	
КонецПроцедуры

// Создает оповещение при добавлении связи на клиенте.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - тип XDTO объекта Документооборота.
//   СсылкаНаОбъект - ЛюбаяСсылка - ссылка на объект системы.
//
Процедура Оповестить_ДобавлениеСвязи(ID, Тип, СсылкаНаОбъект) Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ID", ID);
	ПараметрыОповещения.Вставить("Тип", Тип);
	ПараметрыОповещения.Вставить("Объект", СсылкаНаОбъект);
	
	Оповестить("Документооборот_ДобавлениеСвязи", ПараметрыОповещения);
	
КонецПроцедуры

// Создает оповещение при удалении связи на клиенте.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - тип XDTO объекта Документооборота.
//   СсылкаНаОбъект - ЛюбаяСсылка - ссылка на объект системы.
//
Процедура Оповестить_УдалениеСвязи(ID, Тип, СсылкаНаОбъект) Экспорт

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ID", ID);
	ПараметрыОповещения.Вставить("Тип", Тип);
	ПараметрыОповещения.Вставить("Объект", СсылкаНаОбъект);
	
	Оповестить("Документооборот_УдалениеСвязи", ПараметрыОповещения);
	
КонецПроцедуры

// Устанавливает отбор при выборе объекта ДО, связанного с объектом ИС.
//
// Параметры:
//   СвязываемыйОбъект - ЛюбаяСсылка - объект ИС, связываемый с объектом ДО.
//   ТипОбъектаДокументооборота - Строка - тип выбираемого объекта ДО.
//   ВидДокументаДО - Структура - заполняется для объектов ДО типа Документ:
//     * Значение - Строка - наименование вида документа
//     * ЗначениеID - Строка - идентификатор вида документа
//
// Возвращаемое значение:
//   Структура
//   Неопределено - структура отбора, накладываемого перед предъявлением пользователю.
//
Функция ОтборПриВыбореСвязанногоОбъекта(СвязываемыйОбъект, ТипОбъектаДокументооборота,
		ВидДокументаДО = Неопределено) Экспорт
	
	Отбор = Неопределено;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ПриУстановкеОтбораПриВыбореСвязанногоОбъекта(
		СвязываемыйОбъект,
		ТипОбъектаДокументооборота,
		Отбор);
	
	Если ЗначениеЗаполнено(ВидДокументаДО) Тогда
		Если Отбор = Неопределено Тогда
			Отбор = Новый Структура;
		КонецЕсли;
		Отбор.Вставить("documentType", ВидДокументаДО);
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

// Показывает вопрос "Да" / "Нет", принимая Esc и закрытие формы крестиком как ответ "Нет".
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия с
//     передачей параметра КодВозвратаДиалога.Да или КодВозвратаДиалога.Нет.
//   ТекстВопроса - Строка - текст задаваемого вопроса.
//   ТекстКнопкиДа - Строка - необязательный, текст кнопки "Да".
//   ТекстКнопкиНет - Строка - необязательный, текст кнопки "Нет".
//   КнопкаПоУмолчанию - РежимДиалогаВопрос - необязательный, кнопка по умолчанию.
//   Заголовок - Строка - необязательный, содержит заголовок окна вопроса.
//
Процедура ПоказатьВопросДаНет(ОписаниеОповещенияОЗавершении, ТекстВопроса,
	ТекстКнопкиДа = Неопределено, ТекстКнопкиНет = Неопределено,
	КнопкаПоУмолчанию = Неопределено, Заголовок = Неопределено) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоказатьВопросДаНетЗавершение",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент,
		ОписаниеОповещенияОЗавершении);
		
	Кнопки = Новый СписокЗначений;
	Если ТекстКнопкиДа = Неопределено Тогда
		Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Да'"));
	Иначе
		Кнопки.Добавить(КодВозвратаДиалога.ОК, ТекстКнопкиДа);
	КонецЕсли;
	Если ТекстКнопкиНет = Неопределено Тогда
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Нет'"));
	Иначе
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, ТекстКнопкиНет);
	КонецЕсли;
	
	Если КнопкаПоУмолчанию = Неопределено Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,,Заголовок);
	ИначеЕсли КнопкаПоУмолчанию = КодВозвратаДиалога.Да Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, КодВозвратаДиалога.ОК, Заголовок);
	ИначеЕсли КнопкаПоУмолчанию = КодВозвратаДиалога.Нет Тогда
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,, КодВозвратаДиалога.Отмена, Заголовок);
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение кнопки по умолчанию: %1'"),
			КнопкаПоУмолчанию);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после закрытия окна с вопросом "Да" / "Нет" и вызывает ранее переданный обработчик
// оповещения с передачей ответа пользователя.
//
// Параметры:
//   Результат - КодВозвратаДиалога - ответ пользователя,
//     КодВозвратаДиалога.ОК или КодВозвратаДиалога.Отмена.
//   ОписаниеОповещения - ОписаниеОповещения - описание вызываемого оповещения.
//
Процедура ПоказатьВопросДаНетЗавершение(Результат, ОписаниеОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет подключение к 1С:Документообороту, при необходимости запрашивая имя пользователя и пароль.
//
// Параметры:
//
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого после проверки подключения с параметром
//     типа Булево, Истина - в случае удачного подключения и Ложь в противном случае.
//   ФормаВладелец - Неопределено, ФормаКлиентскогоПриложения - форма, в которой следует вызвать повторную попытку
//     подключения, Неопределено, если подключение следует выполнить синхронно без повторений.
//   ИмяОбработчика - Неопределено, Строка - имя процедуры модуля формы, содержащей обработчик повторной попытки, или
//     Неопределено, если подключение следует выполнить синхронно.
//   ПовторноПоказыватьОкноАвторизации - Булево - Истина, если при отсутствии подключения необходимо
//     повторно показать окно авторизации, даже если оно было показано ранее.
//
Процедура ПроверитьПодключение(ОписаниеОповещения, ФормаВладелец = Неопределено,
		ИмяОбработчика = Неопределено, ПовторноПоказыватьОкноАвторизации = Ложь) Экспорт
	
	// Если получение пароля не требуется, сразу инициируем подключение обращением к версии сервиса.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПарольИзвестен() Тогда
		
		Таймаут = Неопределено;
		ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВерсияСервиса(Таймаут);
		
		Если ВерсияСервиса = "" Тогда // версия неизвестна, в процессе получения фоновым заданием
			
			Если ФормаВладелец <> Неопределено И ИмяОбработчика <> Неопределено Тогда // асинхронно
				ФормаВладелец.ПодключитьОбработчикОжидания(ИмяОбработчика, 1, Истина)
				
			Иначе // синхронная проверка, ждем завершения фонового задания
				
				ДатаВремяВызова = ТекущаяДата(); // Использование оправдано: расчет длительности.
				Пока ВерсияСервиса = "" И ТекущаяДата() - ДатаВремяВызова < Таймаут Цикл // Использование оправдано: расчет длительности.
					ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВерсияСервиса();
				КонецЦикла;
				
				Если ВерсияСервиса <> "" И ВерсияСервиса <> "0.0.0.0" Тогда // версия получена
					ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВерсияСервиса <> "0.0.0.0" Тогда // версия получена
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
			Возврат;
			
		КонецЕсли;
		
		Если Не ПовторноПоказыватьОкноАвторизации Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
			Возврат;
		КонецЕсли;
		
	КонецЕсли; // пароль известен
	
	ИмяПользователя = Неопределено;
	Пароль = Неопределено;
	ПарольСохранен = Неопределено;
	ИспользуетсяАутентификацияОС = Ложь;
	
	ПрочитатьНастройкиАвторизации(ИмяПользователя, ПарольСохранен, Пароль, ИспользуетсяАутентификацияОС);
	
	ТекстСообщенияОбОшибке = "";
	Если ИспользуетсяАутентификацияОС Тогда // проверим подключение с аутентификацией ОС
		
		Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПроверитьПодключение(
				"", "", ТекстСообщенияОбОшибке, Истина) Тогда
			ИспользуетсяАутентификацияОС = Ложь;
		КонецЕсли;
		
	ИначеЕсли ПовторноПоказыватьОкноАвторизации // проверим подключение с аутентификацией 1С:Предприятия
			И ИмяПользователя <> Неопределено
			И ПарольСохранен Тогда
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.
				ПроверитьПодключение(ИмяПользователя, Пароль, ТекстСообщенияОбОшибке) Тогда
			ПовторноПоказыватьОкноАвторизации = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользуетсяАутентификацияОС Тогда
		#Если ВебКлиент Тогда
		ИмяКомпьютера = Неопределено;
		#Иначе
		ИмяКомпьютера = ИмяКомпьютера();
		#КонецЕсли
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиИспользованияАутентификацииОС(
			ИмяКомпьютера,
			Истина);
		
	Иначе
		
		// Предлагаем окно авторизации, лишь если из контекста вызова известно, что пользователь явно
		// инициировал обращение к функционалу ДО.
		Если ПовторноПоказыватьОкноАвторизации
				Или ((ИмяПользователя = Неопределено Или Не ПарольСохранен) И Не АвторизацияПредложена()) Тогда
			
			СохранитьАвторизацияПредложена();
			
			ПараметрыФормыАвторизации = Новый Структура;
			ПараметрыФормыАвторизации.Вставить("ИмяПользователя", ИмяПользователя);
			ПараметрыФормыАвторизации.Вставить("ПарольСохранен", ПарольСохранен);
			ПараметрыФормыАвторизации.Вставить("Пароль", Пароль);
			ПараметрыФормыАвторизации.Вставить("АвтоматическийВызовПриПроверкеПодключения", Истина);
			
			ПараметрыПроверкиПодключения = Новый Структура;
			ПараметрыПроверкиПодключения.Вставить("ФормаВладелец", ФормаВладелец);
			ПараметрыПроверкиПодключения.Вставить("ИмяОбработчика", ИмяОбработчика);
			ПараметрыПроверкиПодключения.Вставить("ОписаниеОповещения", ОписаниеОповещения);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеПослеОкнаАвторизации",
				ЭтотОбъект, ПараметрыПроверкиПодключения);
			
			ФормаАвторизации = ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот", 
				ПараметрыФормыАвторизации,
				ФормаВладелец,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
			// В случае успешной аутентификации ОС форма не откроется.
			Если ФормаАвторизации = Неопределено Тогда
				ИспользуетсяАутентификацияОС = Истина;
				#Если ВебКлиент Тогда
				ИмяКомпьютера = Неопределено;
				#Иначе
				ИмяКомпьютера = ИмяКомпьютера();
				#КонецЕсли
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиИспользованияАутентификацииОС(
					ИмяКомпьютера,
					Истина);
			Иначе // открылась форма авторизации
				Возврат; // с асинхронным продолжением после нажатия ОК.
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьНастройкиАвторизацииВПараметрыСеанса(
		ИмяПользователя, Пароль, ИспользуетсяАутентификацияОС);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса();
	
	Таймаут = Неопределено;
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВерсияСервиса(Таймаут);
	
	Если ВерсияСервиса = "" Тогда // в процессе получения версии фоновым заданием
		
		Если ФормаВладелец <> Неопределено И ИмяОбработчика <> Неопределено Тогда // асинхронно
			ФормаВладелец.ПодключитьОбработчикОжидания(ИмяОбработчика, 1, Истина);
			Возврат;
			
		Иначе // синхронная проверка, ждем завершения фонового задания
			
			ДатаВремяВызова = ТекущаяДата(); // Использование оправдано: расчет длительности.
			Пока ВерсияСервиса = "" И ТекущаяДата() - ДатаВремяВызова < Таймаут Цикл // Использование оправдано: расчет длительности.
				ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ВерсияСервиса();
			КонецЦикла;
			
			Если ВерсияСервиса <> "" И ВерсияСервиса <> "0.0.0.0" Тогда  // версия получена
				ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВерсияСервиса <> "0.0.0.0" Тогда // версия получена
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
	
КонецПроцедуры

// Вызывается после закрытия окна авторизации. Вызывает обработчик, переданный вызвавшей формой.
//
// Параметры:
//   Результат - Булево - Истина, если в окне авторизации нажата ОК и подключение успешно.
//   Параметры - Структура:
//     ОписаниеОповещения - ОписаниеОповещения - обработчик вызвавшей формы.
//
Процедура ПроверитьПодключениеПослеОкнаАвторизации(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда // успех, настройки авторизации сохранены в параметрах сеанса
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Истина);
		
	Иначе // подключиться не удалось, или пользователь отказался от попытки авторизации
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УстановитьВерсиюСервисаВПараметрыСеанса("0.0.0.0");
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Получает имя пользователя и пароль для доступа к 1С:Документообороту.
// В веб-клиенте возвращается только имя пользователя. Только имя пользователя возвращается и
// тогда, когда в предыдущий раз настройки были сохранены в веб-клиенте или на другом компьютере.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   ПарольСохранен - Булево - Истина, если пароль сохранен пользователем.
//   Пароль - Строка - пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация ОС.
//
Процедура ПрочитатьНастройкиАвторизации(ИмяПользователя, ПарольСохранен, Пароль, ИспользуетсяАутентификацияОС) Экспорт
	
	Пароль = Неопределено;
	ЧастьПароляВИБ = Неопределено;
	ИмяВременногоФайла = Неопределено;
	ИспользуетсяАутентификацияОС = Ложь;
	
#Если ВебКлиент Тогда
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПрочитатьНастройкиАвторизации(ИмяПользователя,,,,,
		ИспользуетсяАутентификацияОС);
	ПарольСохранен = Ложь;
#Иначе
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПрочитатьНастройкиАвторизации(ИмяПользователя,
		ИмяКомпьютера(),
		ПарольСохранен,
		ЧастьПароляВИБ,
		ИмяВременногоФайла,
		ИспользуетсяАутентификацияОС);
#КонецЕсли
	
	Если ПарольСохранен Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		Попытка
			ТекстовыйДокумент.Прочитать(ИмяВременногоФайла);
			РазделенныйПароль = Новый Массив;
			РазделенныйПароль.Добавить(ЧастьПароляВИБ);
			РазделенныйПароль.Добавить(ТекстовыйДокумент.ПолучитьТекст());
			Пароль = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СобратьПароль(РазделенныйПароль);
			ПарольСохранен = (Пароль <> Неопределено);
		Исключение // файл удален или поврежден
			ПарольСохранен = Ложь;
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЗаписатьПредупреждение(
				НСтр("ru = 'Не найдены сохраненные учетные данные пользователя 1С:Документооборота'"));
		КонецПопытки;
		Если ПарольСохранен
			И ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЭтоПользовательЗаданияОбмена() Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиАвторизацииДляОбмена(ИмяПользователя, Пароль);
		КонецЕсли;
		
	Иначе // пароль не сохранен
		// Получим настройки из старого хранилища общих настроек, сохраним их в новом и удалим.
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ПрочитатьНастройкиАвторизацииИзХранилищаОбщихНастроек(
			ИмяПользователя, Пароль, ПарольСохранен);
		Если ИмяПользователя <> "" И ПарольСохранен = Истина Тогда
			СохранитьНастройкиАвторизации(ИмяПользователя, Пароль);
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ЭтоПользовательЗаданияОбмена() Тогда
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиАвторизацииДляОбмена(ИмяПользователя, Пароль);
			КонецЕсли;
#Если Не ВебКлиент Тогда
			// в веб-клиенте пароль не сохранился, и удаление преждевременно
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.УдалитьНастройкиАвторизацииИзХранилищаОбщихНастроек();
#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Запоминает факт показа окна авторизации, чтобы больше не беспокоить пользователя в пределах сеанса.
//
Процедура СохранитьАвторизацияПредложена() Экспорт
	
	Если ПараметрыПриложения["ИнтеграцияС1СДокументооборот.АвторизацияПредложена"] = Неопределено Тогда
		ПараметрыПриложения.Вставить("ИнтеграцияС1СДокументооборот.АвторизацияПредложена", Истина);
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентПереопределяемый.ПриСохраненииПредложенияАвторизации();
	
КонецПроцедуры

// Сохраняет имя пользователя и пароль для доступа к 1С:Документообороту.
// В веб-клиенте сохраняется только имя пользователя.
//
// Параметры:
//   ИмяПользователя - Строка - имя пользователя ДО.
//   Пароль - Строка - необязательный, пароль пользователя ДО.
//   ИспользуетсяАутентификацияОС - Булево - Истина, если используется аутентификация операционной системы.
//
Процедура СохранитьНастройкиАвторизации(ИмяПользователя, Пароль = "", ИспользуетсяАутентификацияОС = Ложь) Экспорт
	
#Если ВебКлиент Тогда
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиАвторизации(ИмяПользователя,
		Пароль,,,,
		ИспользуетсяАутентификацияОС);
#Иначе
	РазделенныйПароль = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.РазделитьПароль(Пароль);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	// В сеансе подключения к удаленному рабочему столу Windows каталог временных файлов может быть временным
	// подкаталогом, создаваемым на время сеанса. В этом случае создадим файл в общем каталоге пользователя.
	ПозицияОбщегоКаталога = СтрНайти(ВРег(ИмяВременногоФайла), "\TEMP\", НаправлениеПоиска.СКонца);
	Если ПозицияОбщегоКаталога <> 0 Тогда
		ПозицияПредпоследнегоРазделителя = ПозицияОбщегоКаталога + СтрДлина("\TEMP");
		ПозицияПоследнегоРазделителя = СтрНайти(ИмяВременногоФайла, "\", НаправлениеПоиска.СКонца);
		Если ПозицияПоследнегоРазделителя > ПозицияПредпоследнегоРазделителя Тогда
			ИмяВременногоФайла = Лев(ИмяВременногоФайла, ПозицияПредпоследнегоРазделителя - 1)
				+ Сред(ИмяВременногоФайла, ПозицияПоследнегоРазделителя);
		КонецЕсли;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(РазделенныйПароль[1]);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла);
	Файл = Новый Файл(ИмяВременногоФайла);
	Файл.УстановитьТолькоЧтение(Истина);
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.СохранитьНастройкиАвторизации(ИмяПользователя,
		Пароль,
		ИмяКомпьютера(),
		РазделенныйПароль[0],
		ИмяВременногоФайла,
		ИспользуетсяАутентификацияОС);
#КонецЕсли
	
КонецПроцедуры

// Открывает форму выбора объекта метаданных интегрированной системы.
//
// Параметры:
//   ТипОбъектаИС - Строка - текущий тип объекта метаданных интегрированной системы.
//   ОписаниеОповещения - ОписаниеОповещения - описание вызываемого оповещения.
//
Процедура ТипОбъектаИСНачалоВыбора(ТипОбъектаИС, ОписаниеОповещения) Экспорт
	
	ПараметрФормы = Новый Структура;
	ПараметрФормы.Вставить("ТекущаяСтрока", ТипОбъектаИС);
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборОбъектаМетаданных",
		ПараметрФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик оповещения "ВыбратьЗначениеРеквизитаИСЗавершениеВыбораТипа".
//
// Параметры:
//   ЗначениеТипа - Тип
//                - ЭлементСпискаЗначений
//   ПараметрыВыбратьЗначение - Структура:
//     * ОписаниеТипа - ОписаниеТипов
//     * ТекстРедактирования - Строка
//     * Представление - Строка
//     * ЗначениеРеквизита - Строка
//     * ЗначениеРеквизитаID - Строка
//     * ЗначениеРеквизитаТип - Строка
//     * Оповещение - ОписаниеОповещения
//
Процедура ВыбратьЗначениеРеквизитаДОЗавершение(ЗначениеТипа, ПараметрыВыбратьЗначение) Экспорт
	
	Если ТипЗнч(ЗначениеТипа) = Тип("ЭлементСпискаЗначений") Тогда
		ЗначениеТипа = ЗначениеТипа.Значение;
	КонецЕсли;
	
	Если ЗначениеТипа = "Строка" Тогда
		ПоказатьВводСтроки(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ТекстРедактирования,
			ПараметрыВыбратьЗначение.Представление,,
			Истина);
		
	ИначеЕсли ЗначениеТипа = "Число" Тогда
		ПоказатьВводЧисла(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			15,
			5);
		
	ИначеЕсли ЗначениеТипа = "Дата" Тогда
		ПоказатьВводДаты(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			ЧастиДаты.Дата);
		
	ИначеЕсли ЗначениеТипа = "ДатаВремя" Тогда
		ПоказатьВводДаты(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			ЧастиДаты.ДатаВремя);
		
	ИначеЕсли ЗначениеТипа = "Время" Тогда
		ПоказатьВводДаты(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			ЧастиДаты.Время);
		
	ИначеЕсли ЗначениеТипа = "Булево" Тогда
		ПоказатьВводЗначения(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			Тип("Булево"));
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеТипа) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТипОбъектаВыбора", ЗначениеТипа);
		Если ЗначениеЗаполнено(ПараметрыВыбратьЗначение.ЗначениеРеквизитаID)
				И ЗначениеТипа = ПараметрыВыбратьЗначение.ЗначениеРеквизитаТип Тогда
			ПараметрыФормы.Вставить("ВыбранныйЭлемент", ПараметрыВыбратьЗначение.ЗначениеРеквизитаID);
		КонецЕсли;
		
		Если ЗначениеТипа = "DMDocument" Или ЗначениеТипа = "DMCorrespondent" Или ЗначениеТипа = "DMMeeting" Тогда
			
			// объектов ДО потенциально много, нужен выбор поиском
			Отбор = Новый Структура;
			Если ЗначениеЗаполнено(ПараметрыВыбратьЗначение.ЗначениеРеквизита) Тогда
				Отбор.Вставить("name", СокрЛП(ПараметрыВыбратьЗначение.ЗначениеРеквизита));
				ПараметрыФормы.Вставить("ИскатьСразу", Ложь);
			КонецЕсли;
			ПараметрыФормы.Вставить("Отбор", Отбор);
			
			Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
			Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
				ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборОбъектаПоиском";
			ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
				ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот3.Форма.ВыборОбъектаПоиском";
			Иначе
				Возврат;
			КонецЕсли;
			
			ОткрытьФорму(ИмяФормы,
				ПараметрыФормы,
				ЭтотОбъект,
				Новый УникальныйИдентификатор,,,
				ПараметрыВыбратьЗначение.Оповещение,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		Иначе
			
			// обычный выбор из списка
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.ВыборИзСписка",
				ПараметрыФормы,
				ЭтотОбъект,
				Новый УникальныйИдентификатор,,,
				ПараметрыВыбратьЗначение.Оповещение,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения "ВыбратьЗначениеРеквизитаИСЗавершениеВыбораТипа".
//
// Параметры:
//   ЗначениеТипа - Тип
//                - ЭлементСпискаЗначений
//   ПараметрыВыбратьЗначение - Структура:
//     * ОписаниеТипа - ОписаниеТипов
//     * ТекстРедактирования - Строка
//     * Представление - Строка
//     * ЗначениеРеквизита - Произвольный
//     * Оповещение - ОписаниеОповещения
//
Процедура ВыбратьЗначениеРеквизитаИСЗавершениеВыбораТипа(ЗначениеТипа, ПараметрыВыбратьЗначение) Экспорт
	
	Если ЗначениеТипа = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ЗначениеТипа) = Тип("ЭлементСпискаЗначений") Тогда
		ЗначениеТипа = ЗначениеТипа.Значение;
	КонецЕсли;
	
	ОписаниеТипа = ПараметрыВыбратьЗначение.ОписаниеТипа;
	
	Если ЗначениеТипа = Тип("Строка") Тогда
		Если ОписаниеТипа.КвалификаторыСтроки.Длина = 0 Или ОписаниеТипа.КвалификаторыСтроки.Длина > 40 Тогда
			Многострочность = Истина;
		Иначе
			Многострочность = Ложь;
		КонецЕсли;
		
		ПоказатьВводСтроки(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ТекстРедактирования,
			ПараметрыВыбратьЗначение.Представление,
			ОписаниеТипа.КвалификаторыСтроки.Длина,
			Многострочность);
		
	ИначеЕсли ЗначениеТипа = Тип("Число") Тогда
		ПоказатьВводЧисла(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			ОписаниеТипа.КвалификаторыЧисла.Разрядность,
			ОписаниеТипа.КвалификаторыЧисла.РазрядностьДробнойЧасти);
		
	ИначеЕсли ЗначениеТипа = Тип("Дата") Тогда
		ПоказатьВводДаты(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			ОписаниеТипа.КвалификаторыДаты.ЧастиДаты);
		
	ИначеЕсли ЗначениеТипа = Тип("Булево") Тогда
		ПоказатьВводЗначения(
			ПараметрыВыбратьЗначение.Оповещение,
			ПараметрыВыбратьЗначение.ЗначениеРеквизита,
			ПараметрыВыбратьЗначение.Представление,
			Тип("Булево"));
		
	ИначеЕсли ЗначениеТипа <> Неопределено Тогда
		ИмяОбъекта = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяОбъектаМетаданныхПоТипу(
			ЗначениеТипа);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыВыбратьЗначение.ЗначениеРеквизита);
		ОткрытьФорму(ИмяОбъекта + ".ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,
			ПараметрыВыбратьЗначение.Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти