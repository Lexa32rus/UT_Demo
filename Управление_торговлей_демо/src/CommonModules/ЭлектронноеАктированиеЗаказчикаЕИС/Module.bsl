#Область ПрограммныйИнтерфейс

#Область ИнтеграцияСБЭД

// См. ПодключаемыеКомандыЭДОСобытия.ПриОпределенииСоставаКомандЭДО.
Процедура ПриОпределенииСоставаКомандЭДО(СоставКомандЭДО) Экспорт
	
	СоставКомандЭДО.Входящие.Добавить("Документ.АктПриемкиВходящийЕИС");
	
КонецПроцедуры

// Заполнить описание объекта учета.
// 
// Параметры:
//  ИсточникДанныхСсылка - СправочникСсылка, ДокументСсылка - ссылка на источник данных.
//  Описание - ТаблицаЗначений - см. ИнтеграцияЭДО.НовоеОписаниеОбъектаУчета.
// 
// Возвращаемое значение:
//  Булево - Истина, если это объект учета электронного актирования.
Функция ЗаполнитьОписаниеОбъектаУчета(ИсточникДанныхСсылка, Описание) Экспорт
	
	Результат = Ложь;
	
	Если НЕ ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ИсточникДанныхСсылка) = Тип("ДокументСсылка.АктПриемкиВходящийЕИС") Тогда

		СтрокаОписания = Описание.Добавить();
		
		СтрокаОписания.ОбъектУчета = ИсточникДанныхСсылка;
		
		Если ИсточникДанныхСсылка.ЭтоКорректировка Тогда
			СтрокаОписания.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУКД;
		Иначе
			СтрокаОписания.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДокументПриемкиЕИСУПД;
		КонецЕсли;
		
		СтрокаОписания.Направление = Перечисления.НаправленияЭДО.Входящий;
		СтрокаОписания.Контрагент = ИсточникДанныхСсылка.Контрагент;
		СтрокаОписания.Организация = ИсточникДанныхСсылка.Организация;
			
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСБСП

// См. СозданиеНаОснованииПереопределяемый.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании.
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Документы.АктПриемкиВходящийЕИС);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт

	Описание = Описание + "
	|РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков.Чтение.Организации
	|РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков.Изменение.Организации
	|";
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки обмена ЕИС для заказчика.
// 
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация заказчика.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Настройки обмена ЕИС заказчика.
Функция НастройкиОбменаЕИСЗаказчика(Организация) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменаЕИС.Организация КАК Организация,
	|	НастройкиОбменаЕИС.ТокенАвторизации КАК ТокенАвторизации,
	|	НастройкиОбменаЕИС.КодПоСПЗ КАК КодПоСПЗ,
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота КАК ИдентификаторУчастникаДокументооборота,
	|	НастройкиОбменаЕИС.ОбменВключен КАК ОбменВключен,
	|	ИСТИНА КАК ИспользоватьУПД,
	|	ИСТИНА КАК ИспользоватьУКД,
	|	НастройкиОбменаЕИС.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	НастройкиОбменаЕИС.ЛогинАльтернативнойИнтеграции,
	|	НастройкиОбменаЕИС.ПарольАльтернативнойИнтеграции
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков КАК НастройкиОбменаЕИС
	|ГДЕ
	|	НастройкиОбменаЕИС.Организация = &Организация";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выгрузить();
	
	Настройки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка[0]);
	
	Возврат Настройки;
	
КонецФункции

// Текст запроса по настройкам для получения входящих.
// 
// Возвращаемое значение:
//  Строка - Текст запроса по настройкам для получения входящих.
Функция ТекстЗапросаПоНастройкамДляПолученияВходящих() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаЕИС.Организация КАК Организация,
	|	НастройкиОбменаЕИС.ТокенАвторизации КАК ТокенАвторизации,
	|	НастройкиОбменаЕИС.КодПоСПЗ КАК КодПоСПЗ,
	|	НастройкиОбменаЕИС.ОбменВключен КАК ОбменВключен,
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота,
	|	НастройкиОбменаЕИС.ДатаПоследнегоПолученияДокументов КАК ДатаПоследнегоПолученияДокументов
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков КАК НастройкиОбменаЕИС";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса есть возможность отправки получения ЭД.
// 
// Возвращаемое значение:
//  Строка -- Текст запроса есть возможность отправки получения ЭД.
Функция ТекстЗапросаЕстьВозможностьОтправкиПолученияЭД() Экспорт
	
	ТекстЗапроса = "////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОбменаЕИСДляЗаказчиков.Организация,
	|	НастройкиОбменаЕИСДляЗаказчиков.ДатаПоследнегоПолученияДокументов,
	|	НастройкиОбменаЕИСДляЗаказчиков.ИдентификаторУчастникаДокументооборота,
	|	НастройкиОбменаЕИСДляЗаказчиков.КодПоСПЗ,
	|	НастройкиОбменаЕИСДляЗаказчиков.НаименованиеОрганизации,
	|	НастройкиОбменаЕИСДляЗаказчиков.ОбменВключен,
	|	НастройкиОбменаЕИСДляЗаказчиков.ТокенАвторизации
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков КАК НастройкиОбменаЕИСДляЗаказчиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС КАК
	|			ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС
	|		ПО ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС.Значение = ИСТИНА
	|ГДЕ
	|	НастройкиОбменаЕИСДляЗаказчиков.ОбменВключен = ИСТИНА";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса по настройкам заказчика.
// 
// Возвращаемое значение:
//  Строка - Текст запроса по настройкам заказчика.
Функция ТекстЗапросаПоНастройкамЗаказчика() Экспорт

	ТекстЗапросаПоНастройкамЗаказчика = "ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ОписанияОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
	|	ОписанияОбъектовУчета.Организация КАК Отправитель,
	|	ОписанияОбъектовУчета.Контрагент КАК Получатель,
	|	ОписанияОбъектовУчета.ДоговорКонтрагента КАК Договор,
	|	ОписанияОбъектовУчета.Направление КАК Направление,
	|	ОписанияОбъектовУчета.ТипДокумента КАК ТипДокумента,
	|	ВидыДокументовЭДО.Ссылка КАК ВидДокумента,
	|	ФорматыТиповДокументовЕИС.Формат КАК Формат,
	|	ЗНАЧЕНИЕ(Справочник.МаршрутыПодписания.ОднойДоступнойПодписью) КАК МаршрутПодписания,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСерверЕИС) КАК СпособОбмена,
	|	НастройкиОбменаЕИС.ИдентификаторУчастникаДокументооборота КАК ИдентификаторОтправителя,
	|	КонтрагентыЕИС.ИдентификаторУчастника КАК ИдентификаторПолучателя,
	|	ЛОЖЬ КАК ТребуетсяОтветнаяПодпись,
	|	ЛОЖЬ КАК ТребуетсяИзвещениеОПолучении,
	|	ЛОЖЬ КАК ВыгружатьДополнительныеСведения,
	|	ИСТИНА КАК ОбменБезПодписи,
	|	ИСТИНА КАК Формировать,
	|	ЛОЖЬ КАК ЗаполнениеКодаТовара
	|ИЗ
	|	ОписанияОбъектовУчета КАК ОписанияОбъектовУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (Константы.ИспользоватьЭлектронноеАктированиеЗаказчикаВЕИС = ИСТИНА)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
	|		ПО ОписанияОбъектовУчета.ТипДокумента = ВидыДокументовЭДО.ТипДокумента
	|		И ОписанияОбъектовУчета.ПрикладнойТипДокумента = ВидыДокументовЭДО.ПрикладнойТипДокумента
	|		И ОписанияОбъектовУчета.Направление <> &НаправлениеВнутренний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕИСДляЗаказчиков КАК НастройкиОбменаЕИС
	|		ПО ОписанияОбъектовУчета.Организация = НастройкиОбменаЕИС.Организация
	|		И НастройкиОбменаЕИС.ОбменВключен = ИСТИНА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрагентыЕИС КАК КонтрагентыЕИС
	|		ПО ОписанияОбъектовУчета.Контрагент = КонтрагентыЕИС.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФорматыТиповДокументовЕИС КАК ФорматыТиповДокументовЕИС
	|		ПО ФорматыТиповДокументовЕИС.ТипДокумента = ОписанияОбъектовУчета.ТипДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
	|		ПО ОписанияОбъектовУчета.ОбъектУчета = ОбъектыУчетаДокументовЭДО.ОбъектУчета
	|		И ВидыДокументовЭДО.Ссылка = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ВидДокумента
	|		И ОписанияОбъектовУчета.Контрагент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.Контрагент
	|		И ОписанияОбъектовУчета.ДоговорКонтрагента = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ДоговорКонтрагента";
	
	Возврат ТекстЗапросаПоНастройкамЗаказчика;
	
КонецФункции

// Найти создать документ приемки.
// См. ЭлектронноеАктированиеЕИСПолучениеВходящих.СохранитьДанныеОбъектаВБД.
Функция НайтиСоздатьДокументПриемки(ДеревоДляСовместимостиСБЭД, ДеревоРазбора, ПараметрыОбработки, НайденныйОбъект) Экспорт
	
	ДокументПриемки = НайденныйОбъект;
	
	ЭлектронныйДокумент = ПараметрыОбработки.ЭлектронныйДокумент;
	
	ИдентификаторДокумента = Прав(ПараметрыОбработки.ДанныеОсновногоФайла.ИмяФайла, 40);
	ИдентификаторДокумента = Лев(ИдентификаторДокумента, 36);
			
	Если НЕ ЗначениеЗаполнено(ДокументПриемки) Тогда
		РезультатПоиска = Документы.АктПриемкиВходящийЕИС.НайтиПоРеквизиту(
			"ИдентификаторДокумента", ИдентификаторДокумента);
		Если НЕ ЗначениеЗаполнено(РезультатПоиска) Тогда
			ДокументОбъект = Документы.АктПриемкиВходящийЕИС.СоздатьДокумент();
			ДокументОбъект.ИдентификаторДокумента = ИдентификаторДокумента;
		Иначе
			ДокументОбъект = РезультатПоиска.ПолучитьОбъект();
		КонецЕсли;
	Иначе
		ДокументОбъект = ДокументПриемки.ПолучитьОбъект();
	КонецЕсли;
	
	ДокументОбъект.ДатаЭлектронногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоРазбора, "ДатаДокумента");
	ДокументОбъект.НомерЭлектронногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			ДеревоРазбора, "НомерДокумента");
	ДокументОбъект.Организация = ПараметрыОбработки.Получатель;
	ДокументОбъект.Контрагент = ПараметрыОбработки.Отправитель;
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	
	ЗаполнитьАктПриемкиНаОснованииПриложения(ДокументОбъект, ЭлектронныйДокумент);
	
	ДокументОбъект.Записать();
	
	Если НЕ ЗначениеЗаполнено(ДокументПриемки) Тогда
		ДокументПриемки = ДокументОбъект.Ссылка;
	КонецЕсли;
	
	ИзвлечьПриложенияДокументаПриемки(ЭлектронныйДокумент, ДокументПриемки);
	
	Возврат ДокументПриемки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗначениеВКоллекцию(Значение)
	
	Возврат ЭлектронноеАктированиеЕИС.ЗначениеВКоллекцию(Значение);
	
КонецФункции

Процедура ЗаполнитьАктПриемкиНаОснованииПриложения(ДокументОбъект, ЭлектронныйДокумент)
	
	СодержимоеПакетаДокумента = СодержимоеПакетаЭлектронногоДокумента(ЭлектронныйДокумент);
	
	Если НЕ ЗначениеЗаполнено(СодержимоеПакетаДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеФайла = Новый ЧтениеXML;
	ЧтениеФайла.УстановитьСтроку(СодержимоеПакетаДокумента);
	ДанныеПакета = ФабрикаXDTO.ПрочитатьXML(ЧтениеФайла);
	ЧтениеФайла.Закрыть();
	
	ДанныеПриложения = Base64Значение(ДанныеПакета.Прилож.Контент);
	ТекстПриложения = ПолучитьСтрокуИзДвоичныхДанных(
		ДанныеПриложения, ЭлектронноеАктированиеЕИС.КодировкаТекстаСервисаЕИС());
		
	ЧтениеФайла = Новый ЧтениеXML;
	ЧтениеФайла.УстановитьСтроку(ТекстПриложения);
	ЧтениеФайла.Прочитать();
	
	ЭтоКорректировка = Ложь;
	Если ЧтениеФайла.Имя = ЭлектронноеАктированиеЕИС.ИмяТипаXDTOПриложениеУКДПродавца() Тогда
		ЭтоКорректировка = Истина;
	КонецЕсли;
	
	ДокументОбъект.ЭтоКорректировка = ЭтоКорректировка;
	
	ЧтениеФайла.ПервоеОбъявление();
	ДанныеПриложения = ФабрикаXDTO.ПрочитатьXML(ЧтениеФайла);
	
	Если ЭтоКорректировка Тогда
		УзелДанныхПоТРУ = "ТРУ";
	Иначе
		// BSLLS:Typo-off
		УзелДанныхПоТРУ = "СведТРУ";
		// BSLLS:Typo-on
	КонецЕсли;
	
	СведенияОТоварах = ЗначениеВКоллекцию(ДанныеПриложения.СведТов[УзелДанныхПоТРУ]);
	
	ТипЧисло = Тип("Число");
	// Заполняем табличную часть.
	ДокументОбъект.ТРУОбъектовЗакупки.Очистить();
	// BSLLS:Typo-off
	Для Каждого СтрокаСведенийОТоварах Из СведенияОТоварах Цикл
		НоваяСтрока = ДокументОбъект.ТРУОбъектовЗакупки.Добавить();

		Если ЕстьСвойство(СтрокаСведенийОТоварах, "НедеталТРУ") ИЛИ ЭтоКорректировка Тогда

			Если ЭтоКорректировка Тогда
				ДанныеТовараБезДетализации = СтрокаСведенийОТоварах;
				НоваяСтрока.КодТовараДляЕИС = ДанныеТовараБезДетализации.КодТов;
			Иначе
				ДанныеТовараБезДетализации = СтрокаСведенийОТоварах.НедеталТРУ;
			КонецЕсли;
			
			НоваяСтрока.Идентификатор = ДанныеТовараБезДетализации.ИдТРУ;
			НоваяСтрока.Наименование = ДанныеТовараБезДетализации.НаимТовИсх;
			
			Если ЕстьСвойство(ДанныеТовараБезДетализации, "НеЛПСвед") Тогда
				
				НеЛПСвед = ДанныеТовараБезДетализации.НеЛПСвед;
				
				Если НЕ ЭтоКорректировка Тогда
					
					Если ЕстьСвойство(НеЛПСвед, "ЦенаИзКонтСНДС") Тогда
						ЦенаИзКонтракта = XMLЗначение(ТипЧисло, НеЛПСвед.ЦенаИзКонтСНДС);
					Иначе
						ЦенаИзКонтракта = 0;
					КонецЕсли;
					
					НоваяСтрока.ЦенаСНДС = ЦенаИзКонтракта;
					
					НоваяСтрока.ОбъемРаботыУслуги = ЗначениеНеобязательногоСвойства(НеЛПСвед, "ОбРабУсл");
					
				Иначе
					
					Если ЕстьСвойство(НеЛПСвед, "ЦенаСНДС") И ЕстьСвойство(НеЛПСвед.ЦенаСНДС, "ДоИзм") Тогда
						НоваяСтрока.ЦенаСНДС = XMLЗначение(ТипЧисло, НеЛПСвед.ЦенаСНДС.ДоИзм);
						НоваяСтрока.ЦенаСНДСПослеИзменения =
							XMLЗначение(ТипЧисло, НеЛПСвед.ЦенаСНДС.ПослеИзм);
					КонецЕсли;
					
					Если ЕстьСвойство(НеЛПСвед, "ОбРабУсл") Тогда
						НоваяСтрока.ОбъемРаботыУслуги = НеЛПСвед.ОбРабУсл.ДоИзм;
						НоваяСтрока.ОбъемРаботыУслугиПослеИзменения = НеЛПСвед.ОбРабУсл.ПослеИзм;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			// Сведения о детализированных ТРУ
		КонецЕсли;
		
	КонецЦикла;
	
	// BSLLS:Typo-on
	
КонецПроцедуры

// Содержимое пакета электронного документа.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Электронный документ
// 
// Возвращаемое значение:
//  Строка - Содержимое пакета электронного документа.
Функция СодержимоеПакетаЭлектронногоДокумента(ЭлектронныйДокумент)

	ЗапросПоКонтейнерам = Новый Запрос;
	ЗапросПоКонтейнерам.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПакетЭДПрисоединенныеФайлы.Ссылка КАК ПрисоединенныеФайлПакета,
	|	ПакетЭДПрисоединенныеФайлы.Наименование КАК ПрисоединенныеФайлПакетаНаименование,
	|	СообщениеЭДО.ЭлектронныйДокумент КАК ЭДПрисоединенныеФайл,
	|	ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер КАК ТранспортныйКонтейнер,
	|	ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.Ссылка КАК ФайлКонтейнера
	|ИЗ
	|	Документ.СообщениеЭДО КАК СообщениеЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыТранспортныхКонтейнеровЭДО КАК ОбъектыТранспортныхКонтейнеровЭДО
	|		ПО (СообщениеЭДО.Ссылка = ОбъектыТранспортныхКонтейнеровЭДО.Объект)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК ПакетЭДПрисоединенныеФайлы
	|		ПО (СообщениеЭДО.Ссылка = ПакетЭДПрисоединенныеФайлы.ВладелецФайла)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы КАК
	|			ТранспортныйКонтейнерЭДОПрисоединенныеФайлы
	|		ПО (ОбъектыТранспортныхКонтейнеровЭДО.ТранспортныйКонтейнер = ТранспортныйКонтейнерЭДОПрисоединенныеФайлы.ВладелецФайла)
	|ГДЕ
	|	СообщениеЭДО.ЭлектронныйДокумент.Ссылка = &ЭлектронныйДокумент
	|	И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаРегламента";
	
	ЗапросПоКонтейнерам.УстановитьПараметр("ТипЭлементаРегламента", Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	ЗапросПоКонтейнерам.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Контейнеры = ЗапросПоКонтейнерам.Выполнить().Выгрузить();
	Если Контейнеры.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Контейнер = Контейнеры[0].ФайлКонтейнера;
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(Контейнер);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	
	СодержимоеПакета = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные, 
		ЭлектронноеАктированиеЕИС.КодировкаТекстаСервисаЕИС());
		
	Возврат СодержимоеПакета;
	
КонецФункции

// Извлечь приложения документа приемки.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Электронный документ.
//  ДокументПриемки - ДокументСсылка.АктПриемкиВходящийЕИС - Документ приемки.
Процедура ИзвлечьПриложенияДокументаПриемки(ЭлектронныйДокумент, ДокументПриемки)

	СодержимоеПакета = СодержимоеПакетаЭлектронногоДокумента(ЭлектронныйДокумент);
	
	ЧтениеФайла = Новый ЧтениеXML;
	ЧтениеФайла.УстановитьСтроку(СодержимоеПакета);
	ДанныеКонтейнера = ФабрикаXDTO.ПрочитатьXML(ЧтениеФайла);
	ЧтениеФайла.Закрыть();
	
	Если НЕ ЭлектронноеАктированиеЕИС.ЕстьСвойство(ДанныеКонтейнера, "Вложен") Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ЭлектронноеАктированиеЕИС.НастройкиОбменаЕИСЗаказчика(ДокументПриемки.Организация);
	Если ЗначениеЗаполнено(Настройки) Тогда
		Токен = Настройки.ТокенАвторизации;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не определены настройки подключения к личному кабинету ЕИС заказчика.'");
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("user_token", Токен);
	ПараметрыЗагрузкиФайла = Новый Структура("ФорматОтвета", 2);
	ПараметрыЗагрузкиФайла.Вставить("Заголовки", Заголовки);
	
	Для Каждого Вложение Из ЗначениеВКоллекцию(ДанныеКонтейнера.Вложен) Цикл
		
		Если ЕстьСвойство(Вложение, "Ссылка") Тогда
			Ссылка = Вложение.Ссылка;
		ИначеЕсли ЕстьСвойство(Вложение, "Ссылк") Тогда
			Ссылка = Вложение.Ссылк;
		КонецЕсли;
		
		РезультатЗагрузки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
			Ссылка, , , ПараметрыЗагрузкиФайла);
		Если НЕ ЗначениеЗаполнено(РезультатЗагрузки.КодОшибки) Тогда
			
			// Добавляем вложение в присоединенные файлы документа.
			Содержимое = РезультатЗагрузки.Содержимое;
			
			ИмяРасширениеФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Вложение.ИмяФайл);
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.Автор = Пользователи.АвторизованныйПользователь();
			ПараметрыФайла.ВладелецФайлов = ДокументПриемки;
			ПараметрыФайла.ИмяБезРасширения = ИмяРасширениеФайла.Имя;
			ПараметрыФайла.РасширениеБезТочки = ИмяРасширениеФайла.Расширение;
			АдресДанных = ПоместитьВоВременноеХранилище(Содержимое);
			
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресДанных);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьСвойство(Данные, Имя)
	
	Возврат ЭлектронноеАктированиеЕИС.ЕстьСвойство(Данные, Имя);
	
КонецФункции

Функция ЗначениеНеобязательногоСвойства(Данные,
		ИмяСвойства,
		ПривестиКТипу = "",
		ЗначениеПоУмолчанию = Неопределено)
	
	Возврат ЭлектронноеАктированиеЕИС.ЗначениеНеобязательногоСвойства(
		Данные, ИмяСвойства, ПривестиКТипу, ЗначениеПоУмолчанию);
	
КонецФункции

#КонецОбласти