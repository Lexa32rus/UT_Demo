#Область ПрограммныйИнтерфейс

Функция ПолучитьСопоставлениеРеквизитовИСвойствJSON(ТипДокумента) Экспорт
	
	КвалификаторКоличество = Новый КвалификаторыЧисла(15, 3);
	КвалификаторДенежнаяСумма = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный);
	КвалификаторДенежнаяСуммаЛюбойЗнак = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	
	РеквизитыДокумента = Новый ТаблицаЗначений();
	РеквизитыДокумента.Колонки.Добавить("Адрес");
	РеквизитыДокумента.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(40)));
	РеквизитыДокумента.Колонки.Добавить("ОписаниеТипа");
	РеквизитыДокумента.Колонки.Добавить("НеОтображать", Новый ОписаниеТипов("Булево"));
	РеквизитыДокумента.Колонки.Добавить("НетНаПечатнойФорме", Новый ОписаниеТипов("Булево"));
	
	Если ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.УПД") Тогда
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "СчетФактура.Номер", "НомерДокумента", Новый ОписаниеТипов("Строка"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "СчетФактура.Дата", "ДатаДокумента", Новый ОписаниеТипов("Дата",,,КвалификаторДаты));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Продавец.Наименование", "Продавец", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Покупатель.Наименование", "Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Грузоотправитель.Наименование", "Грузоотправитель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Грузополучатель.Наименование.Наименование", "Грузополучатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "ОснованиеПередачи.Основание", "Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Склад", "Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), , Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Продавец.Наименование", "ПродавецОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Покупатель.Наименование", "ПокупательОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.ВсегоКОплате.Стоимость", "ИтогоСумма", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.ВсегоКОплате.СуммаНДС", "ИтогоСуммаНДС", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.ВсегоКОплате.Всего", "ИтогоВсего", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		
		// Прочие реквизиты
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Продавец.ИНН", "ИННКПППродавца", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Покупатель.ИНН", "ИННКПППокупателя", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Партнер", "Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "СоглашениеСКлиентом", "СоглашениеСКлиентом", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "СоглашениеСПоставщиком", "СоглашениеСПоставщиком", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Подразделение", "Подразделение",Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "ВидДокумента", "ВидДокумента", Новый ОписаниеТипов("Строка"),, Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "ОснованиеПередачи.Основание.НомерДоговора", "НомерДоговора", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "ОснованиеПередачи.Основание.ДатаДоговора", "ДатаДоговора", Новый ОписаниеТипов("Дата",,,КвалификаторДаты), Истина);
		
		// Таблица
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ТоварНаименование", "Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Количество", "Количество", Новый ОписаниеТипов("Число", КвалификаторКоличество));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ЕдиницаИзмерения", "ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Цена", "Цена", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Стоимость", "Сумма", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.СтавкаНДС", "СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.СуммаНДС", "СуммаНДС", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Всего", "Всего", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ПредставлениеСтраны", "СтранаПроисхождения", Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ПредставлениеГТД", "НомерГТД", Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ТоварКод", "Артикул", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ЕдиницаИзмеренияКод", "КодЕдиницыИзмерения", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.СтранаПроисхожденияКод", "КодСтраныПроисхождения", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ТоварНаименование", "Содержание", Новый ОписаниеТипов("Строка"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Характеристика", "Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	    ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ТПодразделение", "ТПодразделение", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Серия", "Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"), Истина);
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ТСклад", "ТСклад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.СтатьяДоходов", "СтатьяДоходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.СтатьяРасходов", "СтатьяРасходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Статья", "Статья", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов, ПланВидовХарактеристикСсылка.СтатьиРасходов, ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));

	ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.ТОРГ12") Тогда
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "ТаблицаТоварнаяНакладная.НомерДокумента", "НомерДокумента", Новый ОписаниеТипов("Строка"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "ТаблицаТоварнаяНакладная.ДатаСоставления", "ДатаДокумента", Новый ОписаниеТипов("Дата",,,КвалификаторДаты));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерПоставщик.ПредставлениеПоставщика.Наименование", "Продавец", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерПлательщик.ПредставлениеПлательщика.Наименование", "Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерИнформацияОбОрганизации.КонтейнерОрганизация.ПредставлениеОрганизации.Наименование", "Грузоотправитель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерГрузополучатель.ПредставлениеГрузополучателя.Наименование", "Грузополучатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));

		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерОснование.Основание", "Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Склад", "Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), , Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерПоставщик.ПредставлениеПоставщика.Наименование", "ПродавецОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерПлательщик.ПредставлениеПлательщика.Наименование", "ПокупательОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Всего по накладной.СуммаБезНДС", "ИтогоСумма", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Всего по накладной.СуммаНДС", "ИтогоСуммаНДС", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Всего по накладной.СуммаСНДС", "ИтогоВсего", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		
		// Прочие реквизиты
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерПоставщик.ПредставлениеПоставщика.ИНН", "ИННПродавца", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерПлательщик.ПредставлениеПлательщика.ИНН", "ИННПокупателя", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Партнер", "Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "СоглашениеСКлиентом", "СоглашениеСКлиентом", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "СоглашениеСПоставщиком", "СоглашениеСПоставщиком", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Подразделение", "Подразделение",Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"),,Истина);	
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "ВидДокумента", "ВидДокумента", Новый ОписаниеТипов("Строка"),, Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерИнформацияОбОрганизации.КонтейнерОрганизация.ПредставлениеОрганизации.ИНН", "ИННГрузоотправителя", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерГрузополучатель.ПредставлениеГрузополучателя.ИНН", "ИННГрузополучателя", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерОснование.Основание.НомерДоговора", "НомерДоговора", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерОснование.Основание.ДатаДоговора", "ДатаДоговора", Новый ОписаниеТипов("Дата",,,КвалификаторДаты), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерПоставщик.ПредставлениеПоставщика.КПП", "КПППродавца", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерПлательщик.ПредставлениеПлательщика.КПП", "КПППокупателя", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерИнформацияОбОрганизации.КонтейнерОрганизация.ПредставлениеОрганизации.КПП", "КППГрузоотправителя", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "КонтейнерГрузополучатель.ПредставлениеГрузополучателя.КПП", "КППГрузополучателя", Новый ОписаниеТипов("Строка"), Истина);
		
		// Таблица
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.НаименованиеТовара", "Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.КоличествНетто", "Количество", Новый ОписаниеТипов("Число", КвалификаторКоличество));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.наименование", "ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Цена", "Цена", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СуммаБезНДС", "Сумма", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СтавкаНДС", "СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СуммаНДС", "СуммаНДС", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СуммаСНДС", "Всего", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.код", "Артикул", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.кодПоОКЕИ", "КодЕдиницыИзмерения", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.НаименованиеТовара", "Содержание", Новый ОписаниеТипов("Строка"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Характеристика", "Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	    ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.ТПодразделение", "ТПодразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Серия", "Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"),Истина);	
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.ТСклад", "ТСклад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СтатьяДоходов", "СтатьяДоходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СтатьяРасходов", "СтатьяРасходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Статья", "Статья", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов, ПланВидовХарактеристикСсылка.СтатьиРасходов, ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));

	ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетФактура") Тогда
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Номер_к.Номер", "НомерДокумента", Новый ОписаниеТипов("Строка"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Номер_к.Дата", "ДатаДокумента", Новый ОписаниеТипов("Дата",,,КвалификаторДаты));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Продавец_к.ПредставлениеПоставщика", "Продавец", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Покупатель_к.ПредставлениеПокупателя", "Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Грузоотправитель_к.ПредставлениеГрузоотправителя", "Грузоотправитель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Грузополучатель_к.ПредставлениеГрузополучателя.Наименование", "Грузополучатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Договор", "Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Склад", "Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), , Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Продавец_к.ПредставлениеПоставщика", "ПродавецОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Покупатель_к.ПредставлениеПокупателя", "ПокупательОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.НадписьВсего.Стоимость", "ИтогоСумма", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.НадписьВсего.СуммаНДС", "ИтогоСуммаНДС", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.НадписьВсего.Всего", "ИтогоВсего", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		
		// Прочие реквизиты
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Продавец_к.ИННПоставщика", "ИННКПППродавца", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Покупатель_к.ИННПокупателя", "ИННКПППокупателя", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Партнер", "Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "СоглашениеСКлиентом", "СоглашениеСКлиентом", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "СоглашениеСПоставщиком", "СоглашениеСПоставщиком", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Подразделение", "Подразделение",Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"),,Истина);
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "ВидДокумента", "ВидДокумента", Новый ОписаниеТипов("Строка"),, Истина);

		// Таблица
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ТоварНаименование", "Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Количество", "Количество", Новый ОписаниеТипов("Число", КвалификаторКоличество));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ЕдиницаИзмерения", "ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Цена", "Цена", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Стоимость", "Сумма", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.СтавкаНДС", "СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.СуммаНДС", "СуммаНДС", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Всего", "Всего", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ПредставлениеСтраны", "СтранаПроисхождения", Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ПредставлениеГТД", "НомерГТД", Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ЕдиницаИзмеренияКод", "КодЕдиницыИзмерения", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.СтранаПроисхожденияКод", "КодСтраныПроисхождения", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ТоварНаименование", "Содержание", Новый ОписаниеТипов("Строка"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ТоварКод", "Артикул", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Характеристика", "Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	    ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ТПодразделение", "ТПодразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	    ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Серия", "Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"), Истина);	
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.ТСклад", "ТСклад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.СтатьяДоходов", "СтатьяДоходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.СтатьяРасходов", "СтатьяРасходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица_1.Строка.Статья", "Статья", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов, ПланВидовХарактеристикСсылка.СтатьиРасходов, ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));

	ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг") Тогда
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Заголовок.Номер", "НомерДокумента", Новый ОписаниеТипов("Строка"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Заголовок.Дата", "ДатаДокумента", Новый ОписаниеТипов("Дата",,,КвалификаторДаты));
		
		//КонтейнерПоставщик.ПредставлениеПоставщика
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Исполнитель.Реквизиты.Наименование", "Продавец", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		//КонтейнерПлательщик.ПредставлениеПлательщика
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Заказчик.Реквизиты.Наименование", "Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
		//НетНаПечатнойФорме
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Грузоотправитель", "Грузоотправитель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"), Истина, Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Грузополучатель", "Грузополучатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"), Истина, Истина);
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Основание.Наименование", "Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		
		//НетНаПечатнойФорме
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Склад", "Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), Истина, Истина);
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Исполнитель.Реквизиты.Наименование", "ПродавецОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Заказчик.Реквизиты.Наименование", "ПокупательОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Итог.Итого", "ИтогоСумма", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Итог.НДС", "ИтогоСуммаНДС", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Сумма.Значение", "ИтогоВсего", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		
		// Прочие реквизиты
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Исполнитель.Реквизиты.ИНН", "ИННПродавца", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Заказчик.Реквизиты.ИНН", "ИННПокупателя", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Партнер", "Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "СоглашениеСКлиентом", "СоглашениеСКлиентом", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "СоглашениеСПоставщиком", "СоглашениеСПоставщиком", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Подразделение", "Подразделение",Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"),,Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "ВидДокумента", "ВидДокумента", Новый ОписаниеТипов("Строка"),, Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Основание.Наименование.НомерДоговора", "НомерДоговора", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Основание.Наименование.ДатаДоговора", "ДатаДоговора", Новый ОписаниеТипов("Дата",,,КвалификаторДаты), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Итог.ВТомЧислеНДС", "СуммаВключаетНДС", Новый ОписаниеТипов("Булево"));
	   
		// Таблица
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Наименование", "Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Количество", "Количество", Новый ОписаниеТипов("Число", КвалификаторКоличество));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Единиц", "ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Цена", "Цена", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Сумма", "Сумма", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		
		//НетНаПечатнойФорме
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СтавкаНДС", "СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"), , Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СуммаНДС", "СуммаНДС", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма), , Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СуммаСНДС", "Всего", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма), , Истина);
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Артикул", "Артикул", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Наименование", "Содержание", Новый ОписаниеТипов("Строка"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Характеристика", "Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.ТПодразделение", "ТПодразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СтатьяДоходов", "СтатьяДоходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СтатьяРасходов", "СтатьяРасходов", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
        ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Статья", "Статья", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов, ПланВидовХарактеристикСсылка.СтатьиРасходов, ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));

	ИначеЕсли ТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату") Тогда
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Заголовок.Номер", "НомерДокумента", Новый ОписаниеТипов("Строка"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Заголовок.Дата", "ДатаДокумента", Новый ОписаниеТипов("Дата",,,КвалификаторДаты));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "БанковскиеРеквизиты.Получатель.Наименование.НаименованиеОрганизации", "Продавец", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Заказчик.Реквизиты.Наименование", "Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "БанковскиеРеквизиты.Получатель.КПП.Номер", "КПППродавца", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Заказчик.Реквизиты.КПП", "КПППокупателя", Новый ОписаниеТипов("Строка"), Истина);
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Основание.Наименование", "Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "СрокОплаты.Дата", "СрокОплаты", Новый ОписаниеТипов("Дата",,,КвалификаторДаты));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "БанковскиеРеквизиты.Получатель.Наименование.НаименованиеОрганизации", "ПродавецОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Заказчик.Реквизиты.Наименование", "ПокупательОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Итог.Итого", "ИтогоСумма", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Итог.НДС", "ИтогоСуммаНДС", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Итог.Всего", "ИтогоВсего", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		
		// Прочие реквизиты
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "БанковскиеРеквизиты.Получатель.ИНН.Номер", "ИННПродавца", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Заказчик.Реквизиты.ИНН", "ИННПокупателя", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Основание.Наименование.НомерДоговора", "НомерДоговора", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Основание.Наименование.ДатаДоговора", "ДатаДоговора", Новый ОписаниеТипов("Дата",,,КвалификаторДаты), Истина);
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Исполнитель.Реквизиты.Наименование", "Исполнитель", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Исполнитель.Реквизиты.ИНН", "ИННИсполнителя", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Исполнитель.Реквизиты.КПП", "КППИсполнителя", Новый ОписаниеТипов("Строка"), Истина);
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Итог.Скидка.Сумма", "ИтогоСуммаСкидки", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСуммаЛюбойЗнак), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "БанковскиеРеквизиты.Получатель.Счет.Номер", "БанковскийСчетКонтрагента", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаКонтрагентов"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "БанковскиеРеквизиты.Получатель.Счет.Номер", "БанковскийСчетОрганизации", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "БанковскиеРеквизиты.Банк.Наименование.НаименованиеБанка", "БанкНаименование", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "БанковскиеРеквизиты.Банк.СчётБанка.Номер", "БанкСчет", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "БанковскиеРеквизиты.Банк.БИК.Номер", "Банк", Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Итог.ВТомЧислеНДС", "СуммаВключаетНДС", Новый ОписаниеТипов("Булево"));
	 		// Таблица
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Товары", "Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Количество", "Количество", Новый ОписаниеТипов("Число", КвалификаторКоличество));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Единицы", "ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Цена", "Цена", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Сумма", "Сумма", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СуммаСкидки", "СуммаСкидки", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		
		//НетНаПечатнойФорме
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.ПроцентСкидки", "ПроцентСкидки", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма), , Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СтавкаНДС", "СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"), , Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СуммаНДС", "СуммаНДС", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма), , Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.СуммаСНДС", "Всего", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма), , Истина);
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Артикул", "Артикул", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Таблица1.Строка.Товары", "Содержание", Новый ОписаниеТипов("Строка"));
		
	Иначе // Универсальный документ
		
		// См. Документы.РаспознанныйДокумент.ПравилаОбработкиСущностей
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_0", "НомерДокумента", Новый ОписаниеТипов("Строка"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_1", "ДатаДокумента", Новый ОписаниеТипов("Дата",,,КвалификаторДаты));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_2", "Продавец", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_3", "Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_4", "Грузоотправитель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_5", "Грузополучатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_6", "Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_7", "Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"), , Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_8", "ПродавецОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_9", "ПокупательОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_10", "ИтогоСумма", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_11", "ИтогоСуммаНДС", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_12", "ИтогоВсего", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_13", "ИННПродавца", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_14", "ИННПокупателя", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_15", "НомерДоговора", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_16", "ДатаДоговора", Новый ОписаниеТипов("Дата",,,КвалификаторДаты), Истина);
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_17", "Исполнитель", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_18", "ИННИсполнителя", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_19", "КППИсполнителя", Новый ОписаниеТипов("Строка"), Истина);
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_20", "ИтогоСуммаСкидки", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСуммаЛюбойЗнак), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_21", "БанковскийСчетКонтрагента", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаКонтрагентов"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_22", "БанковскийСчетОрганизации", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_23", "БанкСчет", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_24", "Банк", Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков"), Истина);
		
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_25", "СуммаВключаетНДС", Новый ОписаниеТипов("Булево"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Р_26", "ВидСкидки", Новый ОписаниеТипов("Число"));
		
		// Таблица
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_0", "Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_1", "Количество", Новый ОписаниеТипов("Число", КвалификаторКоличество));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_2", "ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_3", "Цена", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_4", "Сумма", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_5", "СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_6", "СуммаНДС", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_7", "Всего", Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_8", "СтранаПроисхождения", Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_9", "НомерГТД", Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_10", "Артикул", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_11", "КодЕдиницыИзмерения", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_12", "КодСтраныПроисхождения", Новый ОписаниеТипов("Строка"), Истина);
		ДобавитьСоответствиеРеквизита(РеквизитыДокумента, "Т_1.Строка.Р_13", "Содержание", Новый ОписаниеТипов("Строка"));
		
	КонецЕсли;
	
	РаспознаваниеДокументовПереопределяемый.ПриСопоставленииРеквизитовДокумента(ТипДокумента, РеквизитыДокумента);
	
	Возврат РеквизитыДокумента;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗаполненнаяТаблицаДокумента(ДокументОбъект) Экспорт
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("ПорядокСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	Если ДокументОбъект.РеквизитыТабличныхЧастей.Количество() = 0 Тогда
		Возврат ТаблицаРезультат;
	КонецЕсли;
	
	ОписаниеДоступныхТипов = ОпределяемыеТипыРаспознаваемыеРеквизитыДокументаБРД();
	КвалификаторЧислаБРД = ОписаниеДоступныхТипов.КвалификаторыЧисла;
	КвалификаторСтрокиБРД = ОписаниеДоступныхТипов.КвалификаторыСтроки;
	КвалификаторДатыБРД = ОписаниеДоступныхТипов.КвалификаторыДаты;
	
	Если ДокументОбъект.РеквизитыТабличныхЧастей[0].СтрокаУдалена Тогда
		Отбор = Новый Структура("СтрокаУдалена", Ложь);
		НайденныеЗаписи = ДокументОбъект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		Если НайденныеЗаписи.Количество() = 0 Тогда
			// Все строки удалены.
		Иначе
			ИзменяемаяСтрока = ТаблицаРезультат.Добавить();
			ИзменяемаяСтрока.ПорядокСтроки = НайденныеЗаписи[0].ПорядокСтроки;
			ИзменяемаяСтрока.НомерСтроки = НайденныеЗаписи[0].НомерСтрокиТЧ;
		КонецЕсли;
	Иначе
		ИзменяемаяСтрока = ТаблицаРезультат.Добавить();
		ИзменяемаяСтрока.ПорядокСтроки = ДокументОбъект.РеквизитыТабличныхЧастей[0].ПорядокСтроки;
		ИзменяемаяСтрока.НомерСтроки = ДокументОбъект.РеквизитыТабличныхЧастей[0].НомерСтрокиТЧ;
	КонецЕсли;

	Для Каждого Запись Из ДокументОбъект.РеквизитыТабличныхЧастей Цикл
		Если ТаблицаРезультат.Колонки.Найти(Запись.ИмяРеквизита) = Неопределено Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Запись.Значение));
			ТипКолонки = Новый ОписаниеТипов(МассивТипов, КвалификаторЧислаБРД, КвалификаторСтрокиБРД, КвалификаторДатыБРД);
			
			ТаблицаРезультат.Колонки.Добавить(Запись.ИмяРеквизита, ТипКолонки);
		КонецЕсли;
		
		Если Запись.СтрокаУдалена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИзменяемаяСтрока.НомерСтроки <> Запись.НомерСтрокиТЧ Тогда
			
			Отбор = Новый Структура("НомерСтроки", Запись.НомерСтрокиТЧ);
			НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ИзменяемаяСтрока = ТаблицаРезультат.Добавить();
				Если Запись.ПорядокСтроки = 0 Тогда
					ИзменяемаяСтрока.ПорядокСтроки = Запись.НомерСтрокиТЧ;
				Иначе
					ИзменяемаяСтрока.ПорядокСтроки = Запись.ПорядокСтроки;
				КонецЕсли;
				ИзменяемаяСтрока.НомерСтроки = Запись.НомерСтрокиТЧ;
			Иначе
				ИзменяемаяСтрока = НайденныеСтроки[0];
			КонецЕсли;
			
		КонецЕсли;
		
		// ИзменяемаяСтрока определен
		ИзменяемаяСтрока[Запись.ИмяРеквизита] = Запись.Значение;
	КонецЦикла;
	
	ТаблицаРезультат.Сортировать("ПорядокСтроки");
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Процедура СохранитьТаблицуДокумента(ДокументОбъект, ТаблицаДокумента) Экспорт
	
	// Собираем информацию о добавленных и удаленных строках
	ИзмененныеСтроки = Новый Массив;
	ДобавленныеСтроки = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		Если СтрокаТаблицы.НомерСтроки = 0 Тогда
			ДобавленныеСтроки.Добавить(СтрокаТаблицы);
		Иначе
			ИзмененныеСтроки.Добавить(СтрокаТаблицы.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним ключи у добавленных строк
	Если ДобавленныеСтроки.Количество() <> 0 Тогда
		МаксимальныйНомерСтроки = 0;
		Для Каждого СтрокаТЧ Из ДокументОбъект.РеквизитыТабличныхЧастей Цикл
			Если СтрокаТЧ.НомерСтрокиТЧ > МаксимальныйНомерСтроки Тогда
				МаксимальныйНомерСтроки = СтрокаТЧ.НомерСтрокиТЧ;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
			МаксимальныйНомерСтроки = МаксимальныйНомерСтроки + 1;
			ДобавленнаяСтрока.НомерСтроки = МаксимальныйНомерСтроки;
		КонецЦикла;
	КонецЕсли;
	
	// Помечаем удаленными из РеквизитыТабличныхЧастей строки, удаленные в ТаблицаДокумента
	ТекущийИндекс = ДокументОбъект.РеквизитыТабличныхЧастей.Количество();
	Пока ТекущийИндекс > 0 Цикл
		ТекущийИндекс = ТекущийИндекс - 1;
		СтрокаТЧ = ДокументОбъект.РеквизитыТабличныхЧастей[ТекущийИндекс];
		Если ИзмененныеСтроки.Найти(СтрокаТЧ.НомерСтрокиТЧ) = Неопределено Тогда
			СтрокаТЧ.СтрокаУдалена = Истина;
			СтрокаТЧ.ПорядокСтроки = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокумента.Сортировать("НомерСтроки");
	ИзмененнаяСтрока = ТаблицаДокумента[0];
	
	Для Каждого ИзменяемаяЗапись Из ДокументОбъект.РеквизитыТабличныхЧастей Цикл
		
		Если ИзменяемаяЗапись.СтрокаУдалена Тогда
			// Строка помечена как удаленная.
			Продолжить;
		КонецЕсли;
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТаблицаДокумента.Колонки, ИзменяемаяЗапись.ИмяРеквизита) Тогда
			// В измененной таблице не найдена колонка текущей изменяемой записи
			// Такую запись не нужно обновлять.
			Продолжить;
		КонецЕсли;
		
		Если ИзмененнаяСтрока.НомерСтроки <> ИзменяемаяЗапись.НомерСтрокиТЧ Тогда
			
			НуженПоискСтроки = (ТаблицаДокумента.Количество() < ИзменяемаяЗапись.НомерСтрокиТЧ);
			
			Если Не НуженПоискСтроки Тогда
				ИзмененнаяСтрока = ТаблицаДокумента[ИзменяемаяЗапись.НомерСтрокиТЧ - 1];
				Если ИзмененнаяСтрока.НомерСтроки <> ИзменяемаяЗапись.НомерСтрокиТЧ Тогда
					
					НуженПоискСтроки = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НуженПоискСтроки Тогда
				
				Отбор = Новый Структура("НомерСтроки", ИзменяемаяЗапись.НомерСтрокиТЧ);
				НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() = 0 Тогда
					// Встретили запись, которая не отображена в таблицу документа
					// Такую запись не нужно обновлять.
					Продолжить;
				Иначе
					ИзмененнаяСтрока = НайденныеСтроки[0];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// ИзмененнаяСтрока определена
		
		ИзменяемаяЗапись.Значение = ИзмененнаяСтрока[ИзменяемаяЗапись.ИмяРеквизита];
		ИзменяемаяЗапись.ПорядокСтроки = ИзмененнаяСтрока.ПорядокСтроки;
		
		ИмяРеквизита = ИзменяемаяЗапись.ИмяРеквизита + "ЗаполненоВручную";
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТаблицаДокумента.Колонки, ИмяРеквизита) Тогда
			 ИзменяемаяЗапись.ЗаполненоВручную = ИзмененнаяСтрока[ИмяРеквизита];
		КонецЕсли;
		
		ИмяРеквизита = ИзменяемаяЗапись.ИмяРеквизита + "ЭлементСоздан";
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТаблицаДокумента.Колонки, ИмяРеквизита) Тогда
			 ИзменяемаяЗапись.ЭлементСоздан = ИзмененнаяСтрока[ИмяРеквизита];
		КонецЕсли;
		
	КонецЦикла;
	
	// Записать добавленные строки
	
	Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
		
		Для Каждого Колонка Из ТаблицаДокумента.Колонки Цикл
			
			ИмяРеквизита = Колонка.Имя;
			
			Если ИмяРеквизита = "НомерСтроки"
				Или ИмяРеквизита = "ПорядокСтроки"
				Или СтрЗаканчиваетсяНа(ИмяРеквизита, "ЗаполненоВручную") 
				Или СтрЗаканчиваетсяНа(ИмяРеквизита, "ЭлементСоздан") Тогда
				
				Продолжить;
			КонецЕсли;
			
			ИзменяемаяЗапись = ДокументОбъект.РеквизитыТабличныхЧастей.Добавить();
			ИзменяемаяЗапись.НомерСтрокиТЧ = ДобавленнаяСтрока.НомерСтроки;
			ИзменяемаяЗапись.ИмяРеквизита = ИмяРеквизита;
			ИзменяемаяЗапись.Значение = ДобавленнаяСтрока[ИмяРеквизита];
			ИзменяемаяЗапись.ЗаполненоВручную = Истина;
			ИзменяемаяЗапись.ПорядокСтроки = ДобавленнаяСтрока.ПорядокСтроки;
			
			ИмяРеквизита = ИзменяемаяЗапись.ИмяРеквизита + "ЭлементСоздан";
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТаблицаДокумента.Колонки, ИмяРеквизита) Тогда
				 ИзменяемаяЗапись.ЭлементСоздан = ДобавленнаяСтрока[ИмяРеквизита];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//// Запишем данные ТаблицаДокумента в ДокументОбъект
	//ПорядокСтроки = 0;
	//Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
	//	ПорядокСтроки = ПорядокСтроки + 1;
	//	НомерСтроки = СтрокаТаблицы.НомерСтроки;
	//	
	//	Для Каждого Колонка Из ТаблицаДокумента.Колонки Цикл
	//		
	//		ИмяРеквизита = Колонка.Имя;
	//		
	//		Если ИмяРеквизита = "НомерСтроки" ИЛИ ИмяРеквизита = "ПорядокСтроки" Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		ЭтоКолонкаЗаполненоВручную = Ложь;
	//		Если СтрЗаканчиваетсяНа(ИмяРеквизита, "ЗаполненоВручную") Тогда
	//			ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "ЗаполненоВручную", "");
	//			ЭтоКолонкаЗаполненоВручную = Истина;
	//		КонецЕсли;
	//		
	//		Отбор = Новый Структура("НомерСтрокиТЧ, ИмяРеквизита", НомерСтроки, ИмяРеквизита);
	//		НайденныеСтроки = ДокументОбъект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
	//		
	//		Если ЭтоКолонкаЗаполненоВручную Тогда
	//			Если НайденныеСтроки.Количество() <> 0 Тогда
	//				ИзменяемаяЗапись = НайденныеСтроки[0];
	//				ИзменяемаяЗапись.ЗаполненоВручную = СтрокаТаблицы[ИмяРеквизита + "ЗаполненоВручную"];
	//			КонецЕсли;
	//		Иначе
	//			Если НайденныеСтроки.Количество() <> 0 Тогда
	//				ИзменяемаяЗапись = НайденныеСтроки[0];
	//				ИзменяемаяЗапись.Значение = СтрокаТаблицы[ИмяРеквизита];
	//				ИзменяемаяЗапись.ПорядокСтроки = ПорядокСтроки;
	//			Иначе
	//				ИзменяемаяЗапись = ДокументОбъект.РеквизитыТабличныхЧастей.Добавить();
	//				ИзменяемаяЗапись.НомерСтрокиТЧ = НомерСтроки;
	//				ИзменяемаяЗапись.ИмяРеквизита = ИмяРеквизита;
	//				ИзменяемаяЗапись.Значение = СтрокаТаблицы[ИмяРеквизита];
	//				ИзменяемаяЗапись.ПорядокСтроки = ПорядокСтроки;
	//			КонецЕсли;
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//КонецЦикла;
	
КонецПроцедуры

Функция ЗагрузкаРаспознанныхДокументов(АдресРезультата) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		КлючЗадания = "ЗагрузкаРаспознанныхДокументов" + XMLСтрока(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	Иначе
		КлючЗадания = "ЗагрузкаРаспознанныхДокументов";
	КонецЕсли;
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(АдресРезультата);
	
	УстановитьПривилегированныйРежим(Истина);
	Отбор = Новый Структура("Ключ, Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно);
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор); 
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Задания.Количество() <> 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ФоновыеЗадания.Выполнить("РаспознаваниеДокументов.ЗагрузитьРаспознанныеДокументы", ПараметрыЗадания,
			КлючЗадания, НСтр("ru = 'Загрузка распознанных документов'"));
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Невозможно выполнить фоновое задание с ключом: %1
			           |Описание ошибки:
			           |%2'"),
			КлючЗадания,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			РаспознаваниеДокументов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстОшибки);
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ФоновоеСозданиеНоменклатуры(Параметры, АдресРезультата) Экспорт
	
	ПараметрыСозданияНоменклатуры = Параметры[0];
	
	Результат = Новый Массив;
	
	Процент = 0;
	Количество = 0;
	КоличествоВсего = ПараметрыСозданияНоменклатуры.Количество();
	
	Для Каждого ПараметрыСоздания Из ПараметрыСозданияНоменклатуры Цикл
		
		Количество = Мин(Количество + 1, КоличествоВсего);
		
		Процент = Окр(100 * Количество / КоличествоВсего);
		Текст = "" + Количество + "/" + КоличествоВсего;
		ДлительныеОперации.СообщитьПрогресс(Процент, Текст);
		
		ИмеющийсяДубль = НайтиДубльНоменклатуры(ПараметрыСоздания, ПараметрыСозданияНоменклатуры);
		Если ИмеющийсяДубль = Неопределено Тогда
			
			СозданнаяНоменклатура = НоваяНоменклатураПоПараметрам(ПараметрыСоздания);
			Если СозданнаяНоменклатура = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			СозданнаяНоменклатура = ИмеющийсяДубль;
		КонецЕсли;
		
		ПараметрыСоздания.Ссылка = СозданнаяНоменклатура;
		
		ВозвращаемыеСвойства = Новый Структура();
		ВозвращаемыеСвойства.Вставить("ИдентификаторИсходнойСтроки", ПараметрыСоздания.ИдентификаторИсходнойСтроки);
		ВозвращаемыеСвойства.Вставить("Номенклатура", СозданнаяНоменклатура);
		
		Результат.Добавить(ВозвращаемыеСвойства);
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#Область ОбновлениеВерсииИБ

Процедура ВключениеРаспознаванияДокументов() Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("БРД_РаспознаваниеДокументовПодсистемы") Тогда
		Возврат; //Пользователи расширения включают функциональность сами, при переходе
	КонецЕсли;
	
	Если РаспознаваниеДокументов.АккаунтАвторизован() Тогда
		Возврат; // Если была авторизация ранее, то не выполнять действий включения.
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИспользоватьРаспознаваниеДокументов.Установить(Истина);
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ВключитьОбменССервисомРаспознаванияДокументов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПланыОбмена.ОбменССервисомРаспознаванияДокументов.СоздатьУзлыСервисаРаспознаванияДокументов();
	
	Если Константы.ИспользоватьРаспознаваниеДокументов.Получить() = Истина Тогда
		УстановитьПараметрРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.ОбменССервисомРаспознаванияДокументов,
			"Использование",
			Истина
		);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновлениеРаспознанныхДокументов() Экспорт
	
	Попытка
	
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	РаспознанныйДокумент.Ссылка КАК Ссылка,
			|	РаспознанныйДокумент.Дата КАК Дата,
			|	РаспознанныйДокумент.Статус КАК Статус,
			|	РаспознанныйДокумент.КоличествоОшибок КАК КоличествоОшибок,
			|	РаспознанныйДокумент.КоличествоОшибокВТаблицах КАК КоличествоОшибокВТаблицах,
			|	РаспознанныйДокумент.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения
			|ИЗ
			|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
			|ГДЕ
			|	РаспознанныйДокумент.ДатаПоследнегоИзменения = &ПустаяДата
			|	ИЛИ РаспознанныйДокумент.КоличествоОшибок = 0
			|	ИЛИ РаспознанныйДокумент.КоличествоОшибокВТаблицах = 0";
		
		Запрос.Параметры.Вставить("ПустаяДата", Дата('00010101'));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Актуализация кеша количества проблем
			Если Выборка.Статус <> Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка
				И (Выборка.КоличествоОшибок = 0 Или Выборка.КоличествоОшибокВТаблицах = 0) Тогда
				
				ТаблицаПроблем = ПроблемныеРеквизиты(ДокументОбъект);
				ДокументОбъект.КоличествоОшибок = ТаблицаПроблем.Количество();
				ДокументОбъект.КоличествоОшибокВТаблицах = ДокументОбъект.КоличествоОшибок
					- ТаблицаПроблем.Скопировать(Новый Структура("НомерСтроки", 0), "ИмяРеквизита").Количество();
				
			КонецЕсли;
			
			// Заполнение наиболее актуальной известной датой
			Если Не ЗначениеЗаполнено(Выборка.ДатаПоследнегоИзменения) Тогда
				ДокументОбъект.ДатаПоследнегоИзменения = ДокументОбъект.Дата;
			КонецЕсли;
			
			// Запись
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		КонецЦикла;
	
	Исключение
		ЗаписьЖурналаРегистрации(
			РаспознаваниеДокументов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.РаспознанныйДокумент,
			ДокументОбъект.Ссылка,
			СтрШаблон(
				НСтр("ru = 'Не удалось выполнить обновление данных'"),
				ПодробноеПредставлениеОшибки(ОписаниеОшибки())
			)
		);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

Процедура УстановитьПараметрРегламентногоЗадания(Знач МетаданныеРегламентногоЗадания, Знач ИмяПараметра, Знач ЗначениеПараметра) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", МетаданныеРегламентногоЗадания);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() = 0 Тогда
		ПараметрыЗадания.Вставить(ИмяПараметра, ЗначениеПараметра);
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		ПараметрыЗадания = Новый Структура(ИмяПараметра, ЗначениеПараметра);
		Для Каждого Задание Из СписокЗаданий Цикл
			РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьСозданныйДокументИзРаспознанногоДокументаБРДОбработчик(Источник, ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Основание")
		И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.РаспознанныйДокумент") Тогда
		
		МетаданныеОбъекта = Источник.Метаданные();
		ЕстьТаблицаУслуг = НЕ МетаданныеОбъекта.ТабличныеЧасти.Найти("Услуги") = Неопределено;
		ЕстьДоходы = НЕ МетаданныеОбъекта.ТабличныеЧасти.Найти("Доходы") = Неопределено;	
		ЕстьРасходы = НЕ МетаданныеОбъекта.ТабличныеЧасти.Найти("Расходы") = Неопределено;	
		
		Если (Не ЕстьДоходы Или Не ЕстьРасходы) И ДанныеЗаполнения.Свойство("ДокументОснование") Тогда 
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения); 
		
		НДСВключен = Ложь;
	
		Если ЕстьТаблицаУслуг Тогда
			Для Каждого ДанныеСтроки Из ДанныеЗаполнения.УслугиРаботы Цикл
				СтрокаУслуга = Источник.Услуги.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУслуга, ДанныеСтроки);
				НДСВключен = ДанныеСтроки.Сумма = ДанныеСтроки.Всего;
			КонецЦикла;
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ИтогоСуммаНДС) Тогда
				Источник.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			Иначе
				Источник.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС
			КонецЕсли;
		ИначеЕсли НЕ МетаданныеОбъекта.ТабличныеЧасти.Найти("Товары") = Неопределено Тогда
			Для Каждого ДанныеСтроки Из ДанныеЗаполнения.ТоварыУслуги Цикл
				ЗаполнитьЗначенияСвойств(Источник.Товары.Добавить(), ДанныеСтроки);
				НДСВключен = ДанныеСтроки.Сумма = ДанныеСтроки.Всего;
			КонецЦикла;	
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ИтогоСуммаНДС) Или НДСВключен Тогда
				Источник.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			Иначе
				Источник.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС
			КонецЕсли
		ИначеЕсли ЕстьДоходы Тогда
			Для Каждого ДанныеСтроки Из ДанныеЗаполнения.ТоварыУслуги Цикл
				ЗаполнитьЗначенияСвойств(Источник.Доходы.Добавить(), ДанныеСтроки);
				НДСВключен = ДанныеСтроки.Сумма = ДанныеСтроки.Всего;
			КонецЦикла;  
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ИтогоСуммаНДС) Или НДСВключен Тогда
				Источник.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
			Иначе
				Источник.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС
			КонецЕсли;
		ИначеЕсли ЕстьРасходы Тогда
			 Для Каждого ДанныеСтроки Из ДанныеЗаполнения.ТоварыУслуги Цикл
				ЗаполнитьЗначенияСвойств(Источник.Расходы.Добавить(), ДанныеСтроки);
				НДСВключен = ДанныеСтроки.Сумма = ДанныеСтроки.Всего;  
				Если ЗначениеЗаполнено(ДанныеЗаполнения.ИтогоСуммаНДС) Или НДСВключен Тогда
					Источник.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
				Иначе
					Источник.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС
				 КонецЕсли;
			 КонецЦикла;
		КонецЕсли;
		
		//Если Не ЕстьРасходы И Не ЕстьТаблицаУслуг  Тогда 
		//	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Источник.Склад);
		//	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Источник.Склад, СкладГруппа, Источник.ТоварыУслуги, Ложь);
		//КонецЕсли;
		
		Источник.ЦенаВключаетНДС = НДСВключен;
		
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСРаспознаннымДокументом

Функция ДоступныеОрганизации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьДанныеДляСпискаВыбора(Документ, ДанныеТаблицы = Ложь) Экспорт
	
	Если ДанныеТаблицы Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.ИмяРеквизита КАК ИмяРеквизита,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.ПорядковыйНомер КАК ПорядковыйНомер,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.Значение КАК Значение,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.ДополнительноеЗначение КАК ДополнительноеЗначение,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.Уверенность КАК Уверенность,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.НайденВТаблицеСоответствий КАК НайденВТаблицеСоответствий
		|ИЗ
		|	РегистрСведений.СписокВыбораТабличныхЧастейРаспознаваниеДокументов КАК СписокВыбораТабличныхЧастейРаспознаваниеДокументов
		|ГДЕ
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.РаспознанныйДокумент = &РаспознанныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	НайденВТаблицеСоответствий УБЫВ,
		|	Уверенность УБЫВ"
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СписокВыбораРеквизитовРаспознаваниеДокументов.ИмяРеквизита КАК ИмяРеквизита,
		|	СписокВыбораРеквизитовРаспознаваниеДокументов.ПорядковыйНомер КАК ПорядковыйНомер,
		|	СписокВыбораРеквизитовРаспознаваниеДокументов.Значение КАК Значение,
		|	СписокВыбораРеквизитовРаспознаваниеДокументов.ДополнительноеЗначение КАК ДополнительноеЗначение,
		|	СписокВыбораРеквизитовРаспознаваниеДокументов.Уверенность КАК Уверенность,
		|	СписокВыбораРеквизитовРаспознаваниеДокументов.НайденВТаблицеСоответствий КАК НайденВТаблицеСоответствий
		|ИЗ
		|	РегистрСведений.СписокВыбораРеквизитовРаспознаваниеДокументов КАК СписокВыбораРеквизитовРаспознаваниеДокументов
		|ГДЕ
		|	СписокВыбораРеквизитовРаспознаваниеДокументов.РаспознанныйДокумент = &РаспознанныйДокумент
		|	И (НЕ СписокВыбораРеквизитовРаспознаваниеДокументов.Значение ССЫЛКА Справочник.Организации
		|			ИЛИ СписокВыбораРеквизитовРаспознаваниеДокументов.Значение В (&ДоступныеОрганизации))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НайденВТаблицеСоответствий УБЫВ,
		|	Уверенность УБЫВ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("РаспознанныйДокумент", Документ);
	Запрос.УстановитьПараметр("ДоступныеОрганизации", ДоступныеОрганизации());
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура ПриФормированииДанныхТабличныхЧастей(Документ, ИмяТаблицы, АдресJSON, ДанныеСтрок) Экспорт
	
	Если Документ.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12 И ИмяТаблицы = "ТаблицаТоварнаяНакладная" Тогда
		АдресJSON = ИмяТаблицы + ".";
		ИмяТаблицы = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначенияВыбораЗначенийТаблицыДокумента(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.НомерСтрокиТЧ КАК НомерСтроки,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.ИмяРеквизита КАК ИмяРеквизита,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.Значение КАК Значение,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.ДополнительноеЗначение КАК ДополнительноеЗначение,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.Уверенность КАК Уверенность,
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.НайденВТаблицеСоответствий КАК НайденВТаблицеСоответствий
		|ИЗ
		|	РегистрСведений.СписокВыбораТабличныхЧастейРаспознаваниеДокументов КАК СписокВыбораТабличныхЧастейРаспознаваниеДокументов
		|ГДЕ
		|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.РаспознанныйДокумент = &Документ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НайденВТаблицеСоответствий УБЫВ,
		|	Уверенность УБЫВ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();

	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//	|	РаспознанныйДокументРеквизитыТабличныхЧастей.НомерСтрокиТЧ КАК НомерСтроки,
	//	|	РаспознанныйДокументРеквизитыТабличныхЧастей.ИмяРеквизита КАК ИмяРеквизита,
	//	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Значение КАК ТипизирующееЗначение,
	//	|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.Значение КАК Значение,
	//	|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.ДополнительноеЗначение КАК ДополнительноеЗначение,
	//	|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.Уверенность КАК Уверенность,
	//	|	СписокВыбораТабличныхЧастейРаспознаваниеДокументов.НайденВТаблицеСоответствий КАК НайденВТаблицеСоответствий
	//	|ИЗ
	//	|	Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК РаспознанныйДокументРеквизитыТабличныхЧастей
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписокВыбораТабличныхЧастейРаспознаваниеДокументов КАК СписокВыбораТабличныхЧастейРаспознаваниеДокументов
	//	|		ПО РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка = СписокВыбораТабличныхЧастейРаспознаваниеДокументов.РаспознанныйДокумент
	//	|			И РаспознанныйДокументРеквизитыТабличныхЧастей.НомерСтрокиТЧ = СписокВыбораТабличныхЧастейРаспознаваниеДокументов.НомерСтрокиТЧ
	//	|			И РаспознанныйДокументРеквизитыТабличныхЧастей.ИмяРеквизита = СписокВыбораТабличныхЧастейРаспознаваниеДокументов.ИмяРеквизита
	//	|ГДЕ
	//	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка = &Документ
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	НайденВТаблицеСоответствий УБЫВ,
	//	|	Уверенность УБЫВ";
	//
	//Запрос.УстановитьПараметр("Документ", Документ);
	//
	//РезультатЗапроса = Запрос.Выполнить();
	//Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура ДобавитьВариантыНайденныеПоискомПоНесколькимРеквизитам(ДокументОбъект, ДокументСсылка) Экспорт
	
	ИдентификаторРезультата = ДокументОбъект.ИдентификаторРезультата;
	
	ОбъединяемыеРеквизиты = Новый Массив;
	ОбъединяемыеРеквизиты.Добавить("Наименование");
	ОбъединяемыеРеквизиты.Добавить("НаименованиеПолное");
	ПараметрыОбъединенияРеквизитов = Новый Структура("Наименование", ОбъединяемыеРеквизиты);
	
	// Продавец
	РеквизитыПоискаКонтрагентОрганизация = Новый Структура();
	
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Продавец", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		Наименование = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(НайденнаяСтрока.РаспознанныйТекст);
		РеквизитыПоискаКонтрагентОрганизация.Вставить("Наименование", Наименование);
	КонецЕсли;
	
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ИННКПППродавца", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		ДобавитьИННКПП(РеквизитыПоискаКонтрагентОрганизация, НайденнаяСтрока.РаспознанныйТекст);
	КонецЕсли;
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ИННПродавца", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		РеквизитыПоискаКонтрагентОрганизация.Вставить("ИНН", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
	КонецЕсли;
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("КПППродавца", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		РеквизитыПоискаКонтрагентОрганизация.Вставить("КПП", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
	КонецЕсли;
	
	Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
		Тип = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
			РеквизитыПоискаКонтрагентОрганизация,
			Тип,
			ПараметрыОбъединенияРеквизитов,
			,
			ИдентификаторРезультата
		);
		ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "Продавец", Кандидаты);
	КонецЕсли;
	
	Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
		Тип = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
			РеквизитыПоискаКонтрагентОрганизация,
			Тип,
			ПараметрыОбъединенияРеквизитов,
			,
			ИдентификаторРезультата
		);
		ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "ПродавецОрганизация", Кандидаты);
	КонецЕсли;
	
	// Покупатель
	РеквизитыПоискаКонтрагентОрганизация = Новый Структура();
	
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Покупатель", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		Наименование = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(НайденнаяСтрока.РаспознанныйТекст);
		РеквизитыПоискаКонтрагентОрганизация.Вставить("Наименование", Наименование);
	КонецЕсли;
	
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ИННКПППокупателя", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		ДобавитьИННКПП(РеквизитыПоискаКонтрагентОрганизация, НайденнаяСтрока.РаспознанныйТекст);
	КонецЕсли;
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ИННПокупателя", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		РеквизитыПоискаКонтрагентОрганизация.Вставить("ИНН", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
	КонецЕсли;
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("КПППокупателя", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		РеквизитыПоискаКонтрагентОрганизация.Вставить("КПП", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
	КонецЕсли;
	
	Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
		Тип = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
			РеквизитыПоискаКонтрагентОрганизация,
			Тип,
			ПараметрыОбъединенияРеквизитов,
			,
			ИдентификаторРезультата
		);
		ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "Покупатель", Кандидаты);
	КонецЕсли;
	
	Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
		Тип = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
			РеквизитыПоискаКонтрагентОрганизация,
			Тип,
			ПараметрыОбъединенияРеквизитов,
			,
			ИдентификаторРезультата
		);
		ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "ПокупательОрганизация", Кандидаты);
	КонецЕсли;
	
	// Грузополучатель
	РеквизитыПоискаКонтрагентОрганизация = Новый Структура();
	
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Грузополучатель", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		Наименование = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(НайденнаяСтрока.РаспознанныйТекст);
		РеквизитыПоискаКонтрагентОрганизация.Вставить("Наименование", Наименование);
	КонецЕсли;
	
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ИННКППГрузополучателя", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		ДобавитьИННКПП(РеквизитыПоискаКонтрагентОрганизация, НайденнаяСтрока.РаспознанныйТекст);
	КонецЕсли;
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ИННГрузополучателя", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		РеквизитыПоискаКонтрагентОрганизация.Вставить("ИНН", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
	КонецЕсли;
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("КППГрузополучателя", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		РеквизитыПоискаКонтрагентОрганизация.Вставить("КПП", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
	КонецЕсли;
	
	Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
		Тип = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
			РеквизитыПоискаКонтрагентОрганизация,
			Тип,
			ПараметрыОбъединенияРеквизитов,
			,
			ИдентификаторРезультата
		);
		ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "Грузополучатель", Кандидаты);
	КонецЕсли;
	
	// Грузоотправитель
	РеквизитыПоискаКонтрагентОрганизация = Новый Структура();
	
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Грузоотправитель", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		Наименование = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(НайденнаяСтрока.РаспознанныйТекст);
		РеквизитыПоискаКонтрагентОрганизация.Вставить("Наименование", Наименование);
	КонецЕсли;
	
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ИННКППГрузоотправителя", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		ДобавитьИННКПП(РеквизитыПоискаКонтрагентОрганизация, НайденнаяСтрока.РаспознанныйТекст);
	КонецЕсли;
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ИННГрузоотправителя", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		РеквизитыПоискаКонтрагентОрганизация.Вставить("ИНН", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
	КонецЕсли;
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("КППГрузоотправителя", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		РеквизитыПоискаКонтрагентОрганизация.Вставить("КПП", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
	КонецЕсли;
	
	Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
		Тип = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
			РеквизитыПоискаКонтрагентОрганизация,
			Тип,
			ПараметрыОбъединенияРеквизитов,
			,
			ИдентификаторРезультата
		);
		ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "Грузоотправитель", Кандидаты);
	КонецЕсли;
	
	// Исполнитель
	РеквизитыПоискаКонтрагентОрганизация = Новый Структура();
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Исполнитель", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		Наименование = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(НайденнаяСтрока.РаспознанныйТекст);
		РеквизитыПоискаКонтрагентОрганизация.Вставить("Наименование", Наименование);
	КонецЕсли;
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ИННИсполнителя", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		РеквизитыПоискаКонтрагентОрганизация.Вставить("ИНН", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
	КонецЕсли;
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("КППИсполнителя", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		РеквизитыПоискаКонтрагентОрганизация.Вставить("КПП", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
	КонецЕсли;
	Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
		Тип = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
			РеквизитыПоискаКонтрагентОрганизация,
			Тип,
			ПараметрыОбъединенияРеквизитов,
			,
			ИдентификаторРезультата
		);
		ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "Исполнитель", Кандидаты);
	КонецЕсли;
	
	// Банк
	РеквизитыПоискаКонтрагентОрганизация = Новый Структура();
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Банк", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		РеквизитыПоискаКонтрагентОрганизация.Вставить("Код", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
	КонецЕсли;
	Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
		Тип = ПредопределенноеЗначение("Справочник.КлассификаторБанков.ПустаяСсылка");
		Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
			РеквизитыПоискаКонтрагентОрганизация,
			Тип,
			,
			,
			ИдентификаторРезультата
		);
		ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "Банк", Кандидаты);
	КонецЕсли;
	
	// Банковский счет
	РеквизитыПоискаКонтрагентОрганизация = Новый Структура();
	НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("БанковскийСчетКонтрагента", "ИмяРеквизита");
	Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
		РеквизитыПоискаКонтрагентОрганизация.Вставить("Наименование", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
	КонецЕсли;
	Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
		Тип = ПредопределенноеЗначение("Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка");
		Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
			РеквизитыПоискаКонтрагентОрганизация,
			Тип,
			,
			,
			ИдентификаторРезультата
		);
		ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "БанковскийСчетКонтрагента", Кандидаты);
		ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "БанковскийСчетОрганизации", Кандидаты);
	КонецЕсли;
	
	
	//////////////////////////////
	// Табличная часть
	/////////////////////////////
	
	// Номенклатура
	НайденныеСтроки = ДокументОбъект.РеквизитыТабличныхЧастей.НайтиСтроки(Новый Структура("ИмяРеквизита", "Номенклатура"));
	
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		
		// Номенклатура
		
		РеквизитыПоискаКонтрагентОрганизация = Новый Структура();
		РеквизитыПоискаКонтрагентОрганизация.Вставить("Наименование", СтрокаТаблицы.РаспознанныйТекст);
		
		Отбор = Новый Структура("ИмяРеквизита, НомерСтрокиТЧ", "Артикул", СтрокаТаблицы.НомерСтрокиТЧ);
		НайденнаяСтрока = ДокументОбъект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() <> 0 Тогда
			Артикул = ИзвлечьАртикулИзСтроки(НайденнаяСтрока[0].РаспознанныйТекст);
			Если Не ПустаяСтрока(Артикул) Тогда
				РеквизитыПоискаКонтрагентОрганизация.Вставить("Артикул", Артикул);
			КонецЕсли;
		КонецЕсли;
		
		Тип = ПредопределенноеЗначение("Справочник.НоменклатураКонтрагентов.ПустаяСсылка");
		Кандидаты1 = РаспознаваниеДокументов.ПолучитьКандидатов(
			РеквизитыПоискаКонтрагентОрганизация,
			Тип,
			ПараметрыОбъединенияРеквизитов
			,
			,
			ИдентификаторРезультата 
		);
		
		Кандидаты = Кандидаты1.СкопироватьКолонки();
		
		Если Кандидаты1.Количество() Тогда
			Для Каждого Кандидат Из Кандидаты1 Цикл
				Если ЗначениеЗаполнено(Кандидат.Ссылка.Номенклатура) Тогда
					Кандидат.Ссылка = Кандидат.Ссылка.Номенклатура;      
                    ЗаполнитьЗначенияСвойств(Кандидаты.Добавить(), Кандидат);
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;			
		
		Тип = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		Кандидаты2 = РаспознаваниеДокументов.ПолучитьКандидатов(
			РеквизитыПоискаКонтрагентОрганизация,
			Тип,
			ПараметрыОбъединенияРеквизитов
			,
			,
			ИдентификаторРезультата
		); 
		
		Если Кандидаты.Количество() Тогда
			Для Каждого Кандидат Из Кандидаты2 Цикл
				НайденаяСтрока =  Кандидаты.Найти(Кандидат.Ссылка, "Ссылка"); 
				Если НайденаяСтрока = Неопределено Тогда   
					ЗаполнитьЗначенияСвойств(Кандидаты.Добавить(),Кандидат); 
				КонецЕсли; 
			КонецЦикла;
		Иначе
			Кандидаты = Кандидаты2;
		КонецЕсли;
		
		ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "Номенклатура", Кандидаты, СтрокаТаблицы.НомерСтрокиТЧ);
		
		// СтранаПроисхождения
		
		РеквизитыПоискаКонтрагентОрганизация = Новый Структура();
		Отбор = Новый Структура("ИмяРеквизита, НомерСтрокиТЧ", "СтранаПроисхождения", СтрокаТаблицы.НомерСтрокиТЧ);
		НайденнаяСтрока = ДокументОбъект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() <> 0 И НЕ ПустаяСтрока(НайденнаяСтрока[0].РаспознанныйТекст) Тогда
			РеквизитыПоискаКонтрагентОрганизация.Вставить("Наименование", НайденнаяСтрока[0].РаспознанныйТекст);
		КонецЕсли;
		Отбор.ИмяРеквизита = "КодСтраныПроисхождения";
		НайденнаяСтрока = ДокументОбъект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() <> 0 Тогда
			Код = ИзвлечьЦифрыИзСтроки(НайденнаяСтрока[0].РаспознанныйТекст);
			Если Не ПустаяСтрока(Код) Тогда
				РеквизитыПоискаКонтрагентОрганизация.Вставить("Код", Код);
			КонецЕсли;
		КонецЕсли;
		Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
			Тип = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
			Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
				РеквизитыПоискаКонтрагентОрганизация,
				Тип,
				ПараметрыОбъединенияРеквизитов,
				,
				ИдентификаторРезультата
			);
			ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "СтранаПроисхождения", Кандидаты, СтрокаТаблицы.НомерСтрокиТЧ);
		КонецЕсли;
		
		// ЕдиницаИзмерения
		
		РеквизитыПоискаКонтрагентОрганизация = Новый Структура();
		Отбор = Новый Структура("ИмяРеквизита, НомерСтрокиТЧ", "ЕдиницаИзмерения", СтрокаТаблицы.НомерСтрокиТЧ);
		НайденнаяСтрока = ДокументОбъект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() <> 0 И НЕ ПустаяСтрока(НайденнаяСтрока[0].РаспознанныйТекст) Тогда
			РеквизитыПоискаКонтрагентОрганизация.Вставить("Наименование", НайденнаяСтрока[0].РаспознанныйТекст);
		КонецЕсли;
		Отбор.ИмяРеквизита = "КодЕдиницыИзмерения";
		НайденнаяСтрока = ДокументОбъект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() <> 0 Тогда
			Код = ИзвлечьЦифрыИзСтроки(НайденнаяСтрока[0].РаспознанныйТекст);
			Если Не ПустаяСтрока(Код) Тогда
				РеквизитыПоискаКонтрагентОрганизация.Вставить("Код", Код);
			КонецЕсли;
		КонецЕсли;
		Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
			Тип = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
			Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
				РеквизитыПоискаКонтрагентОрганизация,
				Тип,
				ПараметрыОбъединенияРеквизитов,
				,
				ИдентификаторРезультата
			);
			ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "ЕдиницаИзмерения", Кандидаты, СтрокаТаблицы.НомерСтрокиТЧ);
		КонецЕсли;
		
		// СтавкаНДС
		
		РеквизитыПоискаКонтрагентОрганизация = Новый Структура();
		Отбор = Новый Структура("ИмяРеквизита, НомерСтрокиТЧ", "СтавкаНДС", СтрокаТаблицы.НомерСтрокиТЧ);
		НайденнаяСтрока = ДокументОбъект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() <> 0 И НЕ ПустаяСтрока(НайденнаяСтрока[0].РаспознанныйТекст) Тогда
			РеквизитыПоискаКонтрагентОрганизация.Вставить("Наименование", НайденнаяСтрока[0].РаспознанныйТекст);
		КонецЕсли;
		Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
			Тип = ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
			Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
				РеквизитыПоискаКонтрагентОрганизация,
				Тип,
				ПараметрыОбъединенияРеквизитов,
				,
				ИдентификаторРезультата
			);
			ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "СтавкаНДС", Кандидаты, СтрокаТаблицы.НомерСтрокиТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСпискиВыбораРеквизитаШапкиДокументов(ПараметрыОперации, АдресРезультата) Экспорт
	
	Для Каждого ДокументСсылка Из ПараметрыОперации.РаспознанныеДокументы Цикл
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Для Каждого ИмяРеквизита Из ПараметрыОперации.ИменаРеквизитов Цикл
			ЗаполнитьСпискиВыбораРеквизитаШапкиДокумента(ДокументОбъект, ДокументСсылка, ИмяРеквизита);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСпискиВыбораРеквизитаШапкиДокумента(ДокументОбъект, ДокументСсылка, ИмяРеквизита)
	
	ИдентификаторРезультата = ДокументОбъект.ИдентификаторРезультата;
	
	ОбъединяемыеРеквизиты = Новый Массив;
	ОбъединяемыеРеквизиты.Добавить("Наименование");
	ОбъединяемыеРеквизиты.Добавить("НаименованиеПолное");
	ПараметрыОбъединенияРеквизитов = Новый Структура("Наименование", ОбъединяемыеРеквизиты);
	
	Если ИмяРеквизита = "Контрагент" Тогда
		
		// Продавец
		РеквизитыПоискаКонтрагентОрганизация = Новый Структура();
		
		НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Продавец", "ИмяРеквизита");
		Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
			Наименование = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(НайденнаяСтрока.РаспознанныйТекст);
			РеквизитыПоискаКонтрагентОрганизация.Вставить("Наименование", Наименование);
		КонецЕсли;
		
		НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ИННКПППродавца", "ИмяРеквизита");
		Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
			ДобавитьИННКПП(РеквизитыПоискаКонтрагентОрганизация, НайденнаяСтрока.РаспознанныйТекст);
		КонецЕсли;
		НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ИННПродавца", "ИмяРеквизита");
		Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
			РеквизитыПоискаКонтрагентОрганизация.Вставить("ИНН", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
		КонецЕсли;
		НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("КПППродавца", "ИмяРеквизита");
		Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
			РеквизитыПоискаКонтрагентОрганизация.Вставить("КПП", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
		КонецЕсли;
		
		Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
			Тип = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
				РеквизитыПоискаКонтрагентОрганизация,
				Тип,
				ПараметрыОбъединенияРеквизитов,
				,
				ИдентификаторРезультата
			);
			ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "Продавец", Кандидаты);
		КонецЕсли;
		
		// Покупатель
		РеквизитыПоискаКонтрагентОрганизация = Новый Структура();
		
		НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Покупатель", "ИмяРеквизита");
		Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
			Наименование = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(НайденнаяСтрока.РаспознанныйТекст);
			РеквизитыПоискаКонтрагентОрганизация.Вставить("Наименование", Наименование);
		КонецЕсли;
		
		НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ИННКПППокупателя", "ИмяРеквизита");
		Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
			ДобавитьИННКПП(РеквизитыПоискаКонтрагентОрганизация, НайденнаяСтрока.РаспознанныйТекст);
		КонецЕсли;
		НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ИННПокупателя", "ИмяРеквизита");
		Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
			РеквизитыПоискаКонтрагентОрганизация.Вставить("ИНН", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
		КонецЕсли;
		НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("КПППокупателя", "ИмяРеквизита");
		Если НЕ НайденнаяСтрока = Неопределено И НЕ ПустаяСтрока(НайденнаяСтрока.РаспознанныйТекст) Тогда
			РеквизитыПоискаКонтрагентОрганизация.Вставить("КПП", ИзвлечьЦифрыИзСтроки(НайденнаяСтрока.РаспознанныйТекст));
		КонецЕсли;
		
		Если РеквизитыПоискаКонтрагентОрганизация.Количество() Тогда
			Тип = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
				РеквизитыПоискаКонтрагентОрганизация,
				Тип,
				ПараметрыОбъединенияРеквизитов,
				,
				ИдентификаторРезультата
			);
			ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "Покупатель", Кандидаты);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьДокументНаОснованииРаспознанного(РаспознанныйДокумент, ТипСоздаваемогоДокумента, ПараметрыЗаполнения, РежимЗаписи = Неопределено) Экспорт

	ЕстьПустаяНоменклатура = Ложь;
	Если ПараметрыЗаполнения.Свойство("ТоварыУслуги") Тогда
		Для Каждого СтрокаТаблицы Из ПараметрыЗаполнения.ТоварыУслуги Цикл
			Если СтрокаТаблицы.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар 
				И Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				ЕстьПустаяНоменклатура = Истина;
				
				ЭтоСообщение = Новый СообщениеПользователю;
				ЭтоСообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Номенклатура"" в строке '") + СтрокаТаблицы.ПорядокСтроки;
				ЭтоСообщение.Поле = СтрШаблон("ТаблицаДокумента[%1].Номенклатура", Формат(СтрокаТаблицы.ПорядокСтроки - 1, "ЧГ="));
				ЭтоСообщение.Сообщить();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЕстьПустаяНоменклатура = Ложь;
	Если ПараметрыЗаполнения.Свойство("УслугиРаботы") Тогда 
		Для Каждого СтрокаТаблицы Из ПараметрыЗаполнения.УслугиРаботы Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Содержание) Тогда
				ЕстьПустаяНоменклатура = Истина;
					
				ЭтоСообщение = Новый СообщениеПользователю;
				ЭтоСообщение.Текст = НСтр("ru = 'Не заполнена колонка ""Содержание"" в строке '") + СтрокаТаблицы.ПорядокСтроки;
				ЭтоСообщение.Поле = СтрШаблон("ТаблицаДокумента[%1].Содержание", Формат(СтрокаТаблицы.ПорядокСтроки - 1, "ЧГ="));
				ЭтоСообщение.Сообщить();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьПустаяНоменклатура Тогда
		ВызватьИсключение НСтр("ru = 'Необходимо заполнить номенклатуру во всех строках'");
	КонецЕсли;

	СоздаваемыйДокумент = Документы[ТипСоздаваемогоДокумента].СоздатьДокумент();
	СоздаваемыйДокумент.Заполнить(ПараметрыЗаполнения);
	РаспознаваниеДокументовПереопределяемый.ПриСозданииДокументаНаОснованииРаспознанного(СоздаваемыйДокумент, РаспознанныйДокумент, ПараметрыЗаполнения);
	Если РежимЗаписи = Неопределено Тогда
		СоздаваемыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	Иначе
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Если Не СоздаваемыйДокумент.ПроверитьЗаполнение() Тогда
				ВызватьИсключение НСтр("ru = 'При проверке заполнения обнаружены ошибки'");
			КонецЕсли;
			РаспознаваниеДокументовПереопределяемый.ПриПроведенииДокументаНаОснованииРаспознанного(СоздаваемыйДокумент);
		КонецЕсли;
		СоздаваемыйДокумент.Записать(РежимЗаписи);
	КонецЕсли;

	РаспознаваниеДокументовПереопределяемый.ПослеСозданияДокументаНаОснованииРаспознанного(СоздаваемыйДокумент);

	РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ЗаписатьЗначения(СоздаваемыйДокумент.Ссылка, РаспознанныйДокумент, Ложь);
	
	Возврат СоздаваемыйДокумент.Ссылка;

КонецФункции

Процедура ИзменитьПорядокРеквизитовРаспознаваемогоДокумента(Объект) Экспорт
	
	// Сохранение текущих значений
	ТабличнаяЧасть = Объект.РеквизитыДокумента.Выгрузить();
	
	// Добавление порядка сортировки
	ТабличнаяЧасть.Колонки.Добавить("НомерСопоставленияРеквизитов");
	ТабличнаяЧасть.ЗаполнитьЗначения(1000000, "НомерСопоставленияРеквизитов");
	
	СопоставлениеРеквизитов = ПолучитьСопоставлениеРеквизитовИСвойствJSON(Объект.ТипДокумента);
	
	Для НомерСтроки = 0 По СопоставлениеРеквизитов.Количество() - 1 Цикл
		
		ДанныеСопоставления = СопоставлениеРеквизитов[НомерСтроки];
		
		Если СтрНайти(ДанныеСопоставления.Адрес, ".Строка.") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Найти(ДанныеСопоставления.ИмяРеквизита, "ИмяРеквизита");
		Если СтрокаТабличнойЧасти = Неопределено Тогда 
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			НоваяСтрока.ИмяРеквизита = ДанныеСопоставления.ИмяРеквизита;
			НоваяСтрока.Значение = ДанныеСопоставления.ОписаниеТипа.ПривестиЗначение();
			НоваяСтрока.НомерСопоставленияРеквизитов = НомерСтроки;
		Иначе 
			СтрокаТабличнойЧасти.Значение = ДанныеСопоставления.ОписаниеТипа.ПривестиЗначение(СтрокаТабличнойЧасти.Значение);
			СтрокаТабличнойЧасти.НомерСопоставленияРеквизитов = НомерСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличнаяЧасть.Сортировать("НомерСопоставленияРеквизитов");
	
	Объект.РеквизитыДокумента.Загрузить(ТабличнаяЧасть);
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораПоля(Форма, РаспознанныйТекст, Тип, ДанныеВыбора) Экспорт
	
	Объект = Форма.Объект;
	ЭтоПримитивныйТип = Ложь;
	ПараметрыВыбораДоговора = ПараметрыВыбораДоговора(Объект);
	
	ОтборМетаданных = Новый Массив;
	ОтборМетаданных.Добавить(Новый Структура("Свойство, ВидСравнения, Значение",
		"Организация", "=", ПараметрыВыбораДоговора.Организация));    
	ОтборМетаданных.Добавить(Новый Структура("Свойство, ВидСравнения, Значение",
		"Контрагент", "=", ПараметрыВыбораДоговора.Контрагент));
	ОтборМетаданных.Добавить(Новый Структура("Свойство, ВидСравнения, Значение",
		"ТипДоговора", "В", ПараметрыВыбораДоговора.ВидыДоговоров));
	
	ДанныеПоиска = Новый Структура;
	РеквизитыПоиска = Новый Структура; // Ключ - имя реквизита из РаспознанныйДокумент.РеквизитыДокумента, Значение - имя реквизита объекта метаданных
	РеквизитыПоиска.Вставить("НомерДоговора", "Номер");
	РеквизитыПоиска.Вставить("ДатаДоговора", "Дата");
	РеквизитыПоиска.Вставить("Договор", "Наименование");
	
	Для Каждого ИмяРеквизита Из РеквизитыПоиска Цикл
		Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита.Ключ);
		СтрокиПоиска = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если СтрокиПоиска.Количество() <> 0 Тогда
			ЗначениеПоиска = СтрокиПоиска[0].РаспознанныйТекст;
		Иначе
			ЗначениеПоиска = Неопределено;
		КонецЕсли;
		
		ДанныеПоиска.Вставить(ИмяРеквизита.Значение, ЗначениеПоиска);
	КонецЦикла;
	
	Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
		ДанныеПоиска,
		Тип,
		,
		ОтборМетаданных,
		Объект.ИдентификаторРезультата
	);
	
	Кандидаты.Колонки.Добавить("Значение");
	Кандидаты.Колонки.Добавить("Уверенность");
	
	Для Каждого Кандидат Из Кандидаты Цикл
		Кандидат.Значение = Кандидат.Ссылка;
		Кандидат.Уверенность = Окр(Кандидат.Коэффициент * 100);
	КонецЦикла;
	
	СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьСписокДляВыбораПользователем(РаспознанныйТекст, Кандидаты);
	Если ТипЗнч(ДанныеВыбора) = Тип("СписокЗначений") Тогда
		ДанныеВыбора.Очистить();
	Иначе
		ДанныеВыбора = Новый СписокЗначений;
	КонецЕсли;
	
	Для Каждого ЭлементВыбораЭлемента Из СписокДляВыбора Цикл
		Если ТипЗнч(ЭлементВыбораЭлемента.Значение) = Тип("Структура") Тогда
			ДанныеВыбора.Добавить(ЭлементВыбораЭлемента.Значение.Значение, ЭлементВыбораЭлемента.Представление, , ЭлементВыбораЭлемента.Картинка);
		Иначе
			Если ЭтоПримитивныйТип Тогда
				ДанныеВыбора.Добавить(ЭлементВыбораЭлемента.Значение, ЭлементВыбораЭлемента.Представление);
			Иначе
				ДанныеВыбора.Добавить(ЭлементВыбораЭлемента.Значение, ЭлементВыбораЭлемента.Представление, , ЭлементВыбораЭлемента.Картинка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИсходноеИзображение(Ссылка) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ИмяФайла, ИсходноеИзображение, Миниатюра, ИдентификаторРезультата");
	
	ДанныеИзображения = Реквизиты.ИсходноеИзображение.Получить();
	Если Не ЗначениеЗаполнено(ДанныеИзображения) Тогда
		ДанныеИзображения = Реквизиты.Миниатюра.Получить();
	КонецЕсли;
	
	Если ДанныеИзображения = Неопределено И ЭтоФайлИзображения(Реквизиты.ИмяФайла) Тогда
		ДанныеИзображения = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов
			.ПолучитьЕдинственныйИсходныйФайл(Реквизиты.ИдентификаторРезультата);
	КонецЕсли;
	
	Если ДанныеИзображения = Неопределено Тогда 
		ДанныеИзображения = БиблиотекаКартинок.ОтсутствуетИзображениеРаспознанногоДокумента.ПолучитьДвоичныеДанные();
	КонецЕсли;
	
	Возврат ДанныеИзображения;
	
КонецФункции

Функция ЭтоФайлИзображения(ИмяФайла)
	
	ФайлИнфо = Новый Файл(ИмяФайла);
	Возврат ЭтоРасширениеИзображения(ФайлИнфо.Расширение);
	
КонецФункции

Функция ЭтоРасширениеИзображения(Знач Расширение)
	
	Расширение = НРег(Расширение);
	Возврат Расширение = ".jpg"
		Или Расширение = ".jpeg"
		Или Расширение = ".png";
	
КонецФункции

#КонецОбласти

#Область НайтиИЗаполнитьСозданныеДокументы

Процедура АктуализироватьОбъектыСвязанныеСРаспознаннымДокументом(РаспознанныйДокумент, КомплектныеДокументы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КандидатыВСвязанныеДокументы = НайтиПотенциальныеСвязаныеДокументы(РаспознанныйДокумент);
	Если КомплектныеДокументы <> Неопределено Тогда
		Для Каждого КомплектныйДокумент Из КомплектныеДокументы Цикл
			СвязанныеПоКомплекту = НайтиПотенциальныеСвязаныеДокументы(КомплектныйДокумент);
			Для Каждого СтрокаСвязанных Из СвязанныеПоКомплекту Цикл
				Если Не ДокументЕстьВТаблице(СтрокаСвязанных.Ссылка, КандидатыВСвязанныеДокументы) Тогда
					НоваяСтрока = КандидатыВСвязанныеДокументы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСвязанных);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СвязанныеДокументы = РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ВсеСвязанныеДокументы(РаспознанныйДокумент.Ссылка);
	
	Отбор = Новый Структура("ПотенциальныйКандидат", Истина);
	СтарыеКандидаты = СвязанныеДокументы.НайтиСтроки(Отбор);
	
	Для Каждого Документ Из СтарыеКандидаты Цикл
		РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.УдалитьЗначения(Документ.Ссылка, РаспознанныйДокумент.Ссылка);
	КонецЦикла;
	
	Отбор = Новый Структура("ПотенциальныйКандидат", Ложь);
	СтарыеСвязанные = СвязанныеДокументы.НайтиСтроки(Отбор);
	
	Для Каждого Кандидат Из КандидатыВСвязанныеДокументы Цикл
		
		Если Не ДокументЕстьВТаблице(Кандидат.Ссылка, СтарыеСвязанные) Тогда
			
			РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ЗаписатьЗначения(Кандидат.Ссылка, РаспознанныйДокумент.Ссылка, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ДокументЕстьВТаблице(СсылкаНаДокумент, ТаблицаПоиска)
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоиска Цикл
		Если СтрокаТаблицы.Ссылка = СсылкаНаДокумент Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиПотенциальныеСвязаныеДокументы(Объект) Экспорт
	
	СвязанныеДокументы = Новый ТаблицаЗначений;
	СвязанныеДокументы.Колонки.Добавить("Ссылка");
	СвязанныеДокументы.Колонки.Добавить("ПотенциальныйКандидат");
	
	Если Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		ИЛИ Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура 
		ИЛИ Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
		
		Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
			ТекстЗапроса = ПолучитьТекстЗапросаПоПервичнымДокументам("Документ.СчетФактураПолученный", Ложь);
			ТипНовогоДокумента = "Поступление";
		Иначе
			ТекстЗапроса = ПолучитьТекстЗапросаПоПервичнымДокументам("Документ.СчетФактураВыданный");
			ТекстЗапросаАкт = ПолучитьТекстЗапросаПоПервичнымДокументам("Документ.АктВыполненныхРабот", Ложь);
			ТипНовогоДокумента = "Реализация";
		КонецЕсли;
		
		Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапросаАкт;
			ЗаполнитьПараметрыПоУмолчанию(Объект, Запрос, ТипНовогоДокумента);
			
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда
				
				Документ = СвязанныеДокументы.Добавить();
				Документ.Ссылка = Выборка.Документ;
				Документ.ПотенциальныйКандидат = Истина;
				
				Если Выборка.ДокументОснование <> Null Тогда
					Документ = СвязанныеДокументы.Добавить();
					Документ.Ссылка = Выборка.ДокументОснование;
					Документ.ПотенциальныйКандидат = Истина;
				КонецЕсли;
	        КонецЕсли;
       	КонецЕсли;

		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		ЗаполнитьПараметрыПоУмолчанию(Объект, Запрос, ТипНовогоДокумента);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			
			Документ = СвязанныеДокументы.Добавить();
			Документ.Ссылка = Выборка.Документ;
			Документ.ПотенциальныйКандидат = Истина;
			
			Если Выборка.ДокументОснование <> Null Тогда
				Документ = СвязанныеДокументы.Добавить();
				Документ.Ссылка = Выборка.ДокументОснование;
				Документ.ПотенциальныйКандидат = Истина;
			КонецЕсли;
			
		Иначе
			// Не нашли счет-фактуру, тогда ищем поступление или реализацию
			
			Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
				ТекстЗапроса = ПолучитьТекстЗапросаПоПервичнымДокументам("Документ.ПриобретениеТоваровУслуг", Ложь);
			Иначе
				ТекстЗапроса = ПолучитьТекстЗапросаПоПервичнымДокументам("Документ.РеализацияТоваровУслуг", Ложь);
			КонецЕсли;
			
			Запрос.Текст = ТекстЗапроса;
			
			// Счет-фактуру могут выписать на 5 дней позже
			Запрос.УстановитьПараметр("ДатаНачала", Объект.РеквизитыДокумента[1].Значение - 5 * 86400);
			
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда
				
				Документ = СвязанныеДокументы.Добавить();
				Документ.Ссылка = Выборка.Документ;
				Документ.ПотенциальныйКандидат = Истина;
				
				Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
					СчетФактура = РаспознаваниеДокументовПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Выборка.Документ.Ссылка);
				Иначе
					СчетФактура = РаспознаваниеДокументовПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Выборка.Документ.Ссылка);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СчетФактура) Тогда
					Документ = СвязанныеДокументы.Добавить();
					Документ.Ссылка = СчетФактура;
					Документ.ПотенциальныйКандидат = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12 Тогда
		
		Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
			ТекстЗапроса = ПолучитьТекстЗапросаПоПервичнымДокументам("Документ.ПриобретениеТоваровУслуг", Ложь);
			ТипНовогоДокумента = "Поступление";
		Иначе
			ТекстЗапроса = ПолучитьТекстЗапросаПоПервичнымДокументам("Документ.РеализацияТоваровУслуг", Ложь);
			ТипНовогоДокумента = "Реализация";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		ЗаполнитьПараметрыПоУмолчанию(Объект, Запрос, ТипНовогоДокумента);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			
			Документ = СвязанныеДокументы.Добавить();
			Документ.Ссылка = Выборка.Документ;
			Документ.ПотенциальныйКандидат = Истина;
			
			Если Выборка.ДокументОснование = Null Тогда
				Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
					СчетФактура = РаспознаваниеДокументовПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Выборка.Документ.Ссылка);
				Иначе
					СчетФактура = РаспознаваниеДокументовПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Выборка.Документ.Ссылка);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СчетФактура) Тогда
					Документ = СвязанныеДокументы.Добавить();
					Документ.Ссылка = СчетФактура;
					Документ.ПотенциальныйКандидат = Истина;
				КонецЕсли;
			Иначе
				Документ = СвязанныеДокументы.Добавить();
				Документ.Ссылка = Выборка.ДокументОснование;
				Документ.ПотенциальныйКандидат = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Объект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
		
		//Счет на оплату - временно отключен
		
		//Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
		//	//ТекстЗапроса = ПолучитьТекстЗапросаПоПервичнымДокументам("Документ.СчетНаОплатуКлиенту", Ложь);
		//	ТипНовогоДокумента = "ДокументИсходящий";
		////
		////	Запрос = Новый Запрос;
		////	Запрос.Текст = ТекстЗапроса;
		////	ЗаполнитьПараметрыПоУмолчанию(Объект, Запрос, ТипНовогоДокумента);
		////	
		////	УстановитьПривилегированныйРежим(Истина);
		////	Выборка = Запрос.Выполнить().Выбрать();
		////	УстановитьПривилегированныйРежим(Ложь);
		////	
		////	Если Выборка.Следующий() Тогда
		////		
		////		Документ = СвязанныеДокументы.Добавить();
		////		Документ.Ссылка = Выборка.Документ;
		////		Документ.ПотенциальныйКандидат = Истина;
		////		
		////	КонецЕсли;
		//Иначе
		//	ТипНовогоДокумента = "ДокументВходящий";
		//
		//КонецЕсли;
		
	КонецЕсли;
	
	Возврат СвязанныеДокументы;
	
КонецФункции

Процедура ЗаполнитьПараметрыПоУмолчанию(Объект, Запрос, ТипНовогоДокумента)
	
	Если ТипНовогоДокумента = "Поступление" Тогда
		Запрос.УстановитьПараметр("Организация", Объект.РеквизитыДокумента[9].Значение);
		Запрос.УстановитьПараметр("Контрагент", Объект.РеквизитыДокумента[2].Значение);
	ИначеЕсли ТипНовогоДокумента = "Реализация" Тогда
		Запрос.УстановитьПараметр("Организация", Объект.РеквизитыДокумента[8].Значение);
		Запрос.УстановитьПараметр("Контрагент", Объект.РеквизитыДокумента[3].Значение);
	ИначеЕсли ТипНовогоДокумента = "ДокументВходящий" Тогда
		Запрос.УстановитьПараметр("Организация", Объект.РеквизитыДокумента[9].Значение);
		Запрос.УстановитьПараметр("Контрагент", Объект.РеквизитыДокумента[2].Значение);
	ИначеЕсли ТипНовогоДокумента = "ДокументИсходящий" Тогда
		Запрос.УстановитьПараметр("Организация", Объект.РеквизитыДокумента[17].Значение);
		Запрос.УстановитьПараметр("Контрагент", Объект.РеквизитыДокумента[3].Значение);
	КонецЕсли;
	Запрос.УстановитьПараметр("Номер", Объект.РеквизитыДокумента[0].Значение);
	Запрос.УстановитьПараметр("ДатаНачала", Объект.РеквизитыДокумента[1].Значение);
	Запрос.УстановитьПараметр("ДатаКонца", КонецДня(Объект.РеквизитыДокумента[1].Значение));
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаПоПервичнымДокументам(ИмяТаблицы, ЕстьДокументОснование = Истина)
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеПервичныхДокументов.Документ КАК &ИмяТаблицы) КАК Документ
		|ПОМЕСТИТЬ ВсеДокументы
		|ИЗ
		|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|ГДЕ
		|	ДанныеПервичныхДокументов.Документ ССЫЛКА &ИмяТаблицы
		|	И ДанныеПервичныхДокументов.Организация = &Организация
		//|	И ДанныеПервичныхДокументов.Номер = &Номер
		|	И ДанныеПервичныхДокументов.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеДокументы.Документ КАК Документ,
		|	&ДокументОснование КАК ДокументОснование
		|ИЗ
		|	ВсеДокументы КАК ВсеДокументы
		|ГДЕ
		|	НЕ ВсеДокументы.Документ.ПометкаУдаления
		|	И ВсеДокументы.Документ.Контрагент = &Контрагент
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы);
	Если ЕстьДокументОснование Тогда
		//1. СчетФактураПолученный
		//2. СчетФактураВыданный
		//3. ПриобретениеТоваровУслуг
		//4. РеализацияТоваровУслуг
		//6. СчетНаОплатуКлиенту
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДокументОснование",
			"ВЫБОР
			|	КОГДА ТИПЗНАЧЕНИЯ(ВсеДокументы.Документ.ДокументОснование) = ТИП(Документ.СчетФактураПолученный)
			|		ИЛИ ТИПЗНАЧЕНИЯ(ВсеДокументы.Документ.ДокументОснование) = ТИП(Документ.СчетФактураВыданный)
			|		ИЛИ ТИПЗНАЧЕНИЯ(ВсеДокументы.Документ.ДокументОснование) = ТИП(Документ.ПриобретениеТоваровУслуг)
			|		ИЛИ ТИПЗНАЧЕНИЯ(ВсеДокументы.Документ.ДокументОснование) = ТИП(Документ.РеализацияТоваровУслуг)
			|		ИЛИ ТИПЗНАЧЕНИЯ(ВсеДокументы.Документ.ДокументОснование) = ТИП(Документ.РеализацияУслугПрочихАктивов)
			|		ИЛИ ТИПЗНАЧЕНИЯ(ВсеДокументы.Документ.ДокументОснование) = ТИП(Документ.ПриобретениеУслугПрочихАктивов)		
			|		ИЛИ ТИПЗНАЧЕНИЯ(ВсеДокументы.Документ.ДокументОснование) = ТИП(Документ.АктВыполненныхРабот)		
			|		ТОГДА ВсеДокументы.Документ.ДокументОснование
			|	ИНАЧЕ NULL
			|КОНЕЦ"
		);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДокументОснование", "NULL");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ОпределяемыеТипыРаспознаваемыеРеквизитыДокументаБРД()
	
	Возврат Метаданные.ОпределяемыеТипы.РаспознаваемыеРеквизитыДокументаБРД.Тип;
	
КонецФункции

Функция ЕстьОшибкаВЗначенииИтогаПоТаблице(ТаблицаДокумента, ИмяКолонки, ДанныеШапки)
	
	Если ТаблицаДокумента.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначениеИтого = ДанныеШапки["Итого" + ИмяКолонки];

	// Предназначена для проверки полей (ИмяКолонки =) ИтогоСумма, ИтогоСуммаНДС, ИтогоВсего
	
		
	Если ИмяКолонки = "СуммаСкидки" Тогда
		
		Если ДанныеШапки.ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НаОтдельныеПозиции Тогда
			Возврат (ТаблицаДокумента.Итог(ИмяКолонки) <> ЗначениеИтого);
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;

	Если ЗначениеИтого = 0 Тогда
		Если ИмяКолонки = "СуммаНДС" Тогда
			Если ТаблицаДокумента.Колонки.Найти("Сумма") <> Неопределено И ТаблицаДокумента.Итог("Сумма") = 0
				Или ТаблицаДокумента.Колонки.Найти("Всего") <> Неопределено И  ТаблицаДокумента.Итог("Всего") = 0 Тогда
				
				Возврат Истина;
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат (ТаблицаДокумента.Итог(ИмяКолонки) <> ЗначениеИтого);
	
КонецФункции

Процедура ОбновитьКоличествоОшибок(Форма)
	
	ТаблицаПроблемных = Форма.ПроблемныеЭлементы.Выгрузить(, "ИмяРеквизита, НомерСтроки");
	ТаблицаПроблемных.Свернуть("ИмяРеквизита, НомерСтроки");
	Форма.ОсталосьОшибок = ТаблицаПроблемных.Количество();
	
КонецПроцедуры

Функция ЮрФизЛицоПоОрганизационнойФорме() Экспорт
	
	Результат = Новый Соответствие;
	РаспознаваниеДокументовПереопределяемый.ПриОпределенииЮрФизЛицаПоОрганизационнойФорме(Результат);
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

#Область ВосстановлениеДанныхТабличныхЧастей

Функция ВосстановлениеПо2Формулам(СуммаВключаетНДС, ТаблицаДокумента, ИтогоВсего, ИтогоСуммаНДС, ПоляПроверки) Экспорт
	
	БылоИзменение = Ложь;
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		Если НЕ КоличествоЦенаСуммаСходятся(СтрокаТаблицы) ИЛИ НЕ СуммаСуммаНДСВсегоСходятся(СтрокаТаблицы, СуммаВключаетНДС) Тогда
			Для Каждого НашеПоле Из ПоляПроверки Цикл
				ТекущееЗначение = СтрокаТаблицы[НашеПоле];
				Если НашеПоле = "Сумма" Тогда
					// Сумму можно проверить по 3 формулам. Здесь используется только 2
					СтрокаТаблицы.Сумма = СтрокаТаблицы.Всего - ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
					
					Если НЕ КоличествоЦенаСуммаСходятся(СтрокаТаблицы) Тогда
						СтрокаТаблицы.Сумма = ТекущееЗначение;
					ИначеЕсли ТекущееЗначение <> СтрокаТаблицы[НашеПоле] И НЕ БылоИзменение Тогда
						БылоИзменение = Истина;
					КонецЕсли;
				ИначеЕсли НашеПоле = "СуммаНДС" И ИтогоСуммаНДС <> 0 Тогда
					Если СуммаВключаетНДС Тогда
						СтавкаНДСЧислом = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
						СтрокаТаблицы.СуммаНДС = Окр(РаспознаваниеДокументовСлужебныйКлиентСервер.РассчитатьСуммуНДС(
							СтрокаТаблицы.Сумма, СуммаВключаетНДС, СтавкаНДСЧислом), 2);
					Иначе
						СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.Всего - СтрокаТаблицы.Сумма;
					КонецЕсли;

					Если ТаблицаДокумента.Итог("СуммаНДС") <> ИтогоСуммаНДС Тогда
						СтрокаТаблицы.СуммаНДС = ТекущееЗначение;
					ИначеЕсли ТекущееЗначение <> СтрокаТаблицы[НашеПоле] И НЕ БылоИзменение Тогда
						БылоИзменение = Истина;
					КонецЕсли;
				ИначеЕсли НашеПоле = "Всего" И ИтогоВсего <> 0 Тогда
					СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
					
					Если ТаблицаДокумента.Итог("Всего") <> ИтогоВсего Тогда
						СтрокаТаблицы.Всего = ТекущееЗначение;
					ИначеЕсли ТекущееЗначение <> СтрокаТаблицы[НашеПоле] И НЕ БылоИзменение Тогда
						БылоИзменение = Истина;
					КонецЕсли;
				КонецЕсли;
					
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат БылоИзменение;
	
КонецФункции

Функция ВосстановлениеПо1ФормулеСУверенностью(ДокументОбъект, СуммаВключаетНДС, ТаблицаДокумента, ИтогоВсего, ИтогоСуммаНДС, ИтогоСумма) Экспорт
	
	БылоИзменение = Ложь;
	ИтогоСуммаСходится = (ИтогоСумма <> 0 И ТаблицаДокумента.Итог("Сумма") = ИтогоСумма);
	ИтогоСуммаНДССходится = (ТаблицаДокумента.Итог("СуммаНДС") = ИтогоСуммаНДС);
	ИтогоВсегоСходится = (ИтогоВсего <> 0 И ТаблицаДокумента.Итог("Всего") = ИтогоВсего);
	
	ПолеВосстановления = "";
	Если ИтогоСуммаСходится И ИтогоСуммаНДССходится Тогда
		ПолеВосстановления = "Всего";
	ИначеЕсли ИтогоСуммаНДССходится И ИтогоВсегоСходится Тогда 
		ПолеВосстановления = "Сумма";
	ИначеЕсли ИтогоСуммаСходится И ИтогоВсегоСходится Тогда
		ПолеВосстановления = "СуммаНДС";
	КонецЕсли;
	
	Если ПолеВосстановления <> "" Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			ВосстановитьПоле(СтрокаТаблицы, ПолеВосстановления, ДокументОбъект, СуммаВключаетНДС);
			Если СтрокаТаблицы.Всего <> СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС) Тогда
				Если НЕ БылоИзменение Тогда
					БылоИзменение = Истина;
				КонецЕсли;
				ВосстановитьПоле(СтрокаТаблицы, ПолеВосстановления, ДокументОбъект, СуммаВключаетНДС);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат БылоИзменение;
	
КонецФункции

Процедура НайтиИВосстановитьЕдинственныйНоль(СтрокаТаблицы, ПоляПроверки, ДокументОбъект, СуммаВключаетНДС) Экспорт
	
	НулевоеПоле = НайтиЕдинственныйНоль(СтрокаТаблицы, ПоляПроверки);
	Если НЕ ПустаяСтрока(НулевоеПоле) Тогда
		ВосстановитьПоле(СтрокаТаблицы, НулевоеПоле, ДокументОбъект, СуммаВключаетНДС);
		Если НЕ (СтрокаТаблицы.Количество <> 0 И КоличествоЦенаСуммаСходятся(СтрокаТаблицы)) Тогда
			СтрокаТаблицы[НулевоеПоле] = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиИВосстановитьПотеряннуюЗапятую(СтрокаТаблицы, ПоляПроверки, ДокументОбъект) Экспорт
	
	// Для "Количество" и "Цена" проверим, не потерялась ли запятая (умножим на 100 и на 1000)
	Если СтрокаТаблицы.Количество <> 0 И НЕ КоличествоЦенаСуммаСходятся(СтрокаТаблицы) Тогда
		Для Каждого НашеПоле Из ПоляПроверки Цикл
			Если СтрокаТаблицы[НашеПоле] = Окр(СтрокаТаблицы[НашеПоле]) Тогда
				Отбор = Новый Структура("ИмяРеквизита, НомерСтрокиТЧ", НашеПоле, СтрокаТаблицы.НомерСтроки);
				НайденныеДанныеТаблицыДокумента = ДокументОбъект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
				Если НЕ НайденныеДанныеТаблицыДокумента.Количество() Тогда
					Продолжить;
				КонецЕсли;
				
				РаспознанныйТекст = НайденныеДанныеТаблицыДокумента[0].РаспознанныйТекст;
				Если СтрНайти(РаспознанныйТекст, ",") = 0 И СтрНайти(РаспознанныйТекст, ".") = 0 Тогда
					ТекущееЗначение = СтрокаТаблицы[НашеПоле];
					Множитель = 100;
					Для Вариант = 1 По 2 Цикл
						СтрокаТаблицы[НашеПоле] = СтрокаТаблицы[НашеПоле] / Множитель;
						Если КоличествоЦенаСуммаСходятся(СтрокаТаблицы) Тогда
							Прервать;
						Иначе
							СтрокаТаблицы[НашеПоле] = ТекущееЗначение;
						КонецЕсли;
						Множитель = Множитель * 10;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьПоле(СтрокаТаблицы, ПолеВосстановления, ДокументОбъект, СуммаВключаетНДС)
	
	Если ПолеВосстановления = "Всего" Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	ИначеЕсли ПолеВосстановления = "СуммаНДС" Тогда
		Если СуммаВключаетНДС Тогда
			СтавкаНДСЧислом = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
			СтрокаТаблицы.СуммаНДС = Окр(РаспознаваниеДокументовСлужебныйКлиентСервер.РассчитатьСуммуНДС(
				СтрокаТаблицы.Сумма, СуммаВключаетНДС, СтавкаНДСЧислом), 2);
		Иначе
			СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.Всего - СтрокаТаблицы.Сумма;
		КонецЕсли;
	ИначеЕсли ПолеВосстановления = "Сумма" Тогда
		Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг
			ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
			
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
		Иначе
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Всего - ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		КонецЕсли;
	ИначеЕсли ПолеВосстановления = "Цена" Тогда
		СтрокаТаблицы.Цена = Окр(СтрокаТаблицы.Сумма/СтрокаТаблицы.Количество, 2);
	ИначеЕсли ПолеВосстановления = "Количество" Тогда
		БезОкругления = СтрокаТаблицы.Сумма/СтрокаТаблицы.Цена;
		РазностьОкругления = БезОкругления - Окр(БезОкругления);
		Если РазностьОкругления > -0.01 И РазностьОкругления < 0.01 Тогда
			СтрокаТаблицы.Количество = Окр(БезОкругления);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЕдинственныйНоль(СтрокаТаблицы, ПоляПроверки)
	
	СтавкаНДСЧислом = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
	
	Результат = "";
	Для Каждого НашеПоле Из ПоляПроверки Цикл
		Если СтавкаНДСЧислом = 0 И НашеПоле = "СуммаНДС" Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТаблицы[НашеПоле] = 0 Тогда
			Если Результат = "" Тогда
				Результат = НашеПоле;
			Иначе
				// Было найдено второе поле
				Результат = "";
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоЦенаСуммаСходятся(СтрокаТаблицы)
	Если СтрокаТаблицы.Количество = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Окр(СтрокаТаблицы.Количество * СтрокаТаблицы.Цена, 2) = СтрокаТаблицы.Сумма
		Или Окр(СтрокаТаблицы.Сумма/СтрокаТаблицы.Количество, 2) = СтрокаТаблицы.Цена;
КонецФункции

Функция СуммаСуммаНДСВсегоСходятся(СтрокаТаблицы, СуммаВключаетНДС)
	
	Если СуммаВключаетНДС Тогда
		СтавкаНДСЧислом = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
		СуммаНДСРасчет = Окр(РаспознаваниеДокументовСлужебныйКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма, СуммаВключаетНДС, СтавкаНДСЧислом), 2);
	
		Возврат СтрокаТаблицы.Сумма = СтрокаТаблицы.Всего И СтрокаТаблицы.СуммаНДС = СуммаНДСРасчет;
	Иначе
		Возврат СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.Всего;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроблемныеРеквизиты

Функция ПроверяемыеРеквизиты(ДокументОбъект)
	
	ПроверяемыеРеквизиты = Новый Массив;
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		Или ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
		Или ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
		Или ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг
		Или ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.НеопознанныйДокумент
		    И (ДокументОбъект.ВариантОбработки = Перечисления.ВариантыОбработкиЗаданияРаспознавания.ПоступлениеТоваров
		       Или ДокументОбъект.ВариантОбработки = Перечисления.ВариантыОбработкиЗаданияРаспознавания.РеализацияТоваров) Тогда
		
		// Шапка
		ПроверяемыеРеквизиты.Добавить("НомерДокумента");
		ПроверяемыеРеквизиты.Добавить("ДатаДокумента");
		ПроверяемыеРеквизиты.Добавить("Договор");
		ПроверяемыеРеквизиты.Добавить("Партнер"); 
		ПроверяемыеРеквизиты.Добавить("Подразделение"); 
		
		//ПроверяемыеРеквизиты.Добавить("СоглашениеСПоставщиком");
		ПроверяемыеРеквизиты.Добавить("ИтогоСумма");
		ПроверяемыеРеквизиты.Добавить("ИтогоСуммаНДС");
		ПроверяемыеРеквизиты.Добавить("ИтогоВсего");
		Если ДокументОбъект.ТипДокумента <> Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
			ПроверяемыеРеквизиты.Добавить("Грузоотправитель");
			ПроверяемыеРеквизиты.Добавить("Грузополучатель");
			ПроверяемыеРеквизиты.Добавить("Склад");
		КонецЕсли;
		
		Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
			ПроверяемыеРеквизиты.Добавить("Покупатель");    
			ПроверяемыеРеквизиты.Добавить("СоглашениеСКлиентом");
			ПроверяемыеРеквизиты.Добавить("ПродавецОрганизация");
		Иначе
			ПроверяемыеРеквизиты.Добавить("Продавец");
			ПроверяемыеРеквизиты.Добавить("ПокупательОрганизация");
		КонецЕсли;
		
		// Таблица
		ПроверяемыеРеквизиты.Добавить(".Номенклатура");
		ПроверяемыеРеквизиты.Добавить(".Количество");
		ПроверяемыеРеквизиты.Добавить(".Цена");
		ПроверяемыеРеквизиты.Добавить(".Сумма");
		ПроверяемыеРеквизиты.Добавить(".СтавкаНДС");
		ПроверяемыеРеквизиты.Добавить(".СуммаНДС");
		ПроверяемыеРеквизиты.Добавить(".Всего");
		
	ИначеЕсли ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату
		Или ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.НеопознанныйДокумент
		     И (ДокументОбъект.ВариантОбработки = Перечисления.ВариантыОбработкиЗаданияРаспознавания.СчетНаОплатуКлиента
		       Или ДокументОбъект.ВариантОбработки = Перечисления.ВариантыОбработкиЗаданияРаспознавания.СчетНаОплатуПоставщика) Тогда
		
		ПроверяемыеРеквизиты.Добавить("НомерДокумента");
		ПроверяемыеРеквизиты.Добавить("ДатаДокумента");
		ПроверяемыеРеквизиты.Добавить("Договор");
		ПроверяемыеРеквизиты.Добавить("ИтогоСумма");
		ПроверяемыеРеквизиты.Добавить("ИтогоСуммаНДС");
		ПроверяемыеРеквизиты.Добавить("ИтогоВсего");
		
		Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
			ПроверяемыеРеквизиты.Добавить("Покупатель");
			ПроверяемыеРеквизиты.Добавить("ПродавецОрганизация");
			ПроверяемыеРеквизиты.Добавить("Исполнитель");
			ПроверяемыеРеквизиты.Добавить("БанковскийСчетОрганизации");
		Иначе
			ПроверяемыеРеквизиты.Добавить("Продавец");
			ПроверяемыеРеквизиты.Добавить("ПокупательОрганизация");
			ПроверяемыеРеквизиты.Добавить("БанковскийСчетКонтрагента");
		КонецЕсли;
		
		// Таблица
		ПроверяемыеРеквизиты.Добавить(".Номенклатура");
		ПроверяемыеРеквизиты.Добавить(".Количество");
		ПроверяемыеРеквизиты.Добавить(".Цена");
		ПроверяемыеРеквизиты.Добавить(".Сумма");
		ПроверяемыеРеквизиты.Добавить(".СтавкаНДС");
		ПроверяемыеРеквизиты.Добавить(".СуммаНДС");
		ПроверяемыеРеквизиты.Добавить(".Всего");
		
	КонецЕсли;
	
	РаспознаваниеДокументовПереопределяемый.ПриОпределенииПроверяемыхРеквизитов(ДокументОбъект, ПроверяемыеРеквизиты);
	
	Возврат ПроверяемыеРеквизиты;
	
КонецФункции

Функция ПроблемныеРеквизиты(ДокументОбъект, Вариант = "Общий", ТаблицаВходящая = Неопределено) Экспорт
	
	ТаблицаПроблем = Новый ТаблицаЗначений;
	ТаблицаПроблем.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40)));
	ТаблицаПроблем.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	ТаблицаПроблем.Колонки.Добавить("ГруппаОшибки", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(40)));
	ТаблицаПроблем.Колонки.Добавить("ТекстПодсказки", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	
	ДанныеШапки = Новый Структура; // Необходимые для проверки таблицы
	ДанныеШапки.Вставить("ИтогоСуммаСкидки", РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(ДокументОбъект, "ИтогоСуммаСкидки", 0));
	ДанныеШапки.Вставить("ИтогоСумма", РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(ДокументОбъект, "ИтогоСумма", 0));
	ДанныеШапки.Вставить("ИтогоСуммаНДС", РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(ДокументОбъект, "ИтогоСуммаНДС", 0));
	ДанныеШапки.Вставить("ИтогоВсего", РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(ДокументОбъект, "ИтогоВсего", 0));	
	ДанныеШапки.Вставить("СуммаВключаетНДС", РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(ДокументОбъект, "СуммаВключаетНДС", Ложь));
	ДанныеШапки.Вставить("ВидСкидки", РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(ДокументОбъект, "ВидСкидки",
	РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НеПредоставлена));
	
	ВыделяемыеРеквизиты = ПроверяемыеРеквизиты(ДокументОбъект);
	
	Если ТипЗнч(ТаблицаВходящая) = Тип("ДанныеФормыКоллекция") Тогда
		ТаблицаДокумента = ТаблицаВходящая.Выгрузить();
	Иначе
		ТаблицаДокумента = ЗаполненнаяТаблицаДокумента(ДокументОбъект);
	КонецЕсли;

	// Заполнение для шапки
	Для Каждого Реквизит Из ДокументОбъект.РеквизитыДокумента Цикл
		Если Реквизит.ИмяРеквизита = "ИтогоСумма"
			Или Реквизит.ИмяРеквизита = "ИтогоСуммаНДС"
			Или Реквизит.ИмяРеквизита = "ИтогоВсего"
			Или Реквизит.ИмяРеквизита = "ИтогоСуммаСкидки" Тогда
			
			ИмяКолонки = СтрЗаменить(Реквизит.ИмяРеквизита, "Итого", "");
			Если ЕстьОшибкаВЗначенииИтогаПоТаблице(ТаблицаДокумента, ИмяКолонки, ДанныеШапки) Тогда
				ТекстПодсказки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПодсказкаЗначениеИтогаВПодвалеНеСовпадает();
				ДобавитьПроблемныйЭлемент(ТаблицаПроблем, Реквизит.ИмяРеквизита, 0, "", ТекстПодсказки);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если (Реквизит.ЗаполненоВручную И ЗначениеЗаполнено(Реквизит.Значение))
			Или ВыделяемыеРеквизиты.Найти(Реквизит.ИмяРеквизита) = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		
		ЭтоПримитивныйТип = РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(Реквизит.Значение));
		Если ЗначениеЗаполнено(Реквизит.Значение) Тогда
			Если Не ЭтоПримитивныйТип И Реквизит.Значение = Реквизит.НайденноеЗначение
				И Реквизит.УверенностьНайденногоЗначения < РаспознаваниеДокументовСлужебныйКлиентСервер.ГраницаУверенныхЗначений()
				И Вариант <> "ДляКомплекта" Тогда
				
				ТекстПодсказки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПодсказкаВозможнаОшибкаСопоставленияРаспознаннойСтроки();
				ДобавитьПроблемныйЭлемент(ТаблицаПроблем, Реквизит.ИмяРеквизита, 0, "", ТекстПодсказки);
			КонецЕсли;
		Иначе
			Если Реквизит.ИмяРеквизита = "Грузоотправитель"
				ИЛИ Реквизит.ИмяРеквизита = "Грузополучатель" Тогда
					
				// Если не заполнено, то по умолчанию выставлено "он же"
				Продолжить;
			ИначеЕсли Реквизит.ИмяРеквизита = "Договор" Тогда
				ТекстПодсказки = НСтр("ru = 'Не найден основной договор с выбранным контрагентом'");
			ИначеЕсли Реквизит.ИмяРеквизита = "Партнер" Тогда
				ТекстПодсказки = НСтр("ru = 'Не найден основной партнер выбранного контрагента'");
			ИначеЕсли Реквизит.ИмяРеквизита = "Склад" Тогда
				ТекстПодсказки = НСтр("ru = 'Требуется выбрать'");
			ИначеЕсли Реквизит.ИмяРеквизита = "Подразделение" Тогда
				ТекстПодсказки = НСтр("ru = 'Требуется выбрать'");
			ИначеЕсли Реквизит.ИмяРеквизита = "СоглашениеСКлиентом" Тогда
				ТекстПодсказки = НСтр("ru = 'Не найдено основное соглашение с выбранным контрагентом'");
			ИначеЕсли Реквизит.ИмяРеквизита = "СоглашениеСПоставщиком" Тогда
				ТекстПодсказки = НСтр("ru = 'Не найдено основное соглашение с выбранным контрагентом'");	
			ИначеЕсли ЭтоПримитивныйТип Тогда
				ТекстПодсказки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПодсказкаВозможнаОшибкаРаспознавания();
			Иначе
				ТекстПодсказки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПодсказкаНеНайденЭлементПоРаспознаннойСтроке();
			КонецЕсли;
				ДобавитьПроблемныйЭлемент(ТаблицаПроблем, Реквизит.ИмяРеквизита, 0, "", ТекстПодсказки);
		КонецЕсли;
	КонецЦикла;
		
	// Заполнение для чисел в таблице
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		ДобавитьОшибкиКоличествоЦенаСумма(ТаблицаПроблем, ДанныеШапки, ТаблицаДокумента, СтрокаТаблицы);
		ДобавитьОшибкиСуммаСуммаНДСВсего(ТаблицаПроблем, ДанныеШапки, ТаблицаДокумента, СтрокаТаблицы);
	КонецЦикла;
		
	СтрокВТаблице = ТаблицаДокумента.Количество();
	// Заполнение для оставшихся реквизитов таблицы
	Для Каждого Реквизит Из ДокументОбъект.РеквизитыТабличныхЧастей Цикл

		Если Ложь И ТаблицаВходящая = Неопределено Тогда
			// ТаблицаДокумента все равно формировалась из ДокументОбъект, и нет смысла делать доп проверки.
			ЗначениеРеквизита = Реквизит.Значение;
			РеквизитЗаполненВручную = Реквизит.ЗаполненоВручную;
		Иначе
			// Будем брать Значение и ЗаполненоВручную из таблицы, т.к. она может быть еще не перенесена в ДокументОбъект.
			// Найдем строку в ТаблицаДокумента, у которой Реквизит.НомерСтрокиТЧ = СтрокаТаблицы.НомерСтроки
			Если СтрокВТаблице >= Реквизит.НомерСтрокиТЧ
				И Реквизит.НомерСтрокиТЧ = ТаблицаДокумента[Реквизит.НомерСтрокиТЧ - 1].НомерСтроки Тогда
				
				// Если в таблице не меняли и не добавляли строки, то индекс совпадет и поиск делать не нужно
				СтрокаТаблицы = ТаблицаДокумента[Реквизит.НомерСтрокиТЧ - 1];
			Иначе
				СтрокаТаблицы = ТаблицаДокумента.Найти(Реквизит.НомерСтрокиТЧ, "НомерСтроки");
			КонецЕсли;
			
			Если СтрокаТаблицы = Неопределено Тогда
				// Строка удалена
				Продолжить;
			Иначе
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, Реквизит.ИмяРеквизита) Тогда
					ЗначениеРеквизита = СтрокаТаблицы[Реквизит.ИмяРеквизита];
				Иначе
					ЗначениеРеквизита = Реквизит.Значение;
				КонецЕсли;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, Реквизит.ИмяРеквизита + "ЗаполненоВручную") Тогда
					РеквизитЗаполненВручную = СтрокаТаблицы[Реквизит.ИмяРеквизита + "ЗаполненоВручную"];
				Иначе
					РеквизитЗаполненВручную = Реквизит.ЗаполненоВручную;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

		Если (РеквизитЗаполненВручную И ЗначениеЗаполнено(ЗначениеРеквизита)) Или Реквизит.СтрокаУдалена
			Или ВыделяемыеРеквизиты.Найти(Реквизит.ТабличнаяЧасть + "." + Реквизит.ИмяРеквизита) = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
			
		Если Реквизит.ИмяРеквизита = "Количество"
			ИЛИ Реквизит.ИмяРеквизита = "Цена"
			ИЛИ Реквизит.ИмяРеквизита = "Сумма"
			ИЛИ Реквизит.ИмяРеквизита = "СуммаНДС"
			ИЛИ Реквизит.ИмяРеквизита = "Всего" Тогда
				
			// Нужен сложный расчет, который проведен выше
			Продолжить;
		КонецЕсли;
			
		ЭтоПримитивныйТип = РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(ЗначениеРеквизита));
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Если Не ЭтоПримитивныйТип И ЗначениеРеквизита = Реквизит.НайденноеЗначение
				И Реквизит.УверенностьНайденногоЗначения < РаспознаваниеДокументовСлужебныйКлиентСервер.ГраницаУверенныхЗначений()
				И Вариант <> "ДляКомплекта" Тогда
				
				ТекстПодсказки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПодсказкаВозможнаОшибкаСопоставленияРаспознаннойСтроки();
				ДобавитьПроблемныйЭлемент(ТаблицаПроблем, Реквизит.ИмяРеквизита, Реквизит.НомерСтрокиТЧ, "", ТекстПодсказки);
			КонецЕсли;
		Иначе
			Если ЭтоПримитивныйТип Тогда
				ТекстПодсказки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПодсказкаВозможнаОшибкаРаспознавания();
			Иначе
				ТекстПодсказки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПодсказкаНеНайденЭлементПоРаспознаннойСтроке();
			КонецЕсли;
			ДобавитьПроблемныйЭлемент(ТаблицаПроблем, Реквизит.ИмяРеквизита, Реквизит.НомерСтрокиТЧ, "", ТекстПодсказки);
		КонецЕсли;
	КонецЦикла;
	
	Если Вариант = "ДляКомплекта" Тогда
		ИдСтроки = ТаблицаПроблем.Количество();
		Пока ИдСтроки > 0 Цикл
			ИдСтроки = ИдСтроки - 1;
			Если //ТаблицаПроблем[ИдСтроки].ИмяРеквизита = "ИтогоСуммаСкидки"
				//Или 
				ТаблицаПроблем[ИдСтроки].ИмяРеквизита = "ИтогоСумма"
				Или ТаблицаПроблем[ИдСтроки].ИмяРеквизита = "ИтогоСуммаНДС"
				Или ТаблицаПроблем[ИдСтроки].ИмяРеквизита = "ИтогоВсего" Тогда
				
				ТаблицаПроблем.Удалить(ИдСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РаспознаваниеДокументовПереопределяемый.ПриОбработкеПроверкиЗаполненияРеквизитов(ДокументОбъект, ТаблицаПроблем);
	
	Возврат ТаблицаПроблем;
	
КонецФункции

Процедура ДобавитьОшибкиКоличествоЦенаСумма(ПроблемныеРеквизиты, ДанныеШапки, ТаблицаДокумента, СтрокаТаблицы)
	
	//Если ДанныеШапки.ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НаОтдельныеПозиции Тогда
	//	
	//	Если Окр(СтрокаТаблицы.Количество * СтрокаТаблицы.Цена, 2) <> СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаСкидки
	//		И (СтрокаТаблицы.Количество = 0
	//		Или Окр((СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаСкидки) / СтрокаТаблицы.Количество, 2) <> СтрокаТаблицы.Цена) Тогда
	//		
	//		ТекстПодсказки = НСтр("ru = 'Количество * Цена - Скидка не совпадает с Сумма'");
	//		ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "Количество", СтрокаТаблицы.НомерСтроки, "Количество", ТекстПодсказки);
	//		ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "Цена", СтрокаТаблицы.НомерСтроки, "Количество", ТекстПодсказки);
	//		
	//	КонецЕсли;
		
	//Иначе
	
		Если Окр(СтрокаТаблицы.Количество * СтрокаТаблицы.Цена, 2) <> СтрокаТаблицы.Сумма
			И (СтрокаТаблицы.Количество = 0 Или Окр(СтрокаТаблицы.Сумма / СтрокаТаблицы.Количество, 2) <> СтрокаТаблицы.Цена) Тогда
			
			ТекстПодсказки = НСтр("ru = 'Количество * Цена не совпадает с Сумма'");
			ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "Количество", СтрокаТаблицы.НомерСтроки, "Количество", ТекстПодсказки);
			ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "Цена", СтрокаТаблицы.НомерСтроки, "Количество", ТекстПодсказки);
			
		КонецЕсли;
	
	//КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОшибкиСуммаСуммаНДСВсего(ПроблемныеРеквизиты, ДанныеШапки, ТаблицаДокумента, СтрокаТаблицы)
	
	Если НЕ ЗначенияСуммаСуммаНДСВсегоСовпадают(СтрокаТаблицы, ДанныеШапки.СуммаВключаетНДС) Тогда
		ТекстПодсказки = НСтр("ru = 'Сумма + Сумма НДС не совпадает с Всего'");
		
		Если НЕ СуммаИтогоПоКолонкеСовпадает(ТаблицаДокумента, "Сумма", ДанныеШапки.ИтогоСумма) Тогда
			ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "Сумма", СтрокаТаблицы.НомерСтроки, "Всего", ТекстПодсказки);
		КонецЕсли;
		
		Если НЕ СуммаИтогоПоКолонкеСовпадает(ТаблицаДокумента, "СуммаНДС", ДанныеШапки.ИтогоСуммаНДС) Тогда
			ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "СуммаНДС", СтрокаТаблицы.НомерСтроки, "Всего", ТекстПодсказки);
		КонецЕсли;
		
		Если НЕ СуммаИтогоПоКолонкеСовпадает(ТаблицаДокумента, "Всего", ДанныеШапки.ИтогоВсего) Тогда
			ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, "Всего", СтрокаТаблицы.НомерСтроки, "Всего", ТекстПодсказки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПроблемныйЭлемент(ПроблемныеРеквизиты, ИмяРеквизита, НомерСтроки = 0, ГруппаОшибки = "", ТекстПодсказки)
	
	Строка = ПроблемныеРеквизиты.Добавить();
	Строка.ИмяРеквизита = ИмяРеквизита;
	Строка.НомерСтроки = НомерСтроки;
	Строка.ГруппаОшибки = ГруппаОшибки;
	Строка.ТекстПодсказки = ТекстПодсказки;
	
КонецПроцедуры

Функция СуммаИтогоПоКолонкеСовпадает(КоллекцияЗаписей, ИмяКолонкиСравнения, ЗначениеДляСравнения)
	
	Возврат КоллекцияЗаписей.Итог(ИмяКолонкиСравнения) = ЗначениеДляСравнения;
	
КонецФункции

Функция ЗначенияСуммаСуммаНДСВсегоСовпадают(ПроверяемаяЗапись, СуммаВключаетНДС)
	
	Если СуммаВключаетНДС Тогда
		СтавкаНДС = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(ПроверяемаяЗапись.СтавкаНДС);
		СуммаНДС = РаспознаваниеДокументовСлужебныйКлиентСервер.РассчитатьСуммуНДС(ПроверяемаяЗапись.Сумма, Истина, СтавкаНДС);
		НДСОкругленный = Окр(СуммаНДС, 2);
		
		Возврат ПроверяемаяЗапись.Сумма = ПроверяемаяЗапись.Всего И ПроверяемаяЗапись.СуммаНДС = НДСОкругленный;
	Иначе
		Возврат ПроверяемаяЗапись.Сумма + ПроверяемаяЗапись.СуммаНДС = ПроверяемаяЗапись.Всего;
	КонецЕсли;
	
КонецФункции

#Область ПроблемныеРеквизитыНаФорме

Процедура ПересчитатьПроблемныеЭлементы(Форма) Экспорт
	
	ТаблицаПроблем = ПроблемныеРеквизиты(Форма.Объект, , Форма.ТаблицаДокумента);
	
	// Удалим решенные проблемные элементы
	ИндексПроблемы = Форма.ПроблемныеЭлементы.Количество();
	Пока ИндексПроблемы > 0 Цикл
		ИндексПроблемы = ИндексПроблемы - 1;
		СтрокаПроблемы = Форма.ПроблемныеЭлементы[ИндексПроблемы];
		Отбор = Новый Структура("ИмяРеквизита, НомерСтроки, ГруппаОшибки");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПроблемы);
		
		Если ТаблицаПроблем.НайтиСтроки(Отбор).Количество() = 0 Тогда
			// В новой таблице нет старой проблемы
			Если СтрокаПроблемы.НомерСтроки = 0 Тогда
				РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЦветПоляПоУмолчанию(Форма, СтрокаПроблемы.ИмяРеквизита);
			Иначе
				РаспознаваниеДокументовСлужебныйКлиентСервер.ОтключитьУсловноеОформление(Форма, "ТаблицаДокумента", СтрокаПроблемы);
			КонецЕсли;
			Форма.ПроблемныеЭлементы.Удалить(СтрокаПроблемы);
		КонецЕсли;
	КонецЦикла;
	
	Если Не Форма.Элементы.СоглашениеСПоставщиком.Видимость Тогда
		Отбор = Новый Структура("ИмяРеквизита", "СоглашениеСПоставщиком");
		Строка = ТаблицаПроблем.НайтиСтроки(Отбор);	
		Если Строка.Количество() Тогда
			ТаблицаПроблем.Удалить(Строка[0]);
		КонецЕсли;	
	КонецЕсли;

	// Добавим новые проблемные элементы
	Для Каждого СтрокаПроблемы Из ТаблицаПроблем Цикл
		Отбор = Новый Структура("ИмяРеквизита, НомерСтроки, ГруппаОшибки");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПроблемы);
		
		Если Форма.ПроблемныеЭлементы.НайтиСтроки(Отбор).Количество() = 0 Тогда
			// В старой таблице нет новой проблемы
			Если СтрокаПроблемы.НомерСтроки = 0 Тогда
				РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЦветИДобавитьВПроблемные(Форма, СтрокаПроблемы);
			Иначе
				РаспознаваниеДокументовСлужебныйКлиентСервер.ДобавитьВУсловноеОформлениеИВПроблемные(Форма, "ТаблицаДокумента", СтрокаПроблемы)
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьКоличествоОшибок(Форма);
	
КонецПроцедуры

Процедура ВосстановитьТекстыОшибок(Форма, ИмяТаблицы = "ТаблицаДокумента") Экспорт
	
	Для Каждого СтрокаПроблемы Из Форма.ПроблемныеЭлементы Цикл
		
		СтрокиТаблицы = Форма[ИмяТаблицы].НайтиСтроки(Новый Структура("НомерСтроки", СтрокаПроблемы.НомерСтроки));
		Если СтрокиТаблицы.Количество() = 1 Тогда
			СтрокиТаблицы[0][СтрокаПроблемы.ИмяРеквизита + "ТекстОшибки"] = СтрокаПроблемы.ТекстПодсказки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ДобавитьСоответствиеРеквизита(ОбработанныеРеквизиты, ИмяАтрибутаJSON, ИмяРеквизита, ОписаниеТипа, НеОтображать = Ложь, НетНаПечатнойФорме = Ложь)
	
	СвойстваРеквизита = ОбработанныеРеквизиты.Добавить();
	СвойстваРеквизита.Адрес = ИмяАтрибутаJSON;
	СвойстваРеквизита.ИмяРеквизита = ИмяРеквизита;
	СвойстваРеквизита.ОписаниеТипа = ОписаниеТипа;
	СвойстваРеквизита.НеОтображать = НеОтображать;
	СвойстваРеквизита.НетНаПечатнойФорме = НетНаПечатнойФорме;
	
КонецПроцедуры

Функция ПараметрыВыбораДоговора(ДокументОбъект) Экспорт
	
	// Ключи - Контрагент, Организация
	// Значения - сначала имена реквизитов для поиска, затем фактические значения
	Результат = РаспознаваниеДокументовСлужебныйКлиентСервер.ИменаРеквизитовКонтрагентИОрганизация(ДокументОбъект);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Отбор = Новый Структура("ИмяРеквизита", Результат.Контрагент);
		НайденныеСтроки = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Результат.Вставить("Контрагент", НайденныеСтроки[0].Значение);
		КонецЕсли;
		
		Отбор = Новый Структура("ИмяРеквизита", Результат.Организация);
		НайденныеСтроки = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Результат.Вставить("Организация", НайденныеСтроки[0].Значение);
		КонецЕсли;
	Иначе
		Результат.Вставить("Контрагент", Неопределено);
		Результат.Вставить("Организация", Неопределено);
	КонецЕсли;
	
	РаспознаваниеДокументовПереопределяемый.ПриЗаполненииПараметровВыбораДоговора(ДокументОбъект, Результат);
	
	Возврат Результат;
	
КонецФункции

Функция НайтиДоговорКонтрагента(ДокументОбъект) Экспорт
	
	ПараметрыДоговора = ПараметрыВыбораДоговора(ДокументОбъект);
	
	РеквизитыПоиска = Новый Массив;
	РеквизитыПоиска.Добавить("НомерДоговора");
	РеквизитыПоиска.Добавить("ДатаДоговора");
	
	Для Каждого ИмяРеквизита Из РеквизитыПоиска Цикл
		Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
		СтрокиПоиска = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если СтрокиПоиска.Количество() <> 0 Тогда
			ПараметрыДоговора.Вставить(ИмяРеквизита, СтрокиПоиска[0].Значение);
		Иначе
			ПараметрыДоговора.Вставить(ИмяРеквизита, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеДоговора = Неопределено;
	РаспознаваниеДокументовПереопределяемый.ПриЗаполненииДоговораКонтрагента(
		ЗначениеДоговора, ДокументОбъект, ПараметрыДоговора);
	
	Возврат ЗначениеДоговора;
	
КонецФункции

Процедура ЗаполнитьДоговорКонтрагента(ДокументОбъект) Экспорт
		
	ЗначениеДоговора = НайтиДоговорКонтрагента(ДокументОбъект);
		
	Отбор = Новый Структура("ИмяРеквизита", "Договор");
	НайденныеСтроки = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		НайденныеСтроки[0].Значение = ЗначениеДоговора;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПартнераКонтрагента(ДокументОбъект) Экспорт
	
	//Параметры выбора договора для поиска партнера тоже подходят
	ПараметрыВыбораДоговора = ПараметрыВыбораДоговора(ДокументОбъект);
		
	Партнер = Справочники.Партнеры.ПустаяСсылка();
	
	// Используем заполнение без нечеткого поиска
	Если ЗначениеЗаполнено(ПараметрыВыбораДоговора.Контрагент) Тогда
	//	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
			Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(ПараметрыВыбораДоговора.Контрагент);
	//	Иначе
	//		Партнер = ПараметрыВыбораДоговора.Контрагент.Партнер;	
	 //   КонецЕсли;
    КонецЕсли;

	Отбор = Новый Структура("ИмяРеквизита", "Партнер");
	СтрокиПоиска = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
	Если СтрокиПоиска.Количество() <> 0 Тогда
		СтрокиПоиска[0].Значение = Партнер;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСоглашениеКонтрагента(ДокументОбъект) Экспорт
	
	ХозОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ПараметрыОтбора = Новый Структура("ХозяйственныеОперации",ХозОперация);

	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		Отбор = Новый Структура("ИмяРеквизита", "Партнер");
		СтрокиПоиска = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если СтрокиПоиска.Количество() <> 0 Тогда
			Если ЗначениеЗаполнено(СтрокиПоиска[0].Значение) Тогда
				Партнер = СтрокиПоиска[0].Значение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыДоговора = ПараметрыВыбораДоговора(ДокументОбъект);
		Партнер = ПараметрыДоговора.Партнер;
	КонецЕсли;
	
	Если Партнер = Неопределено Тогда
		Партнер = Справочники.Партнеры.ПустаяСсылка();
	КонецЕсли;
	
	// Используем заполнение без нечеткого поиска
	Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
		ХозОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		ПараметрыОтбора = Новый Структура("ХозяйственныеОперации",ХозОперация);

		Соглашение = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Партнер, ПараметрыОтбора); 
		//= СамообслуживаниеСервер.ПолучитьСоглашениеПартнераПоУмолчанию(Партнер, ХозОперация);

		Отбор = Новый Структура("ИмяРеквизита", "СоглашениеСКлиентом");
		СтрокиПоиска = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если (СтрокиПоиска.Количество() <> 0 И Соглашение <> Неопределено) Тогда
			СтрокиПоиска[0].Значение = Соглашение.Соглашение;
		Иначе
			СтрокиПоиска[0].Значение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		КонецЕсли;
	Иначе
		ХозОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		ПараметрыОтбора = Новый Структура("ХозяйственныеОперации",ХозОперация);

		Соглашение = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Партнер, ПараметрыОтбора);

		Отбор = Новый Структура("ИмяРеквизита", "СоглашениеСПоставщиком");
		СтрокиПоиска = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если (СтрокиПоиска.Количество() <> 0 И Соглашение <> Неопределено) Тогда
			СтрокиПоиска[0].Значение = Соглашение.Соглашение;
		Иначе
			СтрокиПоиска[0].Значение = Справочники.СоглашенияСПоставщиками.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьБанковскийСчет(ДокументОбъект) Экспорт
	
	ВсеДанныеСчета = Новый Структура;
	ВсеДанныеСчета.Вставить("Банк");
	ВсеДанныеСчета.Вставить("БанкНаименование");
	ВсеДанныеСчета.Вставить("БанкСчет");
	ВсеДанныеСчета.Вставить("Договор");
	ВсеДанныеСчета.Вставить("Продавец");
	ВсеДанныеСчета.Вставить("ПродавецОрганизация");
	
	Для Каждого ДанныеРеквизита Из ВсеДанныеСчета Цикл
		Отбор = Новый Структура("ИмяРеквизита", ДанныеРеквизита.Ключ);
		СтрокиПоиска = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если СтрокиПоиска.Количество() <> 0 Тогда
			ВсеДанныеСчета.Вставить(ДанныеРеквизита.Ключ, СтрокиПоиска[0].Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыСчета = Новый Структура("Банк, БанкНаименование, БанкСчет, Договор");
	ЗаполнитьЗначенияСвойств(ПараметрыСчета, ВсеДанныеСчета);
	
	// Банковский счет Контрагента (для Направление = Входящий)
	Отбор = Новый Структура("ИмяРеквизита", "БанковскийСчетКонтрагента");
	НайденныеСтроки = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Счет = НайденныеСтроки[0].Значение;
		
		ПараметрыСчета.Вставить("Владелец", ВсеДанныеСчета.Продавец);
		РаспознаваниеДокументовПереопределяемый.ПриЗаполненииБанковскогоСчета(Счет, ДокументОбъект, ПараметрыСчета);
		
		НайденныеСтроки[0].Значение = Счет;
	КонецЕсли;
	
	// Банковский счет Организации (для Направление = Исходящий)
	Отбор = Новый Структура("ИмяРеквизита", "БанковскийСчетОрганизации");
	НайденныеСтроки = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Счет = НайденныеСтроки[0].Значение;
		
		ПараметрыСчета.Вставить("Владелец", ВсеДанныеСчета.ПродавецОрганизация);
		РаспознаваниеДокументовПереопределяемый.ПриЗаполненииБанковскогоСчета(Счет, ДокументОбъект, ПараметрыСчета);
		
		НайденныеСтроки[0].Значение = Счет;
	КонецЕсли;
	
КонецПроцедуры

Функция ВалютаОплаты(ДоговорКонтрагента) Экспорт
	
	Валюта = Неопределено;
	РаспознаваниеДокументовПереопределяемый.ПриЗаполненииВалютыОплаты(ДоговорКонтрагента, Валюта);
	
	Возврат Валюта;
	
КонецФункции

Процедура ЗаполнитьСчетФактуруИзРаспознанногоДокумента(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("РаспознаваниеДокументов") Тогда
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения);
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
			Источник.ДатаВыставления = Источник.Дата;
		Иначе
			Источник.ДатаВходящегоДокумента = Источник.Дата;
			Источник.НомерВходящегоДокумента = Источник.Номер;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыСозданияНоменклатуры() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ОписаниеРеквизита");
	Таблица.Колонки.Добавить("ОписаниеЭлемента");
	
	Возврат Таблица;
	
КонецФункции

Процедура ДобавитьРеквизитыДляСозданияНоменклатуры(Форма, СвойстваОбработки) Экспорт
	
	ИмяТаблицы = СвойстваОбработки.ИмяЭлементаТаблицы;
	ИмяГруппыРеквизитов = СвойстваОбработки.ИмяЭлементаРеквизитовОбъекта;
	ИмяПроцедурыПриИзменении = СвойстваОбработки.ИмяПроцедурыПриИзменении;
	ИмяПроцедурыИзменениеФлажка = СвойстваОбработки.ИмяПроцедурыИзменениеФлажка;
	
	ЭлементДобавления = ЭлементФормыПоИмениРеквизита(Форма.Элементы, ИмяТаблицы);
	Если ЭлементДобавления = Неопределено Тогда
		Возврат; // Не найдена таблица для добавления реквизитов - дальнейшая обработка не имеет смысла
	КонецЕсли;
	
	ГруппаБыстрогоРедактирования = Форма.Элементы.Найти(ИмяГруппыРеквизитов);
	
	Параметры = ПараметрыСозданияНоменклатуры();
	РаспознаваниеДокументовПереопределяемый.ПриОпределенииПараметровСозданияНоменклатуры(Параметры);
	
	Если Не Параметры.Количество() Тогда // Отсутствуют реквизиты - дальнейшая обработка не имеет смысла
		Возврат;
	КонецЕсли;
	
	НовыеРеквизиты = РеквизитыДляСозданияНоменклатуры(Параметры, ИмяТаблицы);
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	
	// Вывод реквизитов на форму
	Для Каждого ДобавляемыйРеквизит Из Параметры Цикл
		
		ОписаниеРеквизита = ДобавляемыйРеквизит.ОписаниеРеквизита;
		ОписаниеЭлемента = ДобавляемыйРеквизит.ОписаниеЭлемента;
		
		// Колонки таблицы
		ИмяЭлемента = ЭлементДобавления.Имя + ОписаниеРеквизита.Имя; // Для исключения возможности повторения
		
		ЭлементФормы = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ЭлементДобавления);
		ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы.ПутьКДанным = ЭлементДобавления.ПутьКДанным + "." + ОписаниеРеквизита.Имя;
		Если ОписаниеРеквизита.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ЭлементФормы.АвтоотметкаНезаполненного = Истина;
		КонецЕсли;
		Если Не ОписаниеЭлемента = Неопределено Тогда
			Для Каждого СвойствоЭлемента Из ОписаниеЭлемента Цикл
				ЭлементФормы[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
			КонецЦикла;
		КонецЕсли;
		
		// Поля для быстрого редактирования
		Если ГруппаБыстрогоРедактирования = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = "Группа" + ИмяЭлемента;
		
		ГруппаЭлемента = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ГруппаБыстрогоРедактирования);
		ГруппаЭлемента.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлемента.ОтображатьЗаголовок = Ложь;
		ГруппаЭлемента.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаЭлемента.Объединенная = Ложь;
		
		ПолеНераспознаннойНоменклатуры = Форма.ПоляНераспознаннойНоменклатуры.Добавить();
		ПолеНераспознаннойНоменклатуры.ИмяРеквизита = ОписаниеРеквизита.Имя;
		ПолеНераспознаннойНоменклатуры.Значение = ОписаниеРеквизита.Тип.ПривестиЗначение();
		ИндексПоля = Форма.ПоляНераспознаннойНоменклатуры.Индекс(ПолеНераспознаннойНоменклатуры);
		
		ФлажокБыстрогоРедактирования = Форма.Элементы.Добавить("Флажок" + ИмяЭлемента, Тип("ПолеФормы"), ГруппаЭлемента);
		ФлажокБыстрогоРедактирования.Вид = ВидПоляФормы.ПолеФлажка;
		ФлажокБыстрогоРедактирования.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ФлажокБыстрогоРедактирования.ПутьКДанным = "ПоляНераспознаннойНоменклатуры[" + ИндексПоля + "].Выбран";
		ФлажокБыстрогоРедактирования.УстановитьДействие("ПриИзменении", ИмяПроцедурыИзменениеФлажка);
		
		ЭлементБыстрогоРедактирования = Форма.Элементы.Добавить("Поле" + ИмяЭлемента, Тип("ПолеФормы"), ГруппаЭлемента);
		ЭлементБыстрогоРедактирования.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементБыстрогоРедактирования.Заголовок = ОписаниеРеквизита.Синоним;
		ЭлементБыстрогоРедактирования.ВыбиратьТип = Ложь;
		ЭлементБыстрогоРедактирования.ПутьКДанным = "ПоляНераспознаннойНоменклатуры[" + ИндексПоля + "].Значение";
		Если ОписаниеРеквизита.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ЭлементБыстрогоРедактирования.АвтоотметкаНезаполненного = Истина;
		КонецЕсли;
		Если Не ОписаниеЭлемента = Неопределено Тогда
			Для Каждого СвойствоЭлемента Из ОписаниеЭлемента Цикл
				ЭлементБыстрогоРедактирования[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
			КонецЦикла;
		КонецЕсли;
		
		ЭлементБыстрогоРедактирования.УстановитьДействие("ПриИзменении", ИмяПроцедурыПриИзменении);
		
	КонецЦикла;
	
КонецПроцедуры

Функция НоваяНоменклатураПоПараметрам(Параметры) Экспорт
	
	НоваяНоменклатура = Неопределено;
	РаспознаваниеДокументовПереопределяемый.ОбработкаСозданияНоменклатуры(НоваяНоменклатура, Параметры);
	
	Возврат НоваяНоменклатура;
	
КонецФункции

Процедура ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, ИмяРеквизита, Кандидаты, НомерСтроки = Неопределено) Экспорт
	
	Если Кандидаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НомерСтроки = Неопределено Тогда
		НаборЗаписей = РегистрыСведений.СписокВыбораРеквизитовРаспознаваниеДокументов.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей = РегистрыСведений.СписокВыбораТабличныхЧастейРаспознаваниеДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НомерСтрокиТЧ.Установить(НомерСтроки);
	КонецЕсли;
	
	НаборЗаписей.Отбор.РаспознанныйДокумент.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.ИмяРеквизита.Установить(ИмяРеквизита);
	
	// Для поиска по нескольким реквизитам затираем результаты старого нечеткого поиска,
	// кроме найденных в регистре СоответствиеРаспознанныхСтрокРаспознаваниеДокументов
	НаборЗаписей.Прочитать();
	
	НаиболееУверенноеЗначениеПройдено = Ложь;
	ИмеющиесяДанные = НаборЗаписей.Выгрузить();
	Если ИмеющиесяДанные.Количество() Тогда
		ТекущийПорядковыйНомер = 0;
		Ид = ИмеющиесяДанные.Количество();
		Пока Ид > 0 Цикл
			Ид = Ид - 1;
			Если ИмеющиесяДанные[Ид].НайденВТаблицеСоответствий Тогда
				ЗаполнитьНайденноеЗначениеВОбъекте(ДокументОбъект, ИмяРеквизита, НомерСтроки, ИмеющиесяДанные[Ид].Значение, ИмеющиесяДанные[Ид].Уверенность, НаиболееУверенноеЗначениеПройдено);
				ТекущийПорядковыйНомер = ТекущийПорядковыйНомер + 1;
				ИмеющиесяДанные[Ид].ПорядковыйНомер = ТекущийПорядковыйНомер;
			Иначе
				ИмеющиесяДанные.Удалить(Ид);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекущийПорядковыйНомер = 0;
	КонецЕсли;
	
	НаборЗаписей.Загрузить(ИмеющиесяДанные);
	
	Для Каждого Кандидат Из Кандидаты Цикл
		
		ЗаполнитьНайденноеЗначениеВОбъекте(ДокументОбъект, ИмяРеквизита, НомерСтроки, Кандидат.Ссылка, Кандидат.Коэффициент * 100, НаиболееУверенноеЗначениеПройдено);
		ЕстьСовпадение = Ложь;
		Для Каждого ИмеющаясяЗапись Из НаборЗаписей Цикл
			Если ИмеющаясяЗапись.Значение = Кандидат.Ссылка
				И ИмеющаясяЗапись.ДополнительноеЗначение = Кандидат.ДополнительнаяСсылка Тогда
				
				Если НЕ ИмеющаясяЗапись.НайденВТаблицеСоответствий Тогда
					ИмеющаясяЗапись.Уверенность = Кандидат.Коэффициент * 100;
				КонецЕсли;
				ЕстьСовпадение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьСовпадение Тогда
			ТекущийПорядковыйНомер = ТекущийПорядковыйНомер + 1;
			ДанныеНабора = НаборЗаписей.Добавить();
			ДанныеНабора.РаспознанныйДокумент = ДокументСсылка;
			ДанныеНабора.ПорядковыйНомер = ТекущийПорядковыйНомер;
			ДанныеНабора.ИмяРеквизита = ИмяРеквизита;
			ДанныеНабора.Значение = Кандидат.Ссылка;
			ДанныеНабора.ДополнительноеЗначение = Кандидат.ДополнительнаяСсылка;
			ДанныеНабора.Уверенность = Кандидат.Коэффициент * 100;
			Если НЕ НомерСтроки = Неопределено Тогда
				ДанныеНабора.НомерСтрокиТЧ = НомерСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьНайденноеЗначениеВОбъекте(ДокументОбъект, ИмяРеквизита, НомерСтроки, Значение, Уверенность, НаиболееУверенноеЗначениеПройдено)
	
	Если НаиболееУверенноеЗначениеПройдено Тогда
		Возврат;
	КонецЕсли;
	
	НаиболееУверенноеЗначениеПройдено = Истина;
	Если НомерСтроки = Неопределено Тогда
		НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти(ИмяРеквизита, "ИмяРеквизита");
		Если НайденнаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Отбор = Новый Структура("ИмяРеквизита, НомерСтрокиТЧ", ИмяРеквизита, НомерСтроки);
		НайденныеСтроки = ДокументОбъект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		Иначе
			НайденнаяСтрока = НайденныеСтроки[0];
		КонецЕсли;
	КонецЕсли;
	
	НайденнаяСтрока.НайденноеЗначение = Значение;
	НайденнаяСтрока.УверенностьНайденногоЗначения = Уверенность;
	
КонецПроцедуры

Функция ЭлементФормыПоИмениРеквизита(ЭлементыФормы, ИмяРеквизита)
	
	Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
		Если Не (ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Или ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЗаканчиваетсяНа(ЭлементФормы.ПутьКДанным, ИмяРеквизита) Тогда
			Возврат ЭлементФормы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция РеквизитыДляСозданияНоменклатуры(Реквизиты, ИмяТаблицыНераспознаннойНоменклатуры) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив();
	
	Для Каждого ДобавляемыйРеквизит Из Реквизиты Цикл
		НовыйРеквизит = Новый РеквизитФормы(ДобавляемыйРеквизит.ОписаниеРеквизита.Имя,
											ДобавляемыйРеквизит.ОписаниеРеквизита.Тип,
											ИмяТаблицыНераспознаннойНоменклатуры,
											ДобавляемыйРеквизит.ОписаниеРеквизита.Синоним);
		
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;
	
	Возврат ДобавляемыеРеквизиты;
	
КонецФункции

Функция ПолучитьПараметрыПрисоединяемогоФайла(Объект, ВладелецФайлов, ДвоичныеДанные)
	
	СтруктураИмениФайла = РазложитьИмяФайла(Объект.ИмяФайла);
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",     ВладелецФайлов);
	ПараметрыФайла.Вставить("Автор",              Неопределено);
	ПараметрыФайла.Вставить("ИмяБезРасширения",   СтруктураИмениФайла.Имя);
	ПараметрыФайла.Вставить("РасширениеБезТочки", "jpeg");
	ПараметрыФайла.Вставить("ГруппаФайлов",       Неопределено);
	ПараметрыФайла.Вставить("Размер",             ДвоичныеДанные.Размер());
	ПараметрыФайла.Вставить("ВремяИзменения");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	
	Возврат ПараметрыФайла;
	
КонецФункции

Процедура ДобавитьПрисоединенныйФайл(Объект, ВладелецФайлов, АдресКартинки) Экспорт
	
	Если Не ЗначениеЗаполнено(ВладелецФайлов) Тогда
		Возврат
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресКартинки);
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда 
		ПараметрыФайла = ПолучитьПараметрыПрисоединяемогоФайла(Объект, ВладелецФайлов, ДвоичныеДанные);
		
		Если Не ФайлУжеЕстьУВладельца(ВладелецФайлов, ПараметрыФайла) Тогда
			
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресКартинки);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  

Функция ФайлУжеЕстьУВладельца(ВладелецФайлов, ПараметрыФайла)
	
	Файлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ВладелецФайлов, Файлы);
	Для Каждого Файл Из Файлы Цикл
		
		Попытка
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(Файл);
			Если ДанныеФайла.Наименование = ПараметрыФайла.ИмяБезРасширения
				И ДанныеФайла.Размер = ПараметрыФайла.Размер Тогда
				
				Возврат Истина;
			КонецЕсли;
		Исключение
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СканУжеЕстьУВладельца(Объект, ВладелецФайлов, АдресСкана) Экспорт
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресСкана);
	Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда 
		ПараметрыФайла = ПолучитьПараметрыПрисоединяемогоФайла(Объект, ВладелецФайлов, ДвоичныеДанные);
		Возврат ФайлУжеЕстьУВладельца(ВладелецФайлов, ПараметрыФайла);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиДубльНоменклатуры(ИскомаяЗапись, НаборЗаписей)
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись = ИскомаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		Идентичны = (ИскомаяЗапись["Наименование"] = Запись["Наименование"] И
			(ИскомаяЗапись["Артикул"] = Запись["Артикул"]
			Или ПустаяСтрока(ИскомаяЗапись["Артикул"])
			Или ПустаяСтрока(Запись["Артикул"]))
		);
		
		Если Идентичны И ЗначениеЗаполнено(Запись.Ссылка) Тогда
			Возврат Запись.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#Область РаботаСоСтроками

// Возвращает структуру
// Результат (Структура)
// - Имя (Строка)
// - Расширение (Строка)
//
// Параметры:
// - ИмяФайла (Строка)
//
Функция РазложитьИмяФайла(ИмяФайла) Экспорт
	
	Расширение = ИмяФайла;
	Поз = Найти(Расширение, ".");
	Если Поз = 0 Тогда
		Возврат Новый Структура("Имя, Расширение", СокрЛП(ИмяФайла), "");
	КонецЕсли;
	Пока Поз > 0 Цикл
		Расширение = Сред(Расширение, Поз + 1);
		Поз = Найти(Расширение, ".");
	КонецЦикла;
	Имя = Лев(ИмяФайла, СтрДлина(ИмяФайла) - СтрДлина(Расширение) - 1);
	Возврат Новый Структура("Имя, Расширение", СокрЛП(Имя), СокрЛП(Расширение));
	
КонецФункции

#КонецОбласти

#Область ФормаРаспознанногоДокумента

Процедура ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ЗаписьРапознанногоДокументаРазрешена = ПараметрыЗаписи.Свойство("ЗаписьРапознанногоДокументаРазрешена")
		И ПараметрыЗаписи.ЗаписьРапознанногоДокументаРазрешена = Истина;
	
	Если Не ЗаписьРапознанногоДокументаРазрешена Тогда
		Отказ = Истина;
		
		ПараметрыЗаписи.Вставить("ЗаписьРапознанногоДокументаРазрешена", Истина);

			УстановитьПривилегированныйРежим(Истина);
			ЭтотОбъект.Записать(ПараметрыЗаписи);
			УстановитьПривилегированныйРежим(Ложь);
		
		Возврат;
	КонецЕсли;
	
	РаспознаваниеДокументовПереопределяемый.ПередЗаписьюФормыРаспознаванияНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

Функция ПараметрыСозданияНовогоЭлемента(ИмяЭлемента, ТипДокумента, Направление) Экспорт
	
	СвязанныеКолонки = Новый Массив;
	РаспознаваниеДокументовПереопределяемый.ПриЗаполненииПараметровСозданияНовогоЭлемента(
		СвязанныеКолонки,
		ИмяЭлемента,
		ТипДокумента,
		Направление);
	
	Возврат СвязанныеКолонки;
	
КонецФункции

Процедура ДобавитьИННКПП(ПараметрыПоиска, ИННКПП)
	
	ПараметрыПоиска.Вставить("ИНН", ИзвлечьИННКППИзСтроки(ИННКПП, "ИНН"));
	ПараметрыПоиска.Вставить("КПП", ИзвлечьИННКППИзСтроки(ИННКПП, "КПП"));
	
КонецПроцедуры

Функция ИзвлечьЦифрыИзСтроки(Строка) Экспорт
	
	ДоступныеСимволы = "0123456789";
	Возврат ИзвлечьСимволыИзСтроки(Строка, ДоступныеСимволы);
	
КонецФункции

Функция ИзвлечьАртикулИзСтроки(Строка) Экспорт
	
	ДоступныеСимволы = "-_./:"
		+ "0123456789"
		+ "абвгдежзиклмнопрстуфхцчшщъыьэюя"
		+ "АБВГДЕЖЗИКЛМНОПРЕСТУФХЦЧШЩЪЫЬЭЮЯ"
		+ "abcdefghijklmnopqrstuvwxwz"
		+ "ABCDEFGHIGKLMNOPQRSTUVWXYZ";
	Возврат ИзвлечьСимволыИзСтроки(Строка, ДоступныеСимволы);
	
КонецФункции

Функция ИзвлечьГТДИзСтроки(Строка) Экспорт
	
	ДоступныеСимволы = "0123456789/";
	Возврат ИзвлечьСимволыИзСтроки(Строка, ДоступныеСимволы);
	
КонецФункции

Функция ИзвлечьИННКППИзСтроки(ИННКПП, ИмяРеквизита) Экспорт
	
	НаборЗначений = СтрРазделить(ИННКПП, "/", Ложь);
	
	Если НаборЗначений.Количество() И ИмяРеквизита = "ИНН" Тогда
		Возврат ИзвлечьЦифрыИзСтроки(НаборЗначений[0]);
	ИначеЕсли НаборЗначений.Количество() > 1 И ИмяРеквизита = "КПП" Тогда
		Возврат ИзвлечьЦифрыИзСтроки(НаборЗначений[1]);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ИзвлечьСимволыИзСтроки(Строка, ДоступныеСимволы)
	
	Результат = Строка;
	Индекс = 1;
	Пока Индекс <= СтрДлина(Результат) Цикл
		ПроверяемыйСимвол = Сред(Результат, Индекс, 1);
		Если СтрНайти(ДоступныеСимволы, ПроверяемыйСимвол) = 0 Тогда
			Результат = СтрЗаменить(Результат, ПроверяемыйСимвол, "");
			Продолжить;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция МакетОтображенияКартинкиДокументаHTML() Экспорт
	
	ДвоичныеДанные = ПолучитьОбщийМакет("МакетОтображенияКартинкиДокумента");
	
	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ДвоичныеДанные.ОткрытьПотокДляЧтения(), КодировкаТекста.UTF8);
		Возврат ЧтениеТекста.Прочитать();
	Иначе
		Возврат ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "/"
			+ ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	КонецЕсли;
	
КонецФункции

Процедура ПрикрепитьИсходныеФайлы(РаспознанныйДокумент, КудаДобавляемСсылка) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РаспознанныйДокумент, "ИдентификаторРезультата");
	
	ИнформацияОФайлах = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.
		ПолучитьИдентификаторыФайлов(РеквизитыДокумента.ИдентификаторРезультата);
	
	Для Каждого ИнформацияОФайле Из ИнформацияОФайлах Цикл
		
		СтруктураИмениФайла = РазложитьИмяФайла(ИнформацияОФайле.ИмяФайла);
		
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("ВладелецФайлов",     КудаДобавляемСсылка);
		ПараметрыФайла.Вставить("Автор",              Неопределено);
		ПараметрыФайла.Вставить("ИмяБезРасширения",   СтруктураИмениФайла.Имя);
		ПараметрыФайла.Вставить("РасширениеБезТочки", НРег(СтруктураИмениФайла.Расширение));
		ПараметрыФайла.Вставить("ГруппаФайлов",       Неопределено);
		ПараметрыФайла.Вставить("ВремяИзменения");
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
		АдресИзображения = ПоместитьВоВременноеХранилище(ИнформацияОФайле.ИсходныйФайл, Новый УникальныйИдентификатор);
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресИзображения);
		УдалитьИзВременногоХранилища(АдресИзображения);
	
	КонецЦикла;
	
КонецПроцедуры

#Область СвязанныеДокументы

//// Позволяет получить индекс картинки статуса документа из коллекции КоллекцияСтатусыРаспознаванияДокумента
////
//// Параметры:
//// Объект - основной реквизит формы документа с типом ДанныеФормыСтруктура или подходящая Структура
////
//Функция СтатусДокументаЧислом(Объект) Экспорт
//	
//	Если Объект.ПометкаУдаления Тогда
//		СтатусДокумента = 0;
//	Иначе
//		Если Объект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка Тогда
//			СтатусДокумента = 1;
//		ИначеЕсли Объект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый Тогда
//			СтатусДокумента = 2;
//		ИначеЕсли Объект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан Тогда
//			СтатусДокумента = 4;
//		Иначе
//			// Пустой Статус (документа нет)
//			СтатусДокумента = 3;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат СтатусДокумента;
//	
//КонецФункции

//Функция ДублиРаспознанногоДокумента(ДанныеДокумента) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	Дубль.Ссылка КАК Ссылка,
//	|	Дубль.ПометкаУдаления КАК ПометкаУдаления,
//	|	Дубль.Статус КАК Статус,
//	|	Дубль.ТипДокумента КАК ТипДокумента,
//	|	Дубль.НомерДокумента КАК НомерДокумента,
//	|	Дубль.ДатаДокумента КАК ДатаДокумента
//	|ИЗ
//	|	Документ.РаспознанныйДокумент КАК Дубль
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
//	|		ПО (РаспознанныйДокумент.Ссылка = &Ссылка)
//	|			И (РаспознанныйДокумент.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка))
//	|			И Дубль.Ссылка <> РаспознанныйДокумент.Ссылка
//	|			И (&ДопУсловие)";
//	
//	Если ТипЗнч(ДанныеДокумента) = Тип("ДокументСсылка.РаспознанныйДокумент") Тогда
//		Запрос.УстановитьПараметр("Ссылка", ДанныеДокумента);
//		
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловие",
//		"Дубль.ТипДокумента = РаспознанныйДокумент.ТипДокумента
//		|			И Дубль.Направление = РаспознанныйДокумент.Направление
//		|			И Дубль.НомерДокумента = РаспознанныйДокумент.НомерДокумента
//		|			И Дубль.ДатаДокумента = РаспознанныйДокумент.ДатаДокумента
//		|			И Дубль.Контрагент = РаспознанныйДокумент.Контрагент
//		|			И (РаспознанныйДокумент.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
//		|			И Дубль.Организация = РаспознанныйДокумент.Организация
//		|			И (РаспознанныйДокумент.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
//		|			И Дубль.СуммаДокумента = РаспознанныйДокумент.СуммаДокумента
//		|			И (НЕ Дубль.ПометкаУдаления)");
//	ИначеЕсли ТипЗнч(ДанныеДокумента) = Тип("Структура") Тогда
//		Для Каждого ЭлементСтруктуры Из ДанныеДокумента Цикл
//			Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
//		КонецЦикла;
//		
//		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловие",
//		"Дубль.ТипДокумента = &ТипДокумента
//		|			И Дубль.Направление = &Направление
//		|			И Дубль.НомерДокумента = &НомерДокумента
//		|			И Дубль.ДатаДокумента = &ДатаДокумента
//		|			И Дубль.Контрагент = &Контрагент
//		|			И (&Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
//		|			И Дубль.Организация = &Организация
//		|			И (&Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
//		|			И Дубль.СуммаДокумента = &СуммаДокумента
//		|			И (НЕ Дубль.ПометкаУдаления)");
//	КонецЕсли;
//	
//	Результат = Запрос.Выполнить();
//	Если Результат.Пустой() Тогда
//		Возврат Новый Массив;
//	КонецЕсли;
//	
//	ТаблицаДублей = Результат.Выгрузить();
//	
//	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаДублей);
//	
//КонецФункции

//#КонецОбласти

//#Область Комплекты

//Процедура НайтиИЗаполнитьСозданныеДокументы(РаспознанныйДокумент, ТипКомплекта, СозданныеДокументы, КоличествоСвязанных) Экспорт
//	
//	Если ТипКомплекта = "Торг12СчетФактура"
//		Или ТипКомплекта = "АктСчетФактура" Тогда
//		
//		РаспознаваниеДокументовСлужебный.АктуализироватьОбъектыСвязанныеСРаспознаннымДокументом(РаспознанныйДокумент);
//		
//		Связанные = РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ВсеСвязанныеДокументы(РаспознанныйДокумент);
//		
//		Для Каждого Связанный Из Связанные Цикл
//			
//			Если ТипЗнч(Связанный.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
//				СозданныеДокументы.СчетФактураПолученный.Ссылка = Связанный.Ссылка;
//				СозданныеДокументы.СчетФактураПолученный.СозданПоРаспознанномуДокументу = Не Связанный.ПотенциальныйКандидат;
//			КонецЕсли;
//			
//			Если ТипЗнч(Связанный.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
//				СозданныеДокументы.Поступление.Ссылка = Связанный.Ссылка;
//				СозданныеДокументы.Поступление.СозданПоРаспознанномуДокументу = Не Связанный.ПотенциальныйКандидат;
//			КонецЕсли;
//			
//			Если ТипЗнч(Связанный.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
//				СозданныеДокументы.СчетФактураВыданный.Ссылка = Связанный.Ссылка;
//				СозданныеДокументы.СчетФактураВыданный.СозданПоРаспознанномуДокументу = Не Связанный.ПотенциальныйКандидат;
//			КонецЕсли;
//			
//			Если ТипЗнч(Связанный.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
//				СозданныеДокументы.Реализация.Ссылка = Связанный.Ссылка;
//				СозданныеДокументы.Реализация.СозданПоРаспознанномуДокументу = Не Связанный.ПотенциальныйКандидат;
//			КонецЕсли;
//			
//		КонецЦикла;
//		
//		КоличествоСвязанных = Связанные.Количество();
//	КонецЕсли;
//	
//КонецПроцедуры

//Функция НайтиКомплектныеДокументы(ДанныеОбязательногоДокумента) Экспорт
//	
//	КандидатыКомплекта = КандидатыКомплекта(ДанныеОбязательногоДокумента);
//	Если КандидатыКомплекта.Количество() = 0 Тогда
//		Возврат КандидатыКомплекта;
//	КонецЕсли;
//	
//	ТаблицаДокументов = ДополнитьДанныеДокументов(КандидатыКомплекта);
//	ДанныеКомплекта = НайтиКомплекты(ТаблицаДокументов, ДанныеОбязательногоДокумента.Ссылка);
//	
//	КомплектныеДокументы = Новый Массив;
//	Для Каждого СтрокаКомплектов Из ДанныеКомплекта.ТаблицаКомплектов Цикл
//		Если СтрокаКомплектов.Ссылка <> ДанныеОбязательногоДокумента.Ссылка Тогда
//			КомплектныеДокументы.Добавить(СтрокаКомплектов.Ссылка);
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат КомплектныеДокументы;
//	
//КонецФункции

//Функция КандидатыКомплекта(ДанныеОбязательногоДокумента)
//	
//	Если ДанныеОбязательногоДокумента.ПометкаУдаления
//		Или ДанныеОбязательногоДокумента.Статус <> Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый
//		Или ДанныеОбязательногоДокумента.Организация = Справочники.Организации.ПустаяСсылка()
//		Или ДанныеОбязательногоДокумента.Контрагент = Справочники.Контрагенты.ПустаяСсылка()
//		Или ДанныеОбязательногоДокумента.СуммаДокумента = 0 Тогда
//		
//		Возврат Новый Массив;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Направление", ДанныеОбязательногоДокумента.Направление);
//	Запрос.УстановитьПараметр("ТипДокумента", ДанныеОбязательногоДокумента.ТипДокумента);
//	Запрос.УстановитьПараметр("Контрагент", ДанныеОбязательногоДокумента.Контрагент);
//	Запрос.УстановитьПараметр("Организация", ДанныеОбязательногоДокумента.Организация);
//	Запрос.УстановитьПараметр("СуммаДокумента", ДанныеОбязательногоДокумента.СуммаДокумента);
//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	РаспознанныйДокумент.Ссылка КАК Ссылка
//	|ИЗ
//	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
//	|ГДЕ
//	|	НЕ РаспознанныйДокумент.ПометкаУдаления
//	|	И РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
//	|	И РаспознанныйДокумент.ТипДокумента <> &ТипДокумента
//	|	И РаспознанныйДокумент.СуммаДокумента = &СуммаДокумента
//	|	И РаспознанныйДокумент.Контрагент = &Контрагент
//	|	И РаспознанныйДокумент.Организация = &Организация
//	|	И РаспознанныйДокумент.Направление = &Направление";
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	Если РезультатЗапроса.Пустой() Тогда
//		Возврат Новый Массив;
//	КонецЕсли;
//	
//	КандидатыКомплекта = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
//	КандидатыКомплекта.Добавить(ДанныеОбязательногоДокумента.Ссылка);
//	
//	Возврат КандидатыКомплекта;
//	
//КонецФункции

//Функция ДополнитьДанныеДокументов(ВыбранныеДокументы) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ВыбранныеДокументы", ВыбранныеДокументы);
//	Запрос.Текст =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	РаспознанныйДокументПометкиНаДокументе.Ссылка КАК Ссылка,
//	|	КОЛИЧЕСТВО(РаспознанныйДокументПометкиНаДокументе.ТипПометки) КАК Печатей
//	|ПОМЕСТИТЬ КоличествоПечатей
//	|ИЗ
//	|	Документ.РаспознанныйДокумент.ПометкиНаДокументе КАК РаспознанныйДокументПометкиНаДокументе
//	|ГДЕ
//	|	РаспознанныйДокументПометкиНаДокументе.Ссылка В(&ВыбранныеДокументы)
//	|	И РаспознанныйДокументПометкиНаДокументе.ТипПометки = ЗНАЧЕНИЕ(Перечисление.ТипыПометокРаспознанногоДокумента.Печать)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	РаспознанныйДокументПометкиНаДокументе.Ссылка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка КАК Ссылка,
//	|	МАКСИМУМ(РаспознанныйДокументРеквизитыТабличныхЧастей.НомерСтрокиТЧ) КАК СтрокВТЧ
//	|ПОМЕСТИТЬ КоличествоСтрокВТЧ
//	|ИЗ
//	|	Документ.РаспознанныйДокумент.РеквизитыТабличныхЧастей КАК РаспознанныйДокументРеквизитыТабличныхЧастей
//	|ГДЕ
//	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка В(&ВыбранныеДокументы)
//	|	И НЕ РаспознанныйДокументРеквизитыТабличныхЧастей.СтрокаУдалена
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	РаспознанныйДокументРеквизитыТабличныхЧастей.Ссылка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	РаспознанныйДокумент.Ссылка КАК Ссылка,
//	|	РаспознанныйДокумент.ПометкаУдаления КАК ПометкаУдаления,
//	|	0 КАК СтатусРаспознавания,
//	|	РаспознанныйДокумент.Статус КАК Статус,
//	|	0 КАК НаправлениеДокумента,
//	|	РаспознанныйДокумент.Направление КАК Направление,
//	|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента,
//	|	РаспознанныйДокумент.Наименование КАК Наименование,
//	|	РаспознанныйДокумент.Организация КАК Организация,
//	|	РаспознанныйДокумент.Контрагент КАК Контрагент,
//	|	РаспознанныйДокумент.СуммаДокумента КАК СуммаДокумента,
//	|	РаспознанныйДокумент.ДатаДокумента КАК ДатаДокумента,
//	|	РаспознанныйДокумент.НомерДокумента КАК НомерДокумента,
//	|	РаспознанныйДокумент.КоличествоОшибок КАК ОшибокВсего,
//	|	РаспознанныйДокумент.КоличествоОшибокВТаблицах КАК ОшибокТЧ,
//	|	ЕСТЬNULL(КоличествоСтрокВТЧ.СтрокВТЧ, 0) КАК СтрокВТЧ,
//	|	ЕСТЬNULL(КоличествоПечатей.Печатей, 0) КАК Печатей
//	|ИЗ
//	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
//	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоПечатей КАК КоличествоПечатей
//	|		ПО РаспознанныйДокумент.Ссылка = КоличествоПечатей.Ссылка
//	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоСтрокВТЧ КАК КоличествоСтрокВТЧ
//	|		ПО РаспознанныйДокумент.Ссылка = КоличествоСтрокВТЧ.Ссылка
//	|ГДЕ
//	|	РаспознанныйДокумент.Ссылка В(&ВыбранныеДокументы)
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Ссылка";
//	
//	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
//	ТаблицаДокументов.Колонки.Добавить("НомерКомплекта", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
//	ТаблицаДокументов.Колонки.Добавить("ТипКомплекта", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
//	Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл
//		ДополнитьДанныеДокументовПоСтроке(СтрокаТаблицы);
//	КонецЦикла;
//	
//	Возврат ТаблицаДокументов;
//	
//КонецФункции

//Процедура ДополнитьДанныеДокументовПоСтроке(СтрокаТаблицы) Экспорт
//	
//	Если СтрокаТаблицы.ПометкаУдаления Тогда
//		СтрокаТаблицы.СтатусРаспознавания = 0;
//	ИначеЕсли СтрокаТаблицы.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка Тогда
//		СтрокаТаблицы.СтатусРаспознавания = 1;
//	ИначеЕсли СтрокаТаблицы.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый Тогда
//		СтрокаТаблицы.СтатусРаспознавания = 2;
//	ИначеЕсли СтрокаТаблицы.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан Тогда
//		СтрокаТаблицы.СтатусРаспознавания = 4;
//	Иначе
//		// Пустой ссылки быть не может
//		// СтатусРаспознавания = 3
//	КонецЕсли;
//	
//	Если СтрокаТаблицы.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
//		СтрокаТаблицы.НаправлениеДокумента = 2;
//	ИначеЕсли СтрокаТаблицы.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
//		СтрокаТаблицы.НаправлениеДокумента = 1;
//	КонецЕсли;
//	
//	СтрокаТаблицы.Наименование = СтрШаблон(НСтр("ru = '%1 № %2'"), СтрокаТаблицы.ТипДокумента, СтрокаТаблицы.НомерДокумента);
//	
//КонецПроцедуры

//Функция НайтиКомплекты(ТаблицаДокументов, ОбязательныйДокумент = Неопределено) Экспорт
//	
//	ВсеКомплекты = КомплектыВыбранногоТипа(ТаблицаДокументов, "Торг12АктСчетФактура");
//	
//	КоличествоКомплектов = 0;
//	ТаблицаКомплектов = ТаблицаДокументов.СкопироватьКолонки();
//	
//	Для Каждого ВозможныйКомплект Из ВсеКомплекты Цикл
//		ТипКомплекта = ВозможныйКомплект.ТипКомплекта;
//		
//		Если КоличествоКомплектов > 0 Или ОбязательныйДокумент <> Неопределено Тогда
//			СтрТаблицыДокументов1 = ТаблицаДокументов[ВозможныйКомплект.ИдСтроки1];
//			СтрТаблицыДокументов2 = ТаблицаДокументов[ВозможныйКомплект.ИдСтроки2];
//			
//			Если ОбязательныйДокумент <> Неопределено
//				И СтрТаблицыДокументов1.Ссылка <> ОбязательныйДокумент
//				И СтрТаблицыДокументов2.Ссылка <> ОбязательныйДокумент Тогда
//				
//				Продолжить;
//			КонецЕсли;
//			
//			Если ТипКомплекта = "Торг12СчетФактура"
//				Или ТипКомплекта = "АктСчетФактура" Тогда
//				
//				СтрокиКомплекта = Новый Массив;
//				СтрокиКомплекта.Добавить(СтрТаблицыДокументов1);
//				СтрокиКомплекта.Добавить(СтрТаблицыДокументов2);
//				
//				ЭтоДубль = ЕстьДубльКомплектаТорг12АктСФ(СтрокиКомплекта, ТипКомплекта, ТаблицаКомплектов);
//				Если ЭтоДубль Тогда
//					Продолжить;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//		
//		КоличествоКомплектов = КоличествоКомплектов + 1;
//		
//		СтрокаТабДок = ТаблицаДокументов[ВозможныйКомплект.ИдСтроки1];
//		СтрокаТабДок.НомерКомплекта = КоличествоКомплектов;
//		СтрокаТабДок.ТипКомплекта = ТипКомплекта;
//		
//		СтрокаТаблицыКомплектов = ТаблицаКомплектов.Добавить();
//		ЗаполнитьЗначенияСвойств(СтрокаТаблицыКомплектов, СтрокаТабДок);
//		
//		СтрокаТабДок = ТаблицаДокументов[ВозможныйКомплект.ИдСтроки2];
//		СтрокаТабДок.НомерКомплекта = КоличествоКомплектов;
//		СтрокаТабДок.ТипКомплекта = ТипКомплекта;
//		
//		СтрокаТаблицыКомплектов = ТаблицаКомплектов.Добавить();
//		ЗаполнитьЗначенияСвойств(СтрокаТаблицыКомплектов, СтрокаТабДок);
//		
//		Если ОбязательныйДокумент <> Неопределено Тогда
//			// Поиск через КомплектыВыбранногоТипа сразу возвращает порядок, начиная с самого релевантного комплекта.
//			// При наличии ОбязательныйДокумент нам необходим 1 комплект, который и будет самым верхним из подходящих
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Результат = Новый Структура("ТаблицаКомплектов, КоличествоКомплектов", ТаблицаКомплектов, КоличествоКомплектов);
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ПоследнийПеренесенныйКомплект(ТаблицаПоиска) Экспорт
//	
//	КлючевыеПоля = "Направление, Организация, Контрагент, СуммаДокумента";
//	ТаблицаКлючевыхПолей = ТаблицаПоиска.Скопировать(, КлючевыеПоля);
//	ТаблицаКлючевыхПолей.Свернуть(КлючевыеПоля);
//	
//	Если ТаблицаКлючевыхПолей.Количество() > 1 Тогда
//		
//		//Если формируются принципиально разные комплекты - отличаются ключевые поля поиска комплектов, то оставлять комплект который последним перетащили
//		ТаблицаРезультата = Новый ТаблицаЗначений;
//		ТаблицаРезультата.Колонки.Добавить("ИдСтроки1", Новый ОписаниеТипов("Число"));
//		ТаблицаРезультата.Колонки.Добавить("ИдСтроки2", Новый ОписаниеТипов("Число"));
//		ТаблицаРезультата.Колонки.Добавить("ТипКомплекта", Новый ОписаниеТипов("Строка"));
//		
//		МаксИдСтроки = ТаблицаПоиска.Количество() - 1;
//		ИдСтроки1 = -1;
//		
//		Пока ИдСтроки1 < МаксИдСтроки Цикл
//			ИдСтроки1 = ИдСтроки1 + 1;
//			Строка1 = ТаблицаПоиска[ИдСтроки1];
//			
//			ИдСтроки2 = ИдСтроки1;
//			Пока ИдСтроки2 < МаксИдСтроки Цикл
//				ИдСтроки2 = ИдСтроки2 + 1;
//				Строка2 = ТаблицаПоиска[ИдСтроки2];
//				
//				РезультатПроверки = ПроверитьКомплектностьСтрок(Строка1, Строка2, "Торг12АктСчетФактура");
//				Если РезультатПроверки.ЕстьКомплект Тогда
//					СтрокаРезультата = ТаблицаРезультата.Добавить();
//					СтрокаРезультата.ИдСтроки1 = ИдСтроки1;
//					СтрокаРезультата.ИдСтроки2 = ИдСтроки2;
//					СтрокаРезультата.ТипКомплекта = РезультатПроверки.ТипКомплекта;
//				КонецЕсли;
//			КонецЦикла;
//		КонецЦикла;
//		
//		ТаблицаРезультата.Сортировать("ИдСтроки2 Убыв, ИдСтроки1 Убыв");
//		
//	Иначе
//		
//		ТаблицаРезультата = КомплектыВыбранногоТипа(ТаблицаПоиска, "Торг12АктСчетФактура");
//		
//	КонецЕсли;
//	
//	Результат = Новый Структура("ДокументыКомплекта, ТипКомплекта");
//	ДокументыКомплекта = Новый Массив;
//	
//	Если ТаблицаРезультата.Количество() <> 0 Тогда
//		СтрокаРезультата = ТаблицаРезультата[0];
//		ДокументыКомплекта.Добавить(ТаблицаПоиска[СтрокаРезультата.ИдСтроки1].Ссылка);
//		ДокументыКомплекта.Добавить(ТаблицаПоиска[СтрокаРезультата.ИдСтроки2].Ссылка);
//		Результат.ТипКомплекта = СтрокаРезультата.ТипКомплекта;
//	КонецЕсли;
//	Результат.ДокументыКомплекта = ДокументыКомплекта;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция КомплектыВыбранногоТипа(ТаблицаПоиска, ТипКомплекта)
//	
//	//Если можем сформировать комплект из разных комбинаций документов, то предпочтение отдаем документам с
//	//	1. Печатью
//	//	2. С бОльшим количество строк в табличной части
//	//	3. С меньшим количеством ошибок в табличной части
//	//	4. С меньшим количеством ошибок по документу в целом
//	//	5. Которые последними перетащили
//	
//	ТаблицаРезультата = Новый ТаблицаЗначений;
//	ТаблицаРезультата.Колонки.Добавить("ИдСтроки1", Новый ОписаниеТипов("Число"));
//	ТаблицаРезультата.Колонки.Добавить("ИдСтроки2", Новый ОписаниеТипов("Число"));
//	ТаблицаРезультата.Колонки.Добавить("Печатей", Новый ОписаниеТипов("Число"));
//	ТаблицаРезультата.Колонки.Добавить("СтрокВТЧ", Новый ОписаниеТипов("Число"));
//	ТаблицаРезультата.Колонки.Добавить("ОшибокТЧ", Новый ОписаниеТипов("Число"));
//	ТаблицаРезультата.Колонки.Добавить("ОшибокВсего", Новый ОписаниеТипов("Число"));
//	ТаблицаРезультата.Колонки.Добавить("ТипКомплекта", Новый ОписаниеТипов("Строка"));
//	
//	МаксИдСтроки = ТаблицаПоиска.Количество() - 1;
//	ИдСтроки1 = -1;
//	
//	Пока ИдСтроки1 < МаксИдСтроки Цикл
//		ИдСтроки1 = ИдСтроки1 + 1;
//		Строка1 = ТаблицаПоиска[ИдСтроки1];
//		
//		ИдСтроки2 = ИдСтроки1;
//		Пока ИдСтроки2 < МаксИдСтроки Цикл
//			ИдСтроки2 = ИдСтроки2 + 1;
//			Строка2 = ТаблицаПоиска[ИдСтроки2];
//			
//			РезультатПроверки = ПроверитьКомплектностьСтрок(Строка1, Строка2, ТипКомплекта);
//			Если РезультатПроверки.ЕстьКомплект Тогда
//				СтрокаРезультата = ТаблицаРезультата.Добавить();
//				СтрокаРезультата.ИдСтроки1 = ИдСтроки1;
//				СтрокаРезультата.ИдСтроки2 = ИдСтроки2;
//				СтрокаРезультата.Печатей = Строка1.Печатей + Строка2.Печатей;
//				СтрокаРезультата.СтрокВТЧ = Строка1.СтрокВТЧ + Строка2.СтрокВТЧ;
//				СтрокаРезультата.ОшибокТЧ = Строка1.ОшибокТЧ + Строка2.ОшибокТЧ;
//				СтрокаРезультата.ОшибокВсего = Строка1.ОшибокВсего + Строка2.ОшибокВсего;
//				СтрокаРезультата.ТипКомплекта = РезультатПроверки.ТипКомплекта;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЦикла;
//	
//	ТаблицаРезультата.Сортировать("Печатей Убыв, СтрокВТЧ Убыв, ОшибокТЧ, ОшибокВсего, ИдСтроки2 Убыв, ИдСтроки1 Убыв");
//	
//	Возврат ТаблицаРезультата;
//	
//КонецФункции

//Функция ПроверитьКомплектностьСтрок(Строка1, Строка2, ТипКомплекта)
//	
//	РезультатПроверки = Новый Структура("ЕстьКомплект, ТипКомплекта", Ложь, "");
//	
//	Если ТипКомплекта = "Торг12АктСчетФактура" Тогда
//		
//		Если Строка1.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
//			Если Строка2.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
//				РезультатПроверки.ТипКомплекта = "АктСчетФактура";
//			ИначеЕсли Строка2.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12 Тогда
//				РезультатПроверки.ТипКомплекта = "Торг12СчетФактура";
//			КонецЕсли;
//		ИначеЕсли Строка2.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
//			Если Строка1.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
//				РезультатПроверки.ТипКомплекта = "АктСчетФактура";
//			ИначеЕсли Строка1.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12 Тогда
//				РезультатПроверки.ТипКомплекта = "Торг12СчетФактура";
//			КонецЕсли;
//		КонецЕсли;
//		
//		Если РезультатПроверки.ТипКомплекта <> ""
//			И Строка1.СуммаДокумента = Строка2.СуммаДокумента
//			И Строка1.Контрагент = Строка2.Контрагент
//			И Строка1.Организация = Строка2.Организация
//			И Строка1.Направление = Строка2.Направление
//			И НачалоДня(Строка1.ДатаДокумента) - НачалоДня(Строка2.ДатаДокумента) >= -5
//			И НачалоДня(Строка1.ДатаДокумента) - НачалоДня(Строка2.ДатаДокумента) <= 5
//			И ЗначениеЗаполнено(Строка1.СуммаДокумента)
//			И ЗначениеЗаполнено(Строка1.Контрагент)
//			И ЗначениеЗаполнено(Строка1.Организация)
//			И ЗначениеЗаполнено(Строка1.Направление)
//			И ЗначениеЗаполнено(Строка1.ДатаДокумента) Тогда
//			
//			РезультатПроверки.ЕстьКомплект = Истина;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Возврат РезультатПроверки;
//	
//КонецФункции

//Функция ЕстьДубльКомплектаТорг12АктСФ(СтрокиКомплекта, ТипКомплекта, ТаблицаПоискаДублей) Экспорт
//	
//	Для Каждого СтрокаКомплекта Из СтрокиКомплекта Цикл
//		ТипДокументаКомплекта = СтрокаКомплекта.ТипДокумента;
//		ДокументКомплекта = СтрокаКомплекта.Ссылка;
//		
//		Для Каждого СтрокаДанных Из ТаблицаПоискаДублей Цикл
//			Если СтрокаДанных.НомерКомплекта = 0
//				Или СтрокаДанных.ТипКомплекта <> ТипКомплекта
//				Или СтрокаДанных.ТипДокумента <> ТипДокументаКомплекта Тогда
//				
//				Продолжить;
//			КонецЕсли;
//			
//			Если СтрокаКомплекта.Направление = СтрокаДанных.Направление
//				И СтрокаКомплекта.Организация = СтрокаДанных.Организация
//				И СтрокаКомплекта.Контрагент = СтрокаДанных.Контрагент
//				И СтрокаКомплекта.СуммаДокумента = СтрокаДанных.СуммаДокумента
//				И СтрокаКомплекта.ДатаДокумента = СтрокаДанных.ДатаДокумента
//				И СтрокаКомплекта.НомерДокумента = СтрокаДанных.НомерДокумента Тогда
//				
//				Возврат Истина;
//			КонецЕсли;
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//	Возврат Ложь;
//	
//КонецФункции

#КонецОбласти

#Область СвойстваЯчеекТаблицы

Функция СвойстваЯчеекТаблицы(Объект) Экспорт
	
	Результат = Новый Структура;
	
	Для Каждого СтрокаТЧ Из Объект.РеквизитыТабличныхЧастей Цикл
		
		Свойства = Новый Структура;
		Свойства.Вставить("ИмяРеквизита", СтрокаТЧ.ИмяРеквизита);
		Свойства.Вставить("Значение", СтрокаТЧ.Значение);
		Свойства.Вставить("ТипЗначения", ТипЗнч(СтрокаТЧ.Значение));
		
		Свойства.Вставить("НайденноеЗначение", СтрокаТЧ.НайденноеЗначение);
		Свойства.Вставить("УверенностьНайденногоЗначения", СтрокаТЧ.УверенностьНайденногоЗначения);
		
		Свойства.Вставить("РаспознанныйТекст", СтрокаТЧ.РаспознанныйТекст);
		Свойства.Вставить("ЗаполненоВручную", СтрокаТЧ.ЗаполненоВручную);
		Свойства.Вставить("ЭлементСоздан", СтрокаТЧ.ЭлементСоздан);
		Свойства.Вставить("НомерСтроки", СтрокаТЧ.НомерСтроки);
		
		Свойства.Вставить("СтрокВИзображении", СтрокаТЧ.СтрокВИзображении);
		Свойства.Вставить("Координаты", РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьНаборКоординат(СтрокаТЧ));
		
		Свойства.Вставить("ЗначенияВыбора", Новый Массив);
		
		Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы(
			СтрокаТЧ.ИмяРеквизита, СтрокаТЧ.НомерСтрокиТЧ);
		Результат.Вставить(Ключ, Свойства);
		
	КонецЦикла;
	
	ЗначенияВыбораЗначений = ЗначенияВыбораЗначенийТаблицыДокумента(Объект.Ссылка);
	
	Для Каждого ДанныеВыбора Из ЗначенияВыбораЗначений Цикл
		
		Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы(
			ДанныеВыбора.ИмяРеквизита, ДанныеВыбора.НомерСтроки);
		
		ВариантВыбора = Новый Структура;
		ВариантВыбора.Вставить("Значение", ДанныеВыбора.Значение);
		ВариантВыбора.Вставить("ДополнительноеЗначение", ДанныеВыбора.ДополнительноеЗначение);
		ВариантВыбора.Вставить("Уверенность", ДанныеВыбора.Уверенность);
		ВариантВыбора.Вставить("НайденВТаблицеСоответствий", ДанныеВыбора.НайденВТаблицеСоответствий);
		
		Свойства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, Ключ);
		Свойства.ЗначенияВыбора.Добавить(ВариантВыбора);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
