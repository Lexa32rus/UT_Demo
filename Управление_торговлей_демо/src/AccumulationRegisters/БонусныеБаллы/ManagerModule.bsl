#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.БонусныеБаллы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.9.45";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("489f7d26-6bd4-7943-a55c-3d06d445974a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.БонусныеБаллы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет регистр ""Бонусные баллы"":
	|- заполняет новые реквизиты ""Дата начала действия"", ""Дата к обработке"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.БонусныеБаллы.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.БонусныеБаллы.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.БонусныеБаллы.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Процедура регистрации данных для обработчика обновления ОбработатьДанныеДляПереходаНаВерсию.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5 = Константы.ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5.Получить();
	Если Не ЗначениеЗаполнено(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяРегистра  = "РегистрНакопления.БонусныеБаллы";

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БонусныеБаллы.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы КАК БонусныеБаллыНачислено
	|		ПО (БонусныеБаллыНачислено.Регистратор = БонусныеБаллы.Регистратор)
	|ГДЕ
	|	БонусныеБаллы.Период > &ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5
	|	И БонусныеБаллы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И БонусныеБаллы.КСписанию > 0
	|	И БонусныеБаллыНачислено.БонуснаяПрограммаЛояльности = БонусныеБаллы.БонуснаяПрограммаЛояльности
	|	И БонусныеБаллыНачислено.Партнер = БонусныеБаллы.Партнер
	|	И БонусныеБаллыНачислено.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И БонусныеБаллыНачислено.Начислено > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.Регистратор,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер,
	|	БонусныеБаллы.Период,
	|	ЕСТЬNULL(БонусныеБаллыНачислено.Период, ДАТАВРЕМЯ(1, 1, 1))
	|
	|ИМЕЮЩИЕ
	|	ДАТАВРЕМЯ(1, 1, 1) В (МИНИМУМ(БонусныеБаллы.ДатаНачалаДействия), 
	|						  МИНИМУМ(БонусныеБаллы.ДатаКОбработке), 
	|						  МИНИМУМ(БонусныеБаллыНачислено.ДатаНачалаДействия), 
	|						  МИНИМУМ(БонусныеБаллы.ДатаКОбработке))";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5", ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5);
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5 = Константы.ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5.Получить();
	Если Не ЗначениеЗаполнено(ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъекта = "РегистрНакопления.БонусныеБаллы";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОбновляемыхДанных", ОбновляемыеДанные);
	Запрос.УстановитьПараметр("ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5", ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТОбъектыДляОбработки
	|ИЗ
	|	&ТаблицаОбновляемыхДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БонусныеБаллы.Регистратор КАК Регистратор,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер КАК Партнер,
	|	ЕСТЬNULL(БонусныеБаллыНачислено.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодНачалаДействия,
	|	БонусныеБаллы.Период КАК Период
	|ИЗ
	|	ВТОбъектыДляОбработки КАК ВТОбъектыДляОбработки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы КАК БонусныеБаллы
	|	ПО БонусныеБаллы.Регистратор = ВТОбъектыДляОбработки.Регистратор
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.БонусныеБаллы КАК БонусныеБаллыНачислено
	|	ПО (БонусныеБаллыНачислено.Регистратор = БонусныеБаллы.Регистратор)
	|ГДЕ
	|	БонусныеБаллы.Период > &ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5
	|	И БонусныеБаллы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И БонусныеБаллы.КСписанию > 0
	|	И БонусныеБаллыНачислено.БонуснаяПрограммаЛояльности = БонусныеБаллы.БонуснаяПрограммаЛояльности
	|	И БонусныеБаллыНачислено.Партнер = БонусныеБаллы.Партнер
	|	И БонусныеБаллыНачислено.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И БонусныеБаллыНачислено.Начислено > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	БонусныеБаллы.Регистратор,
	|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
	|	БонусныеБаллы.Партнер,
	|	БонусныеБаллы.Период,
	|	ЕСТЬNULL(БонусныеБаллыНачислено.Период, ДАТАВРЕМЯ(1, 1, 1))
	|
	|ИМЕЮЩИЕ
	|	ДАТАВРЕМЯ(1, 1, 1) В (МИНИМУМ(БонусныеБаллы.ДатаНачалаДействия), 
	|						  МИНИМУМ(БонусныеБаллы.ДатаКОбработке), 
	|						  МИНИМУМ(БонусныеБаллыНачислено.ДатаНачалаДействия), 
	|						  МИНИМУМ(БонусныеБаллы.ДатаКОбработке))
	|ИТОГИ ПО
	|	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДокументов = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.БонусныеБаллы.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументов.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.БонусныеБаллы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументов.Регистратор);
			НаборЗаписей.Прочитать();
			
			ТаблицаЗначенийДляОбработки = НаборЗаписей.Выгрузить();
			
			ТребуетсяЗаписать = Ложь;
			
			Выборка = ВыборкаДокументов.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Для Каждого СтрокаНабора Из ТаблицаЗначенийДляОбработки.НайтиСтроки(Новый Структура("БонуснаяПрограммаЛояльности,Партнер,ВидДвижения", Выборка.БонуснаяПрограммаЛояльности, Выборка.Партнер, ВидДвиженияНакопления.Приход)) Цикл
					
					Если СтрокаНабора.ДатаКОбработке <> ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5 Тогда
			    		СтрокаНабора.ДатаКОбработке = ДатаНачалаРаботыМеханизмаБонусныхБаллов_2_5;
						ТребуетсяЗаписать = Истина;
					КонецЕсли;
					Если СтрокаНабора.ДатаНачалаДействия <> Выборка.ПериодНачалаДействия Тогда
						СтрокаНабора.ДатаНачалаДействия = Выборка.ПериодНачалаДействия;
						ТребуетсяЗаписать = Истина;
					КонецЕсли;	
					
				КонецЦикла;			
				
			КонецЦикла;
			
			Если ТребуетсяЗаписать Тогда
				НаборЗаписей.Загрузить(ТаблицаЗначенийДляОбработки);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ВыборкаДокументов.Регистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#КонецЕсли
