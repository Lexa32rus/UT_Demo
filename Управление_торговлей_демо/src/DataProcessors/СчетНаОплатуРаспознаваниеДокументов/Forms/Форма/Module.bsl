#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРаспознаваниеДокументов") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПолеПросмотра = РаспознаваниеДокументовСлужебный.МакетОтображенияКартинкиДокументаHTML();
	АдресКартинки = ПоместитьВоВременноеХранилище(Объект.Ссылка.ИсходноеИзображение.Получить(), УникальныйИдентификатор);
	
	ЮрФизЛицоПоОрганизационнойФорме = РаспознаваниеДокументовСлужебный.ЮрФизЛицоПоОрганизационнойФорме();
	
	СопоставлениеРеквизитов = Новый Структура("Шапка, Таблица");
	РаспознаваниеДокументов.ЗаполнитьТаблицуРеквизитовПоТипам(Объект.ТипДокумента, СопоставлениеРеквизитов.Шапка, СопоставлениеРеквизитов.Таблица);
	АдресСопоставленияРеквизитов = ПоместитьВоВременноеХранилище(СопоставлениеРеквизитов, УникальныйИдентификатор);
	
	Заголовок = Объект.Наименование;
	
	ЗаполнитьАдресаКартинок();
	СохранитьСоответствиеРеквизитовЭлементам();
	ЗаполнитьЭлементыИтогов();
	НастроитьЭлементыПоРеквизитам();
	
	НастроитьКолонкиТаблицы();
	ЗаполнитьТаблицуДокумента();
	
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[9].Значение) Тогда
		// Организация покупатель
		Объект.РеквизитыДокумента[9].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[8].Значение) Тогда
		// Организация продавец
		Объект.РеквизитыДокумента[8].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[17].Значение) Тогда
		// Исполнитель
		Объект.РеквизитыДокумента[17].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[6].Значение) Тогда
		// Договор
		Объект.РеквизитыДокумента[6].Значение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	ИнициализироватьСтруктуруСозданныеДокументы();
	
	Настройки = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	Если Настройки.ФормаОбработчикаПоказыватьИзображенияВШапке Тогда
		ДобавитьИзображенияРеквизитов(Настройки);
	КонецЕсли;
	ВариантСохраненияСоответствий = Настройки.ВариантСохраненияСоответствий;
	
	НастроитьВидимостьПоФункциональнымОпциям();
	
	ИзменитьИсточникиДляВыбораДоговора();
	
	ОбновитьСписокВыбораБанковскихСчетов();
	ИзменитьИсточникиДляВыбораБанковскихСчетов(Ложь);
	
	Элементы.СкидкаПоДокументу.Видимость = (ВидСкидки = 2);
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
	СвойстваОбработки = Новый Структура();
	СвойстваОбработки.Вставить("ИмяЭлементаТаблицы", "СписокНераспознаннойНоменклатуры");
	СвойстваОбработки.Вставить("ИмяЭлементаРеквизитовОбъекта", "ГруппаРеквизитыОбъекта");
	СвойстваОбработки.Вставить("ИмяПроцедурыПриИзменении", "Подключаемый_УстановитьЗначениеТаблицыСозданияНоменклатуры");
	СвойстваОбработки.Вставить("ИмяПроцедурыИзменениеФлажка", "Подключаемый_ПриИзмененииВыбораПоляНераспознаннойНоменклатуры");
	РаспознаваниеДокументовСлужебный.ДобавитьРеквизитыДляСозданияНоменклатуры(ЭтотОбъект, СвойстваОбработки);
	
	Для Каждого Колонка Из СписокНераспознаннойНоменклатуры.Выгрузить().Колонки Цикл
		ИменаКолонокНераспознаннойНоменклатуры.Добавить(Колонка.Имя);
	КонецЦикла;
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	Если Параметры.Свойство("ЧастьКомплекта") И Параметры.ЧастьКомплекта Тогда
		ЧастьКомплекта = Истина;
	КонецЕсли;
	Если ЧастьКомплекта Тогда
		Элементы.ГруппаПодменюСозданиеДокумента.Видимость = Ложь;
		Элементы.КомандаСоздатьДокументБезГруппы.Видимость = Ложь;
		Элементы.Записать.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элементы.Записать.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	СвойстваЯчеекТаблицы = РаспознаваниеДокументовСлужебный.СвойстваЯчеекТаблицы(Объект);
	
	УстановитьУсловноеОформление();
	
	РаспознаваниеДокументовПереопределяемый.ПриСозданииФормыРаспознаванияНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Не востребована т.к. права на изменение не отличаются от прав на чтение
	// СтандартныеПодсистемы.УправлениеДоступом
	// УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	МаксимальныйНомерСтроки = 0;
	Для Каждого СтрокаТЧ Из ТекущийОбъект.РеквизитыТабличныхЧастей Цикл
		Если СтрокаТЧ.НомерСтрокиТЧ > МаксимальныйНомерСтроки Тогда
			МаксимальныйНомерСтроки = СтрокаТЧ.НомерСтрокиТЧ;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ПослеПодтвержденияЗакрытия", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.РаспознанныйДокумент.Форма.ФормаОбратнойСвязи" Тогда
		РаспознаваниеДокументовСлужебныйКлиент.ОбработкаВыбораОбратнойСвязи(ЭтотОбъект, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыбранРеквизитФормыСоздания" Тогда
		ПриблизитьПоКоординатам(Параметр.Координаты, Параметр.ВысотаКартинки);
	ИначеЕсли ИмяСобытия = "ПрикрепленСканДокумента" Тогда
		НайтиИЗаполнитьСозданныеДокументы();
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПодключитьОбработчикОжидания("Подключаемый_ПослеЗаписи", 0.1, Истина)
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьЗначенияПередЗаписью();
	РаспознаваниеДокументовСлужебный.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СохранитьСоответствиеРеквизитовЭлементам();
	
	РаспознаваниеДокументовПереопределяемый.ПослеЗаписиФормыРаспознаванияНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеЗаписи() Экспорт
	Оповестить("РаспознанныйДокумент_ОбновитьОтборФормыСписка", Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияПередЗаписью()
	
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовПереопределяемый.ПередЗаписьюРаспознанногоДокумента(Объект);
	ЗаписатьСоответствияРаспознанныхСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСоответствияРаспознанныхСтрок()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СоответствияСтрок", НаборСоответствийРаспознанныхСтрок.Выгрузить(,"ТипЗначения,РаспознаннаяСтрока,СоответствующееЗначение,КоличествоПовторений"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствияСтрок.ТипЗначения КАК ТипЗначения,
	|	СоответствияСтрок.РаспознаннаяСтрока КАК РаспознаннаяСтрока,
	|	СоответствияСтрок.СоответствующееЗначение КАК СоответствующееЗначение,
	|	СоответствияСтрок.КоличествоПовторений КАК КоличествоПовторений
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&СоответствияСтрок КАК СоответствияСтрок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ТипЗначения КАК ТипЗначения,
	|	ДанныеДокумента.РаспознаннаяСтрока КАК РаспознаннаяСтрока,
	|	ДанныеДокумента.СоответствующееЗначение КАК СоответствующееЗначение,
	|	ДанныеДокумента.КоличествоПовторений + ЕСТЬNULL(ДанныеРегистра.КоличествоПовторений, 0) КАК КоличествоПовторений
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеРаспознанныхСтрокРаспознаваниеДокументов КАК ДанныеРегистра
	|		ПО ДанныеДокумента.ТипЗначения = ДанныеРегистра.ТипЗначения
	|			И ДанныеДокумента.РаспознаннаяСтрока = ДанныеРегистра.РаспознаннаяСтрока
	|			И ДанныеДокумента.СоответствующееЗначение = ДанныеРегистра.СоответствующееЗначение
	|ГДЕ
	|	НЕ ЕСТЬNULL(ДанныеРегистра.ИзмененоВручную, ЛОЖЬ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	АвторЗаписи = Пользователи.ТекущийПользователь();
	ДатаЗаписи = ТекущаяДатаСеанса();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.СоответствиеРаспознанныхСтрокРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Автор = АвторЗаписи;
		Запись.ДатаСоздания = ДатаЗаписи;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//&НаКлиенте
//Процедура ТипДокументаПриИзменении(Элемент)
	
//	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиИзменения", ЭтотОбъект);
//	РаспознаваниеДокументовСлужебныйКлиент.ИзменитьТипДокумента(ЭтотОбъект, Обработчик);
	
//КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПолеПросмотраДокументСформирован(Элемент)
	
	Если Элемент.Документ.baseURI = "about:blank" Тогда
		Возврат;
	КонецЕсли;
	
	РаспознаваниеДокументовСлужебныйКлиент.ЗагрузитьКартинкуПоАдресу(Элементы.ПолеПросмотра, АдресКартинки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПросмотраПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Element.id = "image_load_button" Тогда
		HTMLДокументСформирован = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	
	НаправлениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСкидкиПриИзменении(Элемент)
	
	Если ВидСкидки <> 2 Тогда
		//СуммаСкидки
		Объект.РеквизитыДокумента[20].Значение = 0;
	КонецЕсли;
	
	Если ВидСкидки <> 1 
			И (ТаблицаДокумента.Итог("СуммаСкидки") <> 0 ИЛИ ТаблицаДокумента.Итог("ПроцентСкидки") <> 0) Тогда
		Для Каждого Строка Из ТаблицаДокумента Цикл
			Если Строка.СуммаСкидки <> 0 ИЛИ Строка.ПроцентСкидки <> 0 Тогда
				Строка.СуммаСкидки = 0;
				Строка.ПроцентСкидки = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.СкидкаПоДокументу.Видимость = (ВидСкидки = 2);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачалоВыбораПоля(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяЭлемента = Элемент.Имя;
	Отбор = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
	
	Если НЕ НайденныеСтроки.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	КоординатыКартинки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьНаборКоординат(НайденныеСтроки[0]);
	ПриблизитьПоКоординатам(КоординатыКартинки, НайденныеСтроки[0].СтрокВИзображении);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ИсточникПоляДоговорКонтрагент) ИЛИ
		НЕ ЗначениеЗаполнено(ИсточникПоляДоговорОрганизация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Перед созданием договора необходимо заполнить поля ""Контрагент"" и ""Организация""'");
		Сообщение.Сообщить();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииПоля(Элемент)
	
	ПриИзмененииПоляНаКлиенте(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПоляНаКлиенте(Элемент)
	
	ПриИзмененииПоляНаСервере(Элемент.Имя);
	РаспознаваниеДокументовСлужебныйКлиент.ДобавитьСоответствиеРаспознаваемыхСтрок(
		Объект,
		ВариантСохраненияСоответствий,
		НаборСоответствийРаспознанныхСтрок,
		Элемент.Имя
	);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПоляНаСервере(ИмяПоля)
	
	Отбор = Новый Структура("ИмяЭлемента", ИмяПоля);
	НайденныеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Если НЕ НайденныеСтроки[0].ЗаполненоВручную Тогда
			НайденныеСтроки[0].ЗаполненоВручную = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоля = "Договор" Тогда
		// Поменяли договор, а значит возможно Валюту в договоре, которая должна совпадать с валютой Банковского счета
		Если (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий И НЕ ЗначениеЗаполнено(Объект.РеквизитыДокумента[21].Значение)) // БанковскийСчетКонтрагента
			ИЛИ (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий И НЕ ЗначениеЗаполнено(Объект.РеквизитыДокумента[22].Значение)) // БанковскийСчетОрганизации
			Тогда
			
			ИзменитьИсточникиДляВыбораБанковскихСчетов();
		КонецЕсли;
	ИначеЕсли ИмяПоля = "СуммаВключаетНДС" Тогда
		СуммаВключаетНДС = Объект.РеквизитыДокумента[26].Значение;
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			РаспознаваниеДокументовСлужебныйКлиентСервер.ПриИзмененииСтавкаНДС(СтрокаТаблицы, СуммаВключаетНДС);
		КонецЦикла;
	ИначеЕсли ИмяПоля = "Продавец" ИЛИ ИмяПоля = "ПокупательОрганизация" Тогда
		// Поступление
		Если НЕ СозданныеДокументы.ДокументВходящий.СозданПоРаспознанномуДокументу Тогда
			СозданныеДокументы.ДокументВходящий.Ссылка = Неопределено;
		КонецЕсли;
		ВыполнитьПоискСозданныхДокументов(ИмяПоля);
		ИзменитьИсточникиДляВыбораДоговора(ИмяПоля);
	ИначеЕсли ИмяПоля = "Покупатель" ИЛИ ИмяПоля = "Исполнитель" Тогда // ИЛИ ИмяПоля = "ПродавецОрганизация" 
		// Реализация
		Если НЕ СозданныеДокументы.ДокументИсходящий.СозданПоРаспознанномуДокументу Тогда
			СозданныеДокументы.ДокументИсходящий.Ссылка = Неопределено;
		КонецЕсли;
		ВыполнитьПоискСозданныхДокументов(ИмяПоля);
		ИзменитьИсточникиДляВыбораДоговора(ИмяПоля);
	ИначеЕсли ИмяПоля = "ИтогоВсегоБелый" ИЛИ ИмяПоля = "ИтогоВсегоКрасный"
		ИЛИ ИмяПоля = "НомерДокумента" ИЛИ ИмяПоля = "ДатаДокумента" Тогда
		ВыполнитьПоискСозданныхДокументов(ИмяПоля);
	КонецЕсли;
	
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
	НайтиИЗаполнитьСозданныеДокументы();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискСозданныхДокументов(ИмяПоля)
	
	Если ИмяПоля = "ИтогоВсегоБелый" ИЛИ ИмяПоля = "ИтогоВсегоКрасный"
		ИЛИ ИмяПоля = "НомерДокумента" ИЛИ ИмяПоля = "ДатаДокумента" Тогда
		
		Если НЕ СозданныеДокументы.ДокументВходящий.СозданПоРаспознанномуДокументу Тогда
			СозданныеДокументы.ДокументВходящий.Ссылка = Неопределено;
		КонецЕсли;
		Если НЕ СозданныеДокументы.ДокументИсходящий.СозданПоРаспознанномуДокументу Тогда
			СозданныеДокументы.ДокументИсходящий.Ссылка = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьОтображениеПоТипуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодборПоля(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрЗаканчиваетсяНа(Элемент.Имя, "Белый") Тогда
		ИмяЭлемента = СтрЗаменить(Элемент.Имя, "Белый", "");
	ИначеЕсли СтрЗаканчиваетсяНа(Элемент.Имя, "Красный") Тогда
		ИмяЭлемента = СтрЗаменить(Элемент.Имя, "Красный", "");
	Иначе
		ИмяЭлемента = Элемент.Имя;
	КонецЕсли;
	
	Реквизит = РаспознаваниеДокументовСлужебныйКлиентСервер.РеквизитДокумента(Объект, ИмяЭлемента, Ложь);
	Если Реквизит = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоординатыКартинки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьНаборКоординат(Реквизит);
	ПриблизитьПоКоординатам(КоординатыКартинки, Реквизит.СтрокВИзображении);
	
	Если Элемент.Имя = "Договор" Тогда
		СтандартнаяОбработка = Ложь;
		Тип = Новый(ТипЗнч(Реквизит.Значение));
		ЗаполнитьСписокВыбораПоляНаСервере(Реквизит.РаспознанныйТекст, Тип, ДанныеВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПоляНаСервере(РаспознанныйТекст, Тип, ДанныеВыбора)
	РаспознаваниеДокументовСлужебный.ЗаполнитьСписокВыбораПоля(ЭтотОбъект, РаспознанныйТекст, Тип, ДанныеВыбора);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораПоля(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		// По жалобам пользователей отключено, хочется, чтобы при выборе существующей номенклатуры 
		// в содержании сохранялся распознанный текст
		//
		//Если Элемент.Имя = "Номенклатура" Тогда
		//	Элементы.ТаблицаДокумента.ТекущиеДанные.Содержание = Строка(ВыбранноеЗначение);
		//КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "ПродавецОрганизация" ИЛИ ИмяЭлемента = "ПокупательОрганизация"
		ИЛИ ИмяЭлемента = "Исполнитель" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийЭлемент = Элементы.ТаблицаДокумента Тогда
		НомерСтроки = Элементы.ТаблицаДокумента.ТекущиеДанные.НомерСтроки;
		Отбор = Новый Структура("НомерСтрокиТЧ", НомерСтроки);
		НаборДанных = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		Значение = Элементы.ТаблицаДокумента.ТекущиеДанные[ИмяЭлемента];
	Иначе
		НаборДанных = Объект.РеквизитыДокумента;
		Отбор = Новый Структура("ИмяЭлемента", ИмяЭлемента);
		ПодходящиеСтроки = Объект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если ПодходящиеСтроки.Количество() > 0 Тогда
			Значение = ПодходящиеСтроки[0].Значение;
		Иначе
			Значение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	НаборДанных = РаспознаваниеДокументовСлужебныйКлиент.НаборДанныхСозданияЭлемента(НаборДанных);
	
	ДополнительныеДанные = Новый Структура;
	ДополнительныеДанные.Вставить("ЮрФизЛицоПоОрганизационнойФорме", ЮрФизЛицоПоОрганизационнойФорме);
	ДополнительныеДанные.Вставить("ТипДоговора", ИсточникПоляДоговорВидДоговора);
	
	РаспознаваниеДокументовСлужебныйКлиент.ОткрытьФормуСозданияЭлемента(
		ИмяЭлемента,
		НаборДанных,
		ДополнительныеДанные,
		Объект,
		Элемент,
		Значение
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьЗначениеТаблицыСозданияНоменклатуры(Элемент) Экспорт
	
	ИмяРеквизита = СтрЗаменить(Элемент.Имя, "ПолеСписокНераспознаннойНоменклатуры" , "");
	
	РедактируемаяСтрока = СтрокаПолейНераспознаннойНоменклатурыПоИмениРеквизита(ИмяРеквизита);
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РедактируемаяСтрока.Выбран = Истина;
	ИзменитьДоступностьКнопкиУстановкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииВыбораПоляНераспознаннойНоменклатуры(Элемент) Экспорт
	
	ИзменитьДоступностьКнопкиУстановкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаГрупповоеСоздание" Тогда
		ОбновитьСтрокиНераспознаннойНоменклатуры();
	КонецЕсли;
	
	// Выделяем все строки
	Для Каждого СтрокаДобавления Из СписокНераспознаннойНоменклатуры Цикл
		Элементы.СписокНераспознаннойНоменклатуры.ВыделенныеСтроки.Добавить(СтрокаДобавления.ПолучитьИдентификатор());
	КонецЦикла;
	
	// Фокусируемся на первой строке
	Если СписокНераспознаннойНоменклатуры.Количество() Тогда
		ИдентификаторПервойСтроки = СписокНераспознаннойНоменклатуры[0].ПолучитьИдентификатор();
		Элементы.СписокНераспознаннойНоменклатуры.ТекущаяСтрока = ИдентификаторПервойСтроки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДокумента

&НаКлиенте
Процедура ТаблицаДокументаПриИзменении(Элемент)
	
	ПорядокСтроки = 0;
	Для Каждого Строка Из ТаблицаДокумента Цикл
		ПорядокСтроки = ПорядокСтроки + 1;
		Если Строка.ПорядокСтроки <> ПорядокСтроки Тогда
			Строка.ПорядокСтроки = ПорядокСтроки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПриАктивизацииЯчейки(Элемент)
	
	ПриАктивизацииЯчейкиТаблицы(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииЯчейкиТаблицы(Элемент)
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ТаблицаФормы") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийВыбранныйЭлемент = Элемент.ТекущийЭлемент;
	Если ТекущийВыбранныйЭлемент = Неопределено Или Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = ТекущийВыбранныйЭлемент.Имя;
	НомерСтрокиТЧ = Элемент.ТекущиеДанные.НомерСтроки;
	
	ЭлементКолонка = Элементы[ИмяРеквизита];
	ЭлементКолонка.СписокВыбора.Очистить();
	
	Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы(ИмяРеквизита, НомерСтрокиТЧ);
	
	Свойства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЯчеекТаблицы, Ключ);
	Если Свойства = Неопределено Тогда
		
		ДанныеПриближения = Новый Структура("Координаты, СтрокВИзображении", Неопределено, 0);
		ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.2, Истина);
		
		Возврат;
	КонецЕсли;
	
	ДанныеПриближения = Новый Структура("Координаты, СтрокВИзображении", Свойства.Координаты, Свойства.СтрокВИзображении);
	ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.2, Истина);
	
	НадписьОшибкаТЧ = Элемент.ТекущиеДанные[ИмяРеквизита + "ТекстОшибки"];
	
	Элементы.НадписьОшибкаТЧ.Видимость = НЕ ПустаяСтрока(НадписьОшибкаТЧ);
	
	СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиент.ПолучитьЗначенияСпискаВыбора(
		Свойства.РаспознанныйТекст, Свойства.ТипЗначения, Свойства.ЗначенияВыбора);
	
	Для Каждого ДанныеВыбора Из СписокДляВыбора Цикл
		ЭлементКолонка.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриблизитьПоКоординатам()
	ПриблизитьПоКоординатам(ДанныеПриближения.Координаты, ДанныеПриближения.СтрокВИзображении);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииКолонки(Элемент)
	
	ИдентификаторСтроки = Элементы["ТаблицаДокумента"].ТекущаяСтрока;
	
	ИмяРеквизита = Элемент.Имя;
	ТекущиеДанные = Элементы["ТаблицаДокумента"].ТекущиеДанные;
	НомерСтрокиТЧ = ТекущиеДанные.НомерСтроки;
	ВыбранноеЗначение = ТекущиеДанные[ИмяРеквизита];
	
	ТекущиеДанные[ИмяРеквизита + "ЗаполненоВручную"] = Истина;
	
	РаспознаваниеДокументовСлужебныйКлиентСервер.ПриИзмененииКолонки(
		Объект,
		ТекущиеДанные,
		ИмяРеквизита,
		ВыбранноеЗначение
	);
	
	РаспознаваниеДокументовСлужебныйКлиентСервер.ПересчитатьПроблемныеРеквизитыТаблицыДокумента(
		ЭтотОбъект,
		ТекущиеДанные
	);
	
	Отбор = Новый Структура("ИмяРеквизита, НомерСтроки", ИмяРеквизита, НомерСтрокиТЧ);
	НайденныеСтроки = ПроблемныеЭлементы.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		НадписьОшибкаТЧ = ТекущиеДанные[ИмяРеквизита + "ТекстОшибки"];
	Иначе
		НадписьОшибкаТЧ = "";
	КонецЕсли;
	
	Элементы.НадписьОшибкаТЧ.Видимость = НЕ ПустаяСтрока(НадписьОшибкаТЧ);
	
	Ключ = РаспознаваниеДокументовСлужебныйКлиентСервер.КлючСвойстваЯчеекТаблицы(ИмяРеквизита, НомерСтрокиТЧ);
	
	Свойства = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СвойстваЯчеекТаблицы, Ключ);
	
	РаспознаваниеДокументовСлужебныйКлиент.ДобавитьСоответствиеРаспознаваемыхСтрок(
		Объект,
		ВариантСохраненияСоответствий,
		НаборСоответствийРаспознанныхСтрок,
		ИмяРеквизита,
		ТекущиеДанные.НомерСтроки,
		ТекущиеДанные[ИмяРеквизита],
		Свойства
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПередУдалением(Элемент, Отказ)
	
	ТекущийНомерСтроки = Элемент.ТекущиеДанные.НомерСтроки;
	Отбор = Новый Структура("НомерСтроки", ТекущийНомерСтроки);
	НайденныеСтроки = ПроблемныеЭлементы.НайтиСтроки(Отбор);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ПроблемныеЭлементы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПослеУдаления(Элемент)
	ТаблицаДокументаПослеУдаленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТаблицаДокументаПослеУдаленияНаСервере()
	
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока ИЛИ Копирование Тогда
		НоваяСтрока = Элемент.ТекущиеДанные;
		НоваяСтрока.ПорядокСтроки = ТаблицаДокумента.Количество();
		
		ЗаполнитьКлючиНовойСтроки(НоваяСтрока, МаксимальныйНомерСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНераспознаннойНоменклатуры

&НаКлиенте
Процедура СписокНераспознаннойНоменклатурыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.СписокНераспознаннойНоменклатуры.ТекущиеДанные = Неопределено
		Или Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторИсходнойСтроки = Элемент.ТекущиеДанные.ИдентификаторИсходнойСтроки;
	СтрокаТаблицыДокумента = ТаблицаДокумента.НайтиПоИдентификатору(ИдентификаторИсходнойСтроки);
	Если СтрокаТаблицыДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, "СписокНераспознаннойНоменклатуры", "");
	НомерСтроки = СтрокаТаблицыДокумента.НомерСтроки;
	
	ОбновлениеВыделенияРамкойПоляДокумента(ИмяЭлемента, НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНераспознаннойНоменклатурыПриАктивизацииСтроки(Элемент)
	
	Для Каждого Реквизит Из ИменаКолонокНераспознаннойНоменклатуры Цикл
		Если Элементы.СписокНераспознаннойНоменклатуры.ТекущиеДанные = Неопределено Тогда
			УстановитьЗначениеДляРеквизитовБыстрогоРедактирования(Реквизит.Значение);
		Иначе
			ЗначениеЯчейки = Элементы.СписокНераспознаннойНоменклатуры.ТекущиеДанные[Реквизит.Значение];
			УстановитьЗначениеДляРеквизитовБыстрогоРедактирования(Реквизит.Значение, ЗначениеЯчейки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСозданныйДокумент(Команда)
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Входящий") Тогда
		ОткрываемыйДокумент = СозданныеДокументы.ДокументВходящий.Ссылка;
		Если Не ЗначениеЗаполнено(ОткрываемыйДокумент) Тогда
			ОткрываемыйДокумент = СозданныеДокументы.ДокументИсходящий.Ссылка;
		КонецЕсли;
	Иначе
		ОткрываемыйДокумент = СозданныеДокументы.ДокументИсходящий.Ссылка;
		Если Не ЗначениеЗаполнено(ОткрываемыйДокумент) Тогда
			ОткрываемыйДокумент = СозданныеДокументы.ДокументИсходящий.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьДокументПоСсылке(ОткрываемыйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеДубляДокументаОбщее(Команда)
	
	ИдДубля = СтрРазделить(СтрЗаменить(Команда.Имя, "ОткрытиеДокумент", ""), "Дубль", Ложь);
	ЭтотДубль = ДанныеДублей["Документ"+ИдДубля[0]][Число(ИдДубля[1])];
	ОткрытьДокументПоСсылке(ЭтотДубль.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеДубляСозданногоДокументаОбщее(Команда)
	
	ИдДубля = СтрРазделить(СтрЗаменить(Команда.Имя, "ОткрытиеСозданныйДокумент", ""), "Дубль", Ложь);
	ЭтотДубль = ДанныеСозданныхДублей["Документ"+ИдДубля[0]][Число(ИдДубля[1])];
	ОткрытьДокументПоСсылке(ЭтотДубль);
	
КонецПроцедуры

&НаКлиенте
Процедура ПожаловатьсяНаКачество(Команда)
	
	РаспознаваниеДокументовСлужебныйКлиент.ОткрытьФормуОбратнойСвязи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьДокумент(Команда)
	
	Если Объект.Направление = ПредопределенноеЗначение("Перечисление.НаправленияРаспознанногоДокумента.Исходящий") Тогда
		ОткрытиеФормыДокумента("СчетНаОплатуПокупателю");
	Иначе
		ОткрытиеФормыДокумента("СчетНаОплатуПоставщика");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перепроверить(Команда)
	
	КлючеваяОперация = "РаспознаваниеДокументов.Перепроверить";
	Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
	
	ПерепроверитьНаСервере();
	
	ОбновитьСтрокиНераспознаннойНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	ПараметрыСоздаваемойНоменклатуры = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.СписокНераспознаннойНоменклатуры.ВыделенныеСтроки Цикл
		
		Данные = СписокНераспознаннойНоменклатуры.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		ПараметрыСоздания = Новый Структура();
		
		Для Каждого Колонка Из ИменаКолонокНераспознаннойНоменклатуры Цикл
			ИмяКолонки = Колонка.Значение;
			ПараметрыСоздания.Вставить(ИмяКолонки, Данные[ИмяКолонки]);
		КонецЦикла;
		
		ПараметрыСоздания.Вставить("Ссылка");
		
		ПараметрыСоздаваемойНоменклатуры.Добавить(ПараметрыСоздания);
		
	КонецЦикла;
	
	ВыполнитьСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначенияСтрокНераспознаннойНоменклатуры(Команда)
	
	Для Каждого РеквизитТекущихСтрок Из ПоляНераспознаннойНоменклатуры Цикл
		Если РеквизитТекущихСтрок.Выбран = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьЗначениеДляВыделенныхСтрок(РеквизитТекущихСтрок.Значение, РеквизитТекущихСтрок.ИмяРеквизита);
	КонецЦикла;
	
	ИзменитьДоступностьКнопкиУстановкиРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВсегоНайденные(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РаспознанныйДокумент", Объект.Ссылка);
	
	ОткрытьФорму(
		"Документ.РаспознанныйДокумент.Форма.ПрикрепитьИзображениеКНайденомуДокументу",
		ПараметрыОткрытия,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьСкан(Команда)
	
	ОтмеченоОбработанным = ПрикрепитьСканНаСервереИОтметитьОбработанным();
	
	Если ОтмеченоОбработанным Тогда
		СледующийДокумент();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрикрепитьСканНаСервереИОтметитьОбработанным()
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
		Кандидат = СозданныеДокументы.ДокументВходящий.Ссылка;
	Иначе 
		Кандидат = СозданныеДокументы.ДокументИсходящий.Ссылка;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если ЗначениеЗаполнено(Кандидат) Тогда
		РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(Объект, Кандидат, АдресКартинки);
		РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ЗаписатьЗначения(Кандидат, Объект.Ссылка, Ложь);
	КонецЕсли;
	
	ТекущиеНастройки = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("ПрикрепилСкан");
	Пакет = Новый Структура("created", РезультатОбратнойСвязи);
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(Объект.ИдентификаторРезультата, Пакет);
	
	Если ТекущиеНастройки.ПомечатьДокументОбработаннымПриПрикреаленииИзображения Тогда
		Объект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
		Записать();
		
		РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Проведен");
		Пакет = Новый Структура("created", РезультатОбратнойСвязи);
		РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(Объект.ИдентификаторРезультата, Пакет);
		
		ОтмеченоОбработанным = Истина;
	Иначе
		ОтмеченоОбработанным = Ложь;
	КонецЕсли;
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	Возврат ОтмеченоОбработанным;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НаправлениеПриИзмененииНаСервере()
	
	ИзменитьИсточникиДляВыбораДоговора();
	СохранитьИтоговыеЗначения();
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	НайтиИЗаполнитьСозданныеДокументы();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьПоФункциональнымОпциям()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками")Тогда
		Элементы.ГруппаДоговор.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОСозданииДокумента(ТипДокументаСтрокой)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТипДокументаСтрокой", ТипДокументаСтрокой);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученРезультатОтветаНаВопрос", ЭтаФорма, ДополнительныеПараметры);
	
	СписокОбъектов = Новый СписокЗначений();
	СписокОбъектов.ЗагрузитьЗначения(ПолучитьСозданныеДокументыИзТекущего());
	
	ПараметрыФормы = Новый Структура("СписокОбъектов", СписокОбъектов);
	
	ОткрытьФорму("ОбщаяФорма.ВопросПриНаличииИмеющихсяДокументовБРД", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСозданныеДокументыИзТекущего()
	
	СвязанныеДокументы = РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ВсеСвязанныеДокументы(Объект.Ссылка);
	Возврат СвязанныеДокументы.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура СледующийДокумент()
	
	Результат = НайтиДокумент(Истина);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = НайтиДокумент(Ложь);
	КонецЕсли;
	
	ПерейтиНаДокумент(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаДокумент(Результат)
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ИмяФормыОбработчика = РаспознаваниеДокументовСлужебныйКлиентПовтИсп.ПолучитьИмяОткрываемойФормыПоТипу(Результат.ТипДокумента, Результат.ВариантОбработки);
		Если Не ПустаяСтрока(ИмяФормыОбработчика) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", Результат.Ссылка);
			ПараметрыФормы.Вставить("ОтборИзСписка", Параметры.ОтборИзСписка);
			ОткрытьФорму(ИмяФормыОбработчика, ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция НайтиДокумент(Следующий)
	
	ОтборДата = Ложь;
	ОтборОрганизация = Ложь;
	ОтборКонтрагент = Ложь;
	
	Если ЗначениеЗаполнено(Параметры.ОтборИзСписка) Тогда 
		
		Если ЗначениеЗаполнено(Параметры.ОтборИзСписка.ТекущаяДата) Тогда 
			
			ОтборДата = Истина;
			
			Если Параметры.ОтборИзСписка.ТекущаяДатаПериод = "День" Тогда
				НачалоПериода = НачалоДня(Параметры.ОтборИзСписка.ТекущаяДата);
				КонецПериода = КонецДня(Параметры.ОтборИзСписка.ТекущаяДата);
			ИначеЕсли Параметры.ОтборИзСписка.ТекущаяДатаПериод = "Месяц" Тогда
				НачалоПериода = НачалоМесяца(Параметры.ОтборИзСписка.ТекущаяДата);
				КонецПериода = КонецМесяца(Параметры.ОтборИзСписка.ТекущаяДата);
			КонецЕсли;
			
		КонецЕсли;
		
		ОтборОрганизация = ЗначениеЗаполнено(Параметры.ОтборИзСписка.ТекущаяОрганизация);
		ОтборКонтрагент = ЗначениеЗаполнено(Параметры.ОтборИзСписка.ТекущийКонтрагент);
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	РаспознанныйДокумент.Ссылка КАК Ссылка,
		|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента
		|ИЗ
		|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
		|ГДЕ
		|	(РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
		|			ИЛИ РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Изменен))
		|	И НЕ РаспознанныйДокумент.ПометкаУдаления
		|	И РаспознанныйДокумент.Дата < &Дата
		|	И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РаспознанныйДокумент.Контрагент = &Контрагент
		|	И РаспознанныйДокумент.Организация = &Организация
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаспознанныйДокумент.Дата УБЫВ";
	
	Если Следующий Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " УБЫВ", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "<", ">=");
	КонецЕсли;
	
	Если ОтборДата Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода", "");
	КонецЕсли;
	
	Если ОтборОрганизация Тогда
		Запрос.УстановитьПараметр("Организация", Параметры.ОтборИзСписка.ТекущаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Организация = &Организация", "");
	КонецЕсли;
	
	Если ОтборКонтрагент Тогда
		Запрос.УстановитьПараметр("Контрагент", Параметры.ОтборИзСписка.ТекущийКонтрагент);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Контрагент = &Контрагент", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура("Ссылка, ТипДокумента");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПолученРезультатОтветаНаВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработатьСозданиеНовогоДокумента(ДополнительныеПараметры.ТипДокументаСтрокой);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриблизитьПоКоординатам(Координаты, СтрокВИзображении)
	
	Если HTMLДокументСформирован Тогда
		Если РаспознаваниеДокументовКлиентСервер.ВсеКоординатыНулевые(Координаты) Тогда
			Элементы.ПолеПросмотра.Документ.defaultView.clean_bbox();
		Иначе
			Элементы.ПолеПросмотра.Документ.defaultView.zoom_to_bbox(Координаты[0], Координаты[1], Координаты[2], Координаты[3], СтрокВИзображении);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресаКартинок()
	
	Для Каждого ДанныеРеквизита Из Объект.РеквизитыДокумента Цикл
		Если РаспознаваниеДокументовКлиентСервер.ВсеКоординатыНулевые(ДанныеРеквизита) Тогда
			Картинка = Неопределено;
		Иначе
			ИдентификаторРеквизита = ДанныеРеквизита.ИсходныйНомерСтроки - 1;
			Картинка = Объект.Ссылка.РеквизитыДокумента.Получить(ИдентификаторРеквизита).ОбластьИзображения.Получить();
			
			Если Картинка = Неопределено Или Картинка.Размер() = 0 Тогда
				Картинка = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если Картинка = Неопределено Тогда
			ДанныеРеквизита.СтрокВИзображении = 0;
		КонецЕсли;
		
		АдресТекущейКартинки = ПоместитьВоВременноеХранилище(Картинка, УникальныйИдентификатор);
		ДанныеРеквизита.АдресКартинки = АдресТекущейКартинки;
	КонецЦикла;
	
	Для Каждого ДанныеРеквизита Из Объект.РеквизитыТабличныхЧастей Цикл
		Если РаспознаваниеДокументовКлиентСервер.ВсеКоординатыНулевые(ДанныеРеквизита) Тогда
			Картинка = Неопределено;
		Иначе
			ИдентификаторРеквизита = ДанныеРеквизита.ИсходныйНомерСтроки - 1;
			Картинка = Объект.Ссылка.РеквизитыТабличныхЧастей.Получить(ИдентификаторРеквизита).ОбластьИзображения.Получить();
			
			Если Картинка = Неопределено Или Картинка.Размер() = 0 Тогда
				Картинка = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если Картинка = Неопределено Тогда
			ДанныеРеквизита.СтрокВИзображении = 0;
		КонецЕсли;
		
		АдресТекущейКартинки = ПоместитьВоВременноеХранилище(Картинка, УникальныйИдентификатор);
		ДанныеРеквизита.АдресКартинки = АдресТекущейКартинки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИзображенияРеквизитов(Настройки, Родитель = Неопределено, ГруппаРеквизита = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = Элементы.ГруппаРеквизиты;
	КонецЕсли;
	
	СоответствиеПолейИГрупп = Новый Соответствие;
	
	Для Каждого Поле Из Родитель.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Поле) = Тип("ГруппаФормы") Тогда
			ДобавитьИзображенияРеквизитов(Поле, ГруппаРеквизита);
			Продолжить;
		ИначеЕсли НЕ ТипЗнч(Поле) = Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаРеквизита = Элементы.Добавить("Группа" + Поле.Имя, Тип("ГруппаФормы"), Поле.Родитель);
		ГруппаРеквизита.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаРеквизита.ОтображатьЗаголовок = Ложь;
		СоответствиеПолейИГрупп.Вставить(Поле, ГруппаРеквизита);
		
	КонецЦикла;
	
	Для Каждого ДанныеСоответствия Из СоответствиеПолейИГрупп Цикл
		Элементы.Переместить(ДанныеСоответствия.Ключ, ДанныеСоответствия.Значение);
		ОтобразитьСвязаннуюКартинку(ДанныеСоответствия);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСвязаннуюКартинку(ДанныеСоответствия)
	
	Путь = ДанныеСоответствия.Ключ.ПутьКДанным;
	НачалоИдентификатора = СтрНайти(Путь, "[") ;
	Если НЕ НачалоИдентификатора Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторРеквизита = Сред(Путь, НачалоИдентификатора + 1, СтрНайти(Путь, "]") - НачалоИдентификатора + 1);
	ОписаниеЧисла = Новый ОписаниеТипов("Число");
	ИдентификаторРеквизита = ОписаниеЧисла.ПривестиЗначение(ИдентификаторРеквизита);
	
	ПолеКартинки = Элементы.Добавить("КартинкаРеквизита" + ИдентификаторРеквизита, Тип("ПолеФормы"), ДанныеСоответствия.Значение);
	ПолеКартинки.Вид = ВидПоляФормы.ПолеКартинки;
	ПолеКартинки.Высота = Объект.РеквизитыДокумента[ИдентификаторРеквизита].СтрокВИзображении;
	ПолеКартинки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеКартинки.РазмерКартинки = РазмерКартинки.Пропорционально;
	ПолеКартинки.РастягиватьПоВертикали = Ложь;
	ПолеКартинки.АвтоМаксимальнаяВысота = Ложь;
	ПолеКартинки.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	ПолеКартинки.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ПолеКартинки.ПутьКДанным = "Объект.РеквизитыДокумента[" + ИдентификаторРеквизита + "].АдресКартинки";
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиТаблицы()
	
	ДобавляемыеРеквизиты = Новый Массив;
	НастроитьКолонкиРекурсивно(ДобавляемыеРеквизиты, Элементы.ТаблицаДокумента);
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	СоздатьЭлементыДобавленныхРеквизитов(ДобавляемыеРеквизиты, Элементы.ТаблицаДокумента);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиРекурсивно(ДобавляемыеРеквизиты, ЭлементыОбхода)
	
	Для Каждого ЭлементКолонка Из ЭлементыОбхода.ПодчиненныеЭлементы Цикл
		Если ЭлементКолонка.Вид = ВидГруппыФормы.ГруппаКолонок Тогда
			НастроитьКолонкиРекурсивно(ДобавляемыеРеквизиты, ЭлементКолонка);
		ИначеЕсли ЭлементКолонка.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементКолонка.ВыбиратьТип = Ложь;
			ЭлементКолонка.БыстрыйВыбор = Ложь;
			ЭлементКолонка.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
			ЭлементКолонка.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораПоля");
			ЭлементКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииКолонки");
			
			Если ЭлементКолонка.Имя <> "ТаблицаДокументаПорядокСтроки"
				И Не СтрЗаканчиваетсяНа(ЭлементКолонка.Имя, "ТекстОшибки")
				И Не СтрЗаканчиваетсяНа(ЭлементКолонка.Имя, "ЗаполненоВручную") Тогда
				
				НовыйРеквизит = Новый РеквизитФормы(ЭлементКолонка.Имя + "ТекстОшибки", Новый ОписаниеТипов("Строка"));
				НовыйРеквизит.Путь = "ТаблицаДокумента";
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
				
				НовыйРеквизит = Новый РеквизитФормы(ЭлементКолонка.Имя + "ЗаполненоВручную", Новый ОписаниеТипов("Булево"));
				НовыйРеквизит.Путь = "ТаблицаДокумента";
				ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыДобавленныхРеквизитов(ДобавляемыеРеквизиты, ЭлементРодитель)
	
	Для Каждого Реквизит Из ДобавляемыеРеквизиты Цикл 
		НовыйЭлемент = Элементы.Добавить(Реквизит.Имя, Тип("ПолеФормы"), ЭлементРодитель);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТаблицаДокумента." + Реквизит.Имя;
		НовыйЭлемент.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуДокумента()
	
	ТаблицаДокументаТЗ = РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(Объект);
	ТаблицаДокумента.Загрузить(ТаблицаДокументаТЗ);
	Если Объект.РеквизитыТабличныхЧастей.Количество() = 0 Тогда
		// РеквизитыТабличныхЧастей.Количество() = 0 - значит таблицы никогда не было, в ней нет колонок и
		// РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента не сможет создать колонки
		НоваяСтрока = ТаблицаДокумента.Добавить();
		НоваяСтрока.ПорядокСтроки = 1;
		
		ЗаполнитьКлючиНовойСтроки(НоваяСтрока, МаксимальныйНомерСтроки);
		РаспознаваниеДокументовСлужебный.СохранитьТаблицуДокумента(Объект, ТаблицаДокумента.Выгрузить());
	КонецЕсли;
	
	Для Каждого Запись Из Объект.РеквизитыТабличныхЧастей Цикл
		Если Запись.СтрокаУдалена Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("НомерСтроки", Запись.НомерСтрокиТЧ);
		ИзменяемыеСтроки = ТаблицаДокумента.НайтиСтроки(Отбор);
		
		Если НЕ ИзменяемыеСтроки.Количество() Тогда
			ИзменяемаяСтрока = ТаблицаДокумента.Добавить();
			ИзменяемаяСтрока.НомерСтроки = Запись.НомерСтрокиТЧ;
		Иначе
			ИзменяемаяСтрока = ИзменяемыеСтроки[0];
		КонецЕсли;
		
		Если Запись.ИмяРеквизита = "Номенклатура" Тогда
			НомерСтрокиТаблицы = Запись.НомерСтрокиТЧ;
			ВыбранноеЗначение = ИзменяемаяСтрока[Запись.ИмяРеквизита];
			
			РаспознаваниеДокументовПереопределяемый.ПриИзмененииКолонкиНаСервере(
				Объект,
				ИзменяемаяСтрока,
				"Номенклатура",
				НомерСтрокиТаблицы,
				ВыбранноеЗначение);
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.НомерСтроки");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ИзменяемаяСтрока.НомерСтроки;
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента.Номенклатура");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СтрШаблон(НСтр("ru = 'Не сопоставлен: %1'"), Запись.РаспознанныйТекст));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКлючиНовойСтроки(НоваяСтрока, МаксимальныйНомерСтроки)
	
	МаксимальныйНомерСтроки = МаксимальныйНомерСтроки + 1;
	НоваяСтрока.НомерСтроки = МаксимальныйНомерСтроки;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПоРеквизитам()
	
	ДанныеДляВыбораРеквизитов = РаспознаваниеДокументовСлужебный.ПолучитьДанныеДляСпискаВыбора(Объект.Ссылка);
	АдресЗначенияВыбораДляШапки = ПоместитьВоВременноеХранилище(ДанныеДляВыбораРеквизитов, УникальныйИдентификатор);
	
	Для Каждого РеквизитШапки Из Объект.РеквизитыДокумента Цикл
		
		Если ПустаяСтрока(РеквизитШапки.ИмяЭлемента) Тогда // Реквизит не отображается на форме
			Продолжить;
		КонецЕсли;
		
		Если РеквизитШапки.ИмяЭлемента = "ИтогоСумма"
			Или РеквизитШапки.ИмяЭлемента = "ИтогоСуммаНДС"
			Или РеквизитШапки.ИмяЭлемента = "ИтогоВсего" Тогда
			
			ИзменяемыйЭлемент = Элементы[РеквизитШапки.ИмяЭлемента + "Белый"];
			НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент);
			НастроитьИзменяемыйЭлемент(РеквизитШапки, ИзменяемыйЭлемент, ДанныеДляВыбораРеквизитов);
			
			ИзменяемыйЭлемент = Элементы[РеквизитШапки.ИмяЭлемента + "Красный"];
			НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент);
			НастроитьИзменяемыйЭлемент(РеквизитШапки, ИзменяемыйЭлемент, ДанныеДляВыбораРеквизитов);
		Иначе
			ИзменяемыйЭлемент = Элементы[РеквизитШапки.ИмяЭлемента];
			НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент);
			НастроитьИзменяемыйЭлемент(РеквизитШапки, ИзменяемыйЭлемент, ДанныеДляВыбораРеквизитов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьИзменяемыйЭлемент(РеквизитШапки, ИзменяемыйЭлемент, ДанныеДляВыбораРеквизитов)
	
	ИзменяемыйЭлемент.Подсказка = Неопределено;
	РаспознанныйТекст = РеквизитШапки.РаспознанныйТекст;
	
	Если РеквизитШапки.ИмяЭлемента = "СуммаВключаетНДС" Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПримитивныйТип = РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(РеквизитШапки.Значение));
	Если НЕ РеквизитШапки.ИмяЭлемента = "Договор" Тогда
		Отбор = Новый Структура("ИмяРеквизита", РеквизитШапки.ИмяРеквизита);
		ПодходящиеЗначения = ДанныеДляВыбораРеквизитов.НайтиСтроки(Отбор);
		
		Если РеквизитШапки.ИмяЭлемента = "ПродавецОрганизация"
			Или РеквизитШапки.ИмяЭлемента = "ПокупательОрганизация"
			Или РеквизитШапки.ИмяЭлемента = "Исполнитель"
			Или ЭтоПримитивныйТип Тогда
			
			КартинкаСоздание = 2;
		Иначе
			КартинкаСоздание = 1;
		КонецЕсли;
		
		Если РеквизитШапки.ИмяЭлемента = "БанковскийСчетОрганизации" Тогда
			// Нечеткий поиск не отбирает банковские счета по владельцу, поэтому ПодходящиеЗначения
			// у БанковскийСчетОрганизации и БанковскийСчетКонтрагента одинаковые. Он будет храниться в ОбъединенныеСпискиВыбора
			Если ОбъединенныеСпискиВыбора = Неопределено Тогда
				ОбъединенныеСпискиВыбора = Новый Структура;
			КонецЕсли;
			
			// Преобразуем ПодходящиеЗначения в массив структур, чтобы была возможность сериализации
			МассивПодходящих = Новый Массив;
			Для Каждого ЭлементМассива Из ПодходящиеЗначения Цикл
				МассивПодходящих.Добавить(Новый Структура("Значение, Уверенность", ЭлементМассива.Значение, ЭлементМассива.Уверенность));
			КонецЦикла;
			
			ДанныеСписка = Новый Структура("РаспознанныйТекст, ПодходящиеЗначения, КартинкаСоздание", РаспознанныйТекст, МассивПодходящих, КартинкаСоздание);
			ОбъединенныеСпискиВыбора.Вставить(РеквизитШапки.ИмяЭлемента, ДанныеСписка);
		КонецЕсли;
		
		СписокДляВыбора = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьСписокДляВыбораПользователем(РаспознанныйТекст, ПодходящиеЗначения, КартинкаСоздание);
		ИзменяемыйЭлемент.СписокВыбора.Очистить();
		Для Каждого ДанныеВыбора Из СписокДляВыбора Цикл
			Если ТипЗнч(ДанныеВыбора.Значение) = Тип("Структура") Тогда
				ИзменяемыйЭлемент.СписокВыбора.Добавить(ДанныеВыбора.Значение.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
			Иначе
				Если ЭтоПримитивныйТип Тогда
					ИзменяемыйЭлемент.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление);
				Иначе
					ИзменяемыйЭлемент.СписокВыбора.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитШапки.Значение) И РеквизитШапки.ИмяЭлемента <> "СрокОплаты" И РеквизитШапки.ИмяЭлемента <> "СкидкаПоДокументу"
		И РеквизитШапки.ИмяЭлемента <> "ИтогоСумма" И РеквизитШапки.ИмяЭлемента <> "ИтогоСуммаНДС" И РеквизитШапки.ИмяЭлемента <> "ИтогоВсего"
		И Элементы[РеквизитШапки.ИмяЭлемента].Родитель.Видимость Тогда
		
		ИзменяемыйЭлемент.ПодсказкаВвода = СтрШаблон(НСтр("ru = 'Не сопоставлен: %1'"), РаспознанныйТекст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСвойстваЭлементаРеквизита(ИзменяемыйЭлемент, РазрешитьБыстрыйВыбор = Ложь)
	
	ИзменяемыйЭлемент.БыстрыйВыбор = РазрешитьБыстрыйВыбор;
	ИзменяемыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	ИзменяемыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	ИзменяемыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииПоля");
	ИзменяемыйЭлемент.УстановитьДействие("АвтоПодбор", "Подключаемый_АвтоПодборПоля");
	ИзменяемыйЭлемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ОбработкаВыбораПоля");
	Если РазрешитьБыстрыйВыбор Тогда
		ИзменяемыйЭлемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораПоля");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСоответствиеРеквизитовЭлементам()
	
	Для Каждого РеквизитДокумента Из Объект.РеквизитыДокумента Цикл
		Идентификатор = РеквизитДокумента.ПолучитьИдентификатор();
		ПутьКДанным = "Объект.РеквизитыДокумента[" + Идентификатор + "].Значение";
		
		Для Каждого ПроверяемыйЭлемент Из Элементы Цикл
			Если ТипЗнч(ПроверяемыйЭлемент) = Тип("ПолеФормы") И ПроверяемыйЭлемент.ПутьКДанным = ПутьКДанным Тогда
				РеквизитДокумента.ИмяЭлемента = ПроверяемыйЭлемент.Имя;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтображениеПоТипуДокумента()
	
	Элементы.Продавец.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Элементы.Покупатель.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	
	Элементы.ПродавецОрганизация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	Элементы.ПокупательОрганизация.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Элементы.Исполнитель.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	
	Элементы.БанковскийСчетКонтрагента.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Элементы.БанковскийСчетОрганизации.Видимость = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИсточникиДляВыбораДоговора(ИмяПоля = "")
	
	Договор = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(Объект, "Договор",
		Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Контрагент, Организация");
	
	ЗаполнитьИсточникиДляВыбораДоговора();
	
	ПерезаполнитьДоговор = 
		    ЗначениеЗаполнено(ИмяПоля)
		Или Не ЗначениеЗаполнено(Договор)
		Или РеквизитыДоговора.Владелец    <> ИсточникПоляДоговорКонтрагент
		Или РеквизитыДоговора.Организация <> ИсточникПоляДоговорОрганизация;
	
	Элементы.Договор.Доступность =
		  ЗначениеЗаполнено(ИсточникПоляДоговорОрганизация)
		И ЗначениеЗаполнено(ИсточникПоляДоговорКонтрагент);
	
	Если ПерезаполнитьДоговор Тогда
		РаспознаваниеДокументовСлужебный.ЗаполнитьДоговорКонтрагента(Объект);
	КонецЕсли;
	
	Если ИмяПоля = "Продавец" ИЛИ ИмяПоля = "ПродавецОрганизация" Тогда
		ОбновитьСписокВыбораБанковскихСчетов();
		ИзменитьИсточникиДляВыбораБанковскихСчетов();
	КонецЕсли;
	
	ИзменитьОтображениеПоТипуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсточникиДляВыбораДоговора()
	
	ПараметрыВыбораДоговора = РаспознаваниеДокументовСлужебный.ПараметрыВыбораДоговора(Объект);
	
	ВидыДоговоров = Новый СписокЗначений;
	ВидыДоговоров.ЗагрузитьЗначения(ПараметрыВыбораДоговора.ВидыДоговоров);
	
	ИсточникПоляДоговорВидДоговора = ВидыДоговоров;
	ИсточникПоляДоговорКонтрагент = ПараметрыВыбораДоговора.Контрагент;
	ИсточникПоляДоговорОрганизация = ПараметрыВыбораДоговора.Организация;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораБанковскихСчетов()
	
	Если ОбъединенныеСпискиВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСписка = ОбъединенныеСпискиВыбора["БанковскийСчетОрганизации"];
	Если ДанныеСписка.ПодходящиеЗначения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияСОтбором = ОставитьПодходящиеСчета(ДанныеСписка.ПодходящиеЗначения, Объект.РеквизитыДокумента[2].Значение, Объект.РеквизитыДокумента[8].Значение);
	
	ИменаЭлементов = Новый Массив;
	ИменаЭлементов.Добавить("БанковскийСчетКонтрагента");
	ИменаЭлементов.Добавить("БанковскийСчетОрганизации");
	
	Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
		СписокВыбораСчетов = Элементы[ИмяЭлемента].СписокВыбора;
		СписокВыбораСчетов.Очистить();
		
		СписокДляЗагрузки = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьСписокДляВыбораПользователем(ДанныеСписка.РаспознанныйТекст, ЗначенияСОтбором[ИмяЭлемента], ДанныеСписка.КартинкаСоздание);
		Для Каждого ДанныеВыбора Из СписокДляЗагрузки Цикл
			Если ТипЗнч(ДанныеВыбора.Значение) = Тип("Структура") Тогда
				СписокВыбораСчетов.Добавить(ДанныеВыбора.Значение.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
			Иначе
				СписокВыбораСчетов.Добавить(ДанныеВыбора.Значение, ДанныеВыбора.Представление, , ДанныеВыбора.Картинка);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОставитьПодходящиеСчета(ПодходящиеЗначения, КонтрагентВладелец, ОрганизацияВладелец)
	
	// Отбор по владельцу. Владельцем может быть Контрагент или Организация
	
	ТЗК = Новый ТаблицаЗначений;
	ТЗК.Колонки.Добавить("Позиция", Новый ОписаниеТипов("Число"));
	ТЗК.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаКонтрагентов"));
	ТЗК.Колонки.Добавить("Уверенность", Новый ОписаниеТипов("Число"));
	
	ТЗО = Новый ТаблицаЗначений;
	ТЗО.Колонки.Добавить("Позиция", Новый ОписаниеТипов("Число"));
	ТЗО.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	ТЗО.Колонки.Добавить("Уверенность", Новый ОписаниеТипов("Число"));

	Ид = 0;
	Для Каждого ЭлементМассива Из ПодходящиеЗначения Цикл
		СтрТЗ = ТЗК.Добавить();
		СтрТЗ.Позиция = Ид;
		СтрТЗ.Значение = ЭлементМассива.Значение;
		СтрТЗ.Уверенность = ЭлементМассива.Уверенность;
		Ид = Ид + 1;
		
		СтрТЗ = ТЗО.Добавить();
		СтрТЗ.Позиция = Ид;
		СтрТЗ.Значение = ЭлементМассива.Значение;
		СтрТЗ.Уверенность = ЭлементМассива.Уверенность;
		Ид = Ид + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Позиция КАК Позиция,
	|	ТЗ.Значение КАК Значение,
	|	ТЗ.Уверенность КАК Уверенность
	|ПОМЕСТИТЬ втТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТЗ.Значение КАК Значение,
	|	втТЗ.Уверенность КАК Уверенность
	|ИЗ
	|	втТЗ КАК втТЗ
	|ГДЕ
	|	втТЗ.Значение.Владелец = &КонтрагентВладелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	втТЗ.Позиция";
	
	Запрос.УстановитьПараметр("ТЗ", ТЗК);
	Запрос.УстановитьПараметр("КонтрагентВладелец", КонтрагентВладелец);

	Результаты = Запрос.ВыполнитьПакет();
	ПодходящиеСчета = Новый Структура;
	ПодходящиеСчета.Вставить("БанковскийСчетКонтрагента", Результаты[1].Выгрузить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Позиция КАК Позиция,
	|	ТЗ.Значение КАК Значение,
	|	ТЗ.Уверенность КАК Уверенность
	|ПОМЕСТИТЬ втТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	втТЗ.Значение КАК Значение,
	|	втТЗ.Уверенность КАК Уверенность
	|ИЗ
	|	втТЗ КАК втТЗ
	|ГДЕ
	|	втТЗ.Значение.Владелец = &ОрганизацияВладелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	втТЗ.Позиция";
	
	Запрос.УстановитьПараметр("ТЗ", ТЗО);
	Запрос.УстановитьПараметр("ОрганизацияВладелец", ОрганизацияВладелец);

	Результаты = Запрос.ВыполнитьПакет();
	ПодходящиеСчета.Вставить("БанковскийСчетОрганизации", Результаты[1].Выгрузить());
	
	Возврат ПодходящиеСчета;
	
КонецФункции

&НаСервере
Процедура ИзменитьИсточникиДляВыбораБанковскихСчетов(ОбновитьСчета = Истина)
	
	Если ОбновитьСчета Тогда
		Объект.РеквизитыДокумента[21].Значение = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
		Объект.РеквизитыДокумента[22].Значение = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
		РаспознаваниеДокументовСлужебный.ЗаполнитьБанковскийСчет(Объект);
	КонецЕсли;
	
	ИсточникПоляСчетКонтрагентаВладелец = Объект.РеквизитыДокумента[2].Значение;
	ИсточникПоляСчетОрганизацииВладелец = Объект.РеквизитыДокумента[8].Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеФормыДокумента(ТипДокументаСтрокой)
	
	Если ТипДокументаСтрокой = "СчетНаОплатуПокупателю" Тогда
		СвязанныйДокумент = СозданныеДокументы.ДокументИсходящий.Ссылка;
	ИначеЕсли ТипДокументаСтрокой = "СчетНаОплатуПоставщика" Тогда
		СвязанныйДокумент = СозданныеДокументы.ДокументВходящий.Ссылка;
	КонецЕсли;
	
	Если ПолучитьСозданныеДокументыИзТекущего().Количество() Тогда
		ЗадатьВопросОСозданииДокумента(ТипДокументаСтрокой);
		Возврат;
	КонецЕсли;
	
	ОбработатьСозданиеНовогоДокумента(ТипДокументаСтрокой);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСозданиеНовогоДокумента(ТипДокументаСтрокой)
	
	ПараметрыЗаполнения = ПолучитьПараметрыОткрытияФормы(ТипДокументаСтрокой);
	
	// Запрет редактирования
	ДатаДокумента = Объект.РеквизитыДокумента[1].Значение;
	РедактированиеЗапрещено = ЗапрещеноСозданиеДокументаВЗакрытомПериоде(ТипДокументаСтрокой, ДатаДокумента);
	
	Если РедактированиеЗапрещено Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ТипДокументаСтрокой", ТипДокументаСтрокой);
		ДополнительныеПараметры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВопросаСменыДаты", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Дата документа находится в закрытом периоде.
		|Изменить дату документа на текущую?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		СоздатьДокументПоПараметрам(ТипДокументаСтрокой, ПараметрыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапрещеноСозданиеДокументаВЗакрытомПериоде(Знач ТипДокументаСтрокой, Знач ДатаДокумента)
	
	ПроверяемыйДокумент = Документы[ТипДокументаСтрокой].СоздатьДокумент();
	ПроверяемыйДокумент.Дата = ДатаДокумента;
	РедактированиеЗапрещено = ДатыЗапретаИзменения.ИзменениеЗапрещено(ПроверяемыйДокумент);
	
	Возврат РедактированиеЗапрещено;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеВопросаСменыДаты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ДополнительныеПараметры.ПараметрыЗаполнения;
	ПараметрыЗаполнения.Дата = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	СоздатьДокументПоПараметрам(ДополнительныеПараметры.ТипДокументаСтрокой, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументПоПараметрам(ТипДокументаСтрокой, ПараметрыЗаполнения)
	
	Результат = СоздатьДокумент(ТипДокументаСтрокой, ПараметрыЗаполнения);
	СозданныйДокумент = Результат.СоздаваемыйДокумент;
	
	Если СозданныйДокумент <> Неопределено Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Создан документ'"), ПолучитьНавигационнуюСсылку(СозданныйДокумент), Строка(СозданныйДокумент));
		Оповестить("РаспознанныйДокумент_СтатусОбработан", , СозданныйДокумент);
		
		Если Результат.УдалосьПровести Тогда
			СледующийДокумент();
		Иначе
			ПоказатьЗначение(, СозданныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокумент(ТипДокументаСтрокой, ПараметрыЗаполнения)
	
	КлючеваяОперация = "Обработка.ТОРГ12РаспознаваниеДокументов.Форма.СоздатьДокумент";
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	УдалосьПровести = Ложь;
	
	СохранитьЗначенияПередЗаписью();
	ОбъектИзФормы = РеквизитФормыВЗначение("Объект");
	
	НачатьТранзакцию();
	Попытка
		// Изменения в документе "Распознанный документ"
		Модифицированность = Ложь;
		ОбъектИзФормы.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
		ОбъектИзФормы.Записать();
		
		СоздаваемыйДокумент = РаспознаваниеДокументовСлужебный.СоздатьДокументНаОснованииРаспознанного(Объект.Ссылка, ТипДокументаСтрокой, ПараметрыЗаполнения);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = НСтр("ru = 'Ошибка создания документа:'") + Символы.ПС
	//		+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
		
		Результат = Новый Структура;
		Результат.Вставить("СоздаваемыйДокумент", СоздаваемыйДокумент);
		Результат.Вставить("УдалосьПровести", УдалосьПровести);
		
		Возврат Результат;
		
	КонецПопытки;
	
	ЗначениеВРеквизитФормы(ОбъектИзФормы, "Объект");
	
	Попытка
		СоздаваемыйДокументОбъект = СоздаваемыйДокумент.ПолучитьОбъект();
		
		Если Не СоздаваемыйДокументОбъект.ПроверитьЗаполнение() Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка проверки заполнения основного документа.'");
		КонецЕсли;
		
		РаспознаваниеДокументовПереопределяемый.ПриПроведенииДокументаНаОснованииРаспознанного(СоздаваемыйДокументОбъект);
		
		СоздаваемыйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		УдалосьПровести = Истина;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = НСтр("ru = 'Ошибка проведения основного документа:'") + Символы.ПС
		//	+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
	КонецПопытки;
	
	СохранитьСоответствиеРеквизитовЭлементам();
	
	РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(Объект, СоздаваемыйДокумент, АдресКартинки);
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	ДанныеСозданногоДокумента = ПолучитьОбратнуюСвязьДляСозданногоДокумента(СоздаваемыйДокумент);
	
	Пакет = Новый Структура;
	Пакет.Вставить("created", ДанныеСозданногоДокумента);
	
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(Объект.ИдентификаторРезультата, Пакет);
	
	Пакет = Новый Структура;
	Пакет.Вставить("diff", РезультатОбратнойСвязи);
	
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(Объект.ИдентификаторРезультата, Пакет);
	
	РезультатОбратнойСвязи = Новый Структура;
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	Комментарий.Вставить("УдалосьПровести", УдалосьПровести);
	Комментарий.Вставить("ТипДокумента", ТипДокументаСтрокой);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, , Комментарий);
	
	Результат = Новый Структура;
	Результат.Вставить("СоздаваемыйДокумент", СоздаваемыйДокумент);
	Результат.Вставить("УдалосьПровести", УдалосьПровести);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьОбратнуюСвязьДляСозданногоДокумента(СоздаваемыйДокумент)
	
	Результат = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Проведен");
	Результат.IdСозданногоДокумента = Строка(СоздаваемыйДокумент.УникальныйИдентификатор());
	Результат.НомерРаспознанногоДокумента = Объект.Номер;
	Результат.ЭтоВходящийДокумент = (Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
	Результат.НомерДокумента = Объект.РеквизитыДокумента[0].Значение;
	Результат.ДатаДокумента = Объект.РеквизитыДокумента[1].Значение;
	Результат.СуммаДокумента = ИтогоВсего;
	Результат.Контрагент = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ИсточникПоляДоговорКонтрагент);
	Результат.Организация = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ИсточникПоляДоговорОрганизация);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьСтруктуруСозданныеДокументы()
	
	СозданныеДокументы = Новый Структура;
	СозданныеДокументы.Вставить("ДокументВходящий", Новый Структура("Ссылка, СозданПоРаспознанномуДокументу", Неопределено, Ложь));
	СозданныеДокументы.Вставить("ДокументИсходящий", Новый Структура("Ссылка, СозданПоРаспознанномуДокументу", Неопределено, Ложь));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокКнопкиСозданныйДокумент()
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
		СозданныйСчет = СозданныеДокументы.ДокументВходящий.Ссылка;
		Если Не ЗначениеЗаполнено(СозданныйСчет) Тогда
			СозданныйСчет = СозданныеДокументы.ДокументИсходящий.Ссылка;
		КонецЕсли;
	Иначе
		СозданныйСчет = СозданныеДокументы.ДокументИсходящий.Ссылка;
		Если Не ЗначениеЗаполнено(СозданныйСчет) Тогда
			СозданныйСчет = СозданныеДокументы.ДокументВходящий.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СозданныйСчет) Тогда
		Элементы.ГруппаСозданныйДокумент.Видимость = Истина;
		ЗаголовокСсылки = Строка(СозданныйСчет);
		//Элементы.ОткрытьСозданныйДокумент.Заголовок = 
			//РаспознаваниеДокументовСлужебныйКлиентСервер.ОтрезатьВремяУДатыСтрокой(ЗаголовокСсылки);
	Иначе
		Элементы.ГруппаСозданныйДокумент.Видимость = Ложь;
	КонецЕсли;
	
	ДанныеИмяСтатусСчет = Объект;
	СтатусРаспознанногоДокумента = РаспознаваниеДокументовКомплекты.СтатусДокументаЧислом(ДанныеИмяСтатусСчет);
	Элементы.ОткрытьРаспознанныйДокумент.Заголовок = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
		ДанныеИмяСтатусСчет.ТипДокумента, СокрЛП(ДанныеИмяСтатусСчет.НомерДокумента), Формат(ДанныеИмяСтатусСчет.ДатаДокумента, "ДФ=dd.MM.yyyy"));
	
	ЭлементДляЗаменыНадписью = Элементы.ОткрытьРаспознанныйДокумент;
	ЭлементДляЗаменыНадписью.Видимость = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ДекорацияЭтотДокумент") Тогда
		Элементы.Удалить(Элементы["ДекорацияЭтотДокумент"]);
	КонецЕсли;
	НовыйЭлемент = Элементы.Добавить("ДекорацияЭтотДокумент", Тип("ДекорацияФормы"), ЭлементДляЗаменыНадписью.Родитель);
	НовыйЭлемент.Заголовок = ЭлементДляЗаменыНадписью.Заголовок;
	НовыйЭлемент.Шрифт = Новый Шрифт( , , Истина, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры)
	
	ФоновоеЗадание = ЗапуститьФоновоеСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры, УникальныйИдентификатор);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;
	НастройкиОжидания.ВыводитьСообщения = Истина;
	НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Создание номенклатуры для заполнения...'");
	
	Обработчик = Новый ОписаниеОповещения("ЗаполнитьТаблицуСозданнойНоменклатурой", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьФоновоеСозданиеНоменклатуры(ПараметрыСоздаваемойНоменклатуры, УникальныйИдентификатор)
	
	ПараметрыВызоваСервера = Новый Массив;
	ПараметрыВызоваСервера.Добавить(ПараметрыСоздаваемойНоменклатуры);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое создание номенклатуры'");
	
	Обработчик = "РаспознаваниеДокументовСлужебный.ФоновоеСозданиеНоменклатуры";
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(Обработчик, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуСозданнойНоменклатурой(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТаблицуСозданнойНоменклатуройНаСервере(Результат, ДополнительныеПараметры);
	
	КнопкаСозданияНоменклатуры = Элементы.СписокНераспознаннойНоменклатурыСоздатьНоменклатуру;
	КнопкаСозданияНоменклатуры.Доступность = СписокНераспознаннойНоменклатуры.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСозданнойНоменклатуройНаСервере(Результат, ДополнительныеПараметры) Экспорт
	
	ИнформацияОНоменклатуре = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из Результат.Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	Для Каждого Данные Из ИнформацияОНоменклатуре Цикл
		СтрокаЗаполнения = ТаблицаДокумента.НайтиПоИдентификатору(Данные.ИдентификаторИсходнойСтроки);
		СтрокаЗаполнения.Номенклатура = Данные.Номенклатура;
		
		РаспознаваниеДокументовПереопределяемый.ПриИзмененииКолонкиНаСервере(
			Объект,
			СтрокаЗаполнения,
			"Номенклатура",
			СтрокаЗаполнения.НомерСтроки,
			Данные.Номенклатура);
		
		Отбор = Новый Структура("ИдентификаторИсходнойСтроки", Данные.ИдентификаторИсходнойСтроки);
		НайденныеСтроки = СписокНераспознаннойНоменклатуры.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			УдаляемаяСтрока = НайденныеСтроки[0];
			СписокНераспознаннойНоменклатуры.Удалить(УдаляемаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьЗначенияИзТаблицыДокумента();
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	
	Если Не СписокНераспознаннойНоменклатуры.Количество() Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТабличнаяЧасть;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиИЗаполнитьСозданныеДокументы()
	
	// СвязанныеДокументы
	ДанныеДокумента = Новый Структура("Ссылка, ПометкаУдаления, Статус, ТипДокумента, Направление, Организация, Контрагент, СуммаДокумента, НомерДокумента, ДатаДокумента",
		Объект.Ссылка, Объект.ПометкаУдаления, Объект.Статус, Объект.ТипДокумента, Объект.Направление, ИсточникПоляДоговорОрганизация,
		ИсточникПоляДоговорКонтрагент, ИтогоВсего, Объект.РеквизитыДокумента[0].Значение, Объект.РеквизитыДокумента[1].Значение);
	КомплектныеДокументы = Новый Массив;
	РаспознаваниеДокументовСлужебный.АктуализироватьОбъектыСвязанныеСРаспознаннымДокументом(Объект);
	
	Связанные = РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ВсеСвязанныеДокументы(Объект.Ссылка);
	
	Если КомплектныеДокументы.Количество() <> 1 Тогда
		ДанныеКомплекта = Неопределено;
	КонецЕсли;
	
	Для Каждого Связанный Из Связанные Цикл
		
		Если ТипЗнч(Связанный.Ссылка) = Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
			СозданныеДокументы.ДокументВходящий.Ссылка = Связанный.Ссылка;
			СозданныеДокументы.ДокументВходящий.СозданПоРаспознанномуДокументу = Не Связанный.ПотенциальныйКандидат;
		КонецЕсли;
		
	КонецЦикла;
	
	Связанные = Связанные.ВыгрузитьКолонку("Ссылка");
	
	УжеНаФорме = Новый Массив;
	УжеНаФорме.Добавить(СозданныеДокументы.ДокументВходящий.Ссылка);
	УжеНаФорме.Добавить(СозданныеДокументы.ДокументИсходящий.Ссылка);
	
	КоличествоСвязанных = Связанные.Количество();
	Для Каждого Связанный Из УжеНаФорме Цикл
		ИдСвязанного = Связанные.Найти(Связанный);
		Если ИдСвязанного <> Неопределено Тогда
			Связанные.Удалить(ИдСвязанного);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеСозданныхДублей = Новый Структура("Документ0", Связанные);
	
	ИдДокумента = ДанныеСозданныхДублей.Количество();
	Пока ИдДокумента > 0 Цикл
		ИдДокумента = ИдДокумента - 1;
		
		Дубли = ДанныеСозданныхДублей["Документ"+ИдДокумента];
		ГруппаДобавления = Элементы["ГруппаСозданныйДокументДубли"+ИдДокумента];
		
		КоличествоДублей = Дубли.Количество();
		ИдНевидимого = ГруппаДобавления.ПодчиненныеЭлементы.Количество() - 1;
		Пока ИдНевидимого > КоличествоДублей Цикл
			// Нужно скрыть лишние элементы
			ИдНевидимого = ИдНевидимого - 1;
			СтрОбщийИд = "СозданныйДокумент"+ИдДокумента+"Дубль"+ИдНевидимого;
			Элементы[СтрОбщийИд].Видимость = Ложь;
		КонецЦикла;
		
		ИдДубля = -1;
		Для Каждого ЭтотДубль Из Дубли Цикл
			ИдДубля = ИдДубля + 1;
			СтрИдДубля = Формат(ИдДубля, "ЧГ=");
			
			СтрОбщийИд = "СозданныйДокумент"+ИдДокумента+"Дубль"+ИдДубля;
			ДубльУжеРазмещен = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, СтрОбщийИд);
			
			// гиперссылка
			ИмяКомандыДубля = "Открытие" + СтрОбщийИд;
			Если Не ДубльУжеРазмещен Тогда
				КомандаОткрытиеДубля = Команды.Добавить(ИмяКомандыДубля);
				КомандаОткрытиеДубля.Действие = "ОткрытиеДубляСозданногоДокументаОбщее";
			КонецЕсли;
			
			Если ДубльУжеРазмещен Тогда
				КнопкаОткрытияДубля = Элементы[СтрОбщийИд];
				КнопкаОткрытияДубля.Видимость = Истина;
			Иначе
				КнопкаОткрытияДубля = Элементы.Добавить(СтрОбщийИд, Тип("КнопкаФормы"), ГруппаДобавления);
				КнопкаОткрытияДубля.ИмяКоманды = ИмяКомандыДубля;
				КнопкаОткрытияДубля.Вид = ВидКнопкиФормы.Гиперссылка;
			КонецЕсли;
		//	КнопкаОткрытияДубля.Заголовок = РаспознаваниеДокументовСлужебныйКлиентСервер.ОтрезатьВремяУДатыСтрокой(Строка(ЭтотДубль));
		КонецЦикла;
	КонецЦикла;
	
	Если ДанныеКомплекта = Неопределено Тогда
		Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
			Кандидат = СозданныеДокументы.ДокументВходящий.Ссылка;
		Иначе
			Кандидат = СозданныеДокументы.ДокументИсходящий.Ссылка;
		КонецЕсли;
		
		Если Не ЧастьКомплекта Тогда
			Если ЗначениеЗаполнено(Кандидат)
				И Не РаспознаваниеДокументовСлужебный.СканУжеЕстьУВладельца(Объект, Кандидат, АдресКартинки) Тогда
				
				Элементы.ГруппаПодменюСозданиеДокумента.Видимость = Истина;
				Элементы.КомандаСоздатьДокументБезГруппы.Видимость = Ложь;
			Иначе
				Элементы.ГруппаПодменюСозданиеДокумента.Видимость = Ложь;
				Элементы.КомандаСоздатьДокументБезГруппы.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Документ0 = ДанныеДокумента;
	
	ДанныеДублей = Новый Структура("Документ0", РаспознаваниеДокументовКомплекты.ДублиРаспознанногоДокумента(Документ0));
	КоличествоСвязанных = КоличествоСвязанных + ДанныеДублей.Документ0.Количество();
	
	Если КоличествоСвязанных = 0 Тогда
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.ЦветТекстаЗаголовка = ЦветаСтиля.ЦветТекстаФормы;
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.Доступность = Ложь;
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.Заголовок = НСтр("ru = 'Нет связаных документов'");
	Иначе
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.ЦветТекстаЗаголовка = ЦветаСтиля.ГиперссылкаЦвет;
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.Доступность = Истина;
		Элементы.ГруппаВсплывающаяСвязанныеДокументы.Заголовок =
			СтрШаблон(НСтр("ru = 'Связанные документы (%1)'"), КоличествоСвязанных);
	КонецЕсли;
	
	ИдДокумента = ДанныеДублей.Количество();
	Пока ИдДокумента > 0 Цикл
		ИдДокумента = ИдДокумента - 1;
		
		Дубли = ДанныеДублей["Документ"+ИдДокумента];
		Если Дубли.Количество() = 0 Тогда
			Элементы["ГруппаДублейОбщая"+ИдДокумента].Видимость = Ложь;
		Иначе
			Элементы["ГруппаДублейОбщая"+ИдДокумента].Видимость = Истина;
			
			ГруппаДобавления = Элементы["ГруппаДублей"+ИдДокумента];
			
			КоличествоДублей = Дубли.Количество();
			Если ГруппаДобавления.ПодчиненныеЭлементы.Количество() > КоличествоДублей Тогда
				// Нужно скрыть лишние группы
				ИдНевидимого = ГруппаДобавления.ПодчиненныеЭлементы.Количество();
				Пока ИдНевидимого > КоличествоДублей Цикл
					ИдНевидимого = ИдНевидимого - 1;
					СтрОбщийИд = "Документ"+ИдДокумента+"Дубль"+ИдНевидимого;
					Элементы["Группа"+СтрОбщийИд].Видимость = Ложь;
				КонецЦикла;
			КонецЕсли;
			
			ИдДубля = -1;
			Для Каждого ЭтотДубль Из Дубли Цикл
				ИдДубля = ИдДубля + 1;
				СтрИдДубля = Формат(ИдДубля, "ЧГ=");
				
				СтрОбщийИд = "Документ"+ИдДокумента+"Дубль"+ИдДубля;
				ДубльУжеРазмещен = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "Группа"+СтрОбщийИд);
				
				Если ДубльУжеРазмещен Тогда
					Элементы["Группа"+СтрОбщийИд].Видимость = Истина;
					ГруппаСтатус = Элементы["Группа"+СтрОбщийИд];
				Иначе
					ГруппаСтатус = Элементы.Добавить("Группа" + СтрОбщийИд, Тип("ГруппаФормы"), ГруппаДобавления);
					ГруппаСтатус.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаСтатус.Отображение = ОтображениеОбычнойГруппы.Нет;
					ГруппаСтатус.ОтображатьЗаголовок = Ложь;
				КонецЕсли;
				
				// картинка статуса
				Если Не ДубльУжеРазмещен Тогда
					СтатусДубля = Новый РеквизитФормы("Статус"+СтрОбщийИд, Новый ОписаниеТипов("Число"));
					ДобавляемыеРеквизиты = Новый Массив;
					ДобавляемыеРеквизиты.Добавить(СтатусДубля);
					ЭтотОбъект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
				КонецЕсли;
				
				Если ДубльУжеРазмещен Тогда
					ПолеСтатусДубля = Элементы["Статус"+СтрОбщийИд];
				Иначе
					ПолеСтатусДубля = Элементы.Добавить("Статус" + СтрОбщийИд, Тип("ПолеФормы"), ГруппаСтатус);
					ПолеСтатусДубля.Вид = Элементы.СтатусРаспознанногоДокумента.Вид;
					ЗаполнитьЗначенияСвойств(ПолеСтатусДубля, Элементы.СтатусРаспознанногоДокумента, , "Вид, ПутьКДанным");
					ПолеСтатусДубля.ПутьКДанным = "Статус"+СтрОбщийИд;
				КонецЕсли;
				ЭтотОбъект["Статус"+СтрОбщийИд] = РаспознаваниеДокументовКомплекты.СтатусДокументаЧислом(ЭтотДубль);
				
				// гиперссылка
				ИмяКомандыДубля = "Открытие" + СтрОбщийИд;
				Если Не ДубльУжеРазмещен Тогда
					КомандаОткрытиеДубля = Команды.Добавить(ИмяКомандыДубля);
					КомандаОткрытиеДубля.Действие = "ОткрытиеДубляДокументаОбщее";
				КонецЕсли;
				
				Если ДубльУжеРазмещен Тогда
					КнопкаОткрытияДубля = Элементы[ИмяКомандыДубля];
				Иначе
					КнопкаОткрытияДубля = Элементы.Добавить(ИмяКомандыДубля, Тип("КнопкаФормы"), ГруппаСтатус);
					КнопкаОткрытияДубля.ИмяКоманды = ИмяКомандыДубля;
					КнопкаОткрытияДубля.Вид = ВидКнопкиФормы.Гиперссылка;
				КонецЕсли;
				КнопкаОткрытияДубля.Заголовок = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
					ЭтотДубль.ТипДокумента, СокрЛП(ЭтотДубль.НомерДокумента), Формат(ЭтотДубль.ДатаДокумента, "ДФ=dd.MM.yyyy"));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	// СвязанныеДокументы
	
	ОбновитьЗаголовокКнопкиСозданныйДокумент();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОткрытияФормы(Знач ТипДокументаСтрокой)
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Основание", Объект.Ссылка);
	ПараметрыЗаполнения.Вставить("НомерВходящегоДокумента", Объект.РеквизитыДокумента[0].Значение);
	ПараметрыЗаполнения.Вставить("ДатаВходящегоДокумента", Объект.РеквизитыДокумента[1].Значение);
	ПараметрыЗаполнения.Вставить("Дата", Объект.РеквизитыДокумента[1].Значение);
	ПараметрыЗаполнения.Вставить("ДоговорКонтрагента", Объект.РеквизитыДокумента[6].Значение);
	
	Для Каждого ДанныеРеквизита Из Объект.РеквизитыДокумента Цикл
		ПараметрыЗаполнения.Вставить(ДанныеРеквизита.ИмяРеквизита, ДанныеРеквизита.Значение);
	КонецЦикла;
	
	Если ТипДокументаСтрокой = "СчетНаОплатуПоставщика" Тогда
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.ПокупательОрганизация);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Продавец);
	Иначе
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыЗаполнения.Исполнитель);
		ПараметрыЗаполнения.Вставить("Контрагент", ПараметрыЗаполнения.Покупатель);
		ПараметрыЗаполнения.Вставить("ОрганизацияПолучатель", ПараметрыЗаполнения.ПродавецОрганизация);
		
		ПараметрыЗаполнения.Вставить("СтруктурнаяЕдиница", ПараметрыЗаполнения.БанковскийСчетОрганизации);
		ПараметрыЗаполнения.Вставить("Номер", Объект.РеквизитыДокумента[0].Значение);
	КонецЕсли;
	
	СтрокиТаблицыТовары = Новый Массив;
	
	КолонкиТаблицы = ПолучитьРеквизиты("ТаблицаДокумента");
	Для Каждого СтрокаТаблицыДокумента Из ТаблицаДокумента Цикл
		ДанныеСтрокиТаблицы = Новый Структура();
		Для Каждого Колонка Из КолонкиТаблицы Цикл
			ДанныеСтрокиТаблицы.Вставить(Колонка.Имя, СтрокаТаблицыДокумента[Колонка.Имя]);
		КонецЦикла;
		
		СтрокиТаблицыТовары.Добавить(ДанныеСтрокиТаблицы);
	КонецЦикла;
	
	ПараметрыЗаполнения.Вставить("Товары", СтрокиТаблицыТовары);
	
	Если ПараметрыЗаполнения.Свойство("ИтогоВсего")
		И ПараметрыЗаполнения.Свойство("ИтогоСумма") Тогда
		
		Если ПараметрыЗаполнения.ИтогоВсего <> 0
			И ПараметрыЗаполнения.ИтогоСумма <> 0 Тогда
			
			ПараметрыЗаполнения.Вставить("СуммаВключаетНДС", (ПараметрыЗаполнения.ИтогоВсего = ПараметрыЗаполнения.ИтогоСумма));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаСервере
Процедура ПерепроверитьНаСервере()
	
	СохранитьЗначенияПередЗаписью();
	
	ТаблицаДокумента.Очистить();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	РаспознаваниеДокументов.ЗаполнитьСпискиВыбораНаСервере(ДокументОбъект, Объект.Ссылка, Истина);
	Документы.РаспознанныйДокумент.ЗаполнитьЗначенияРаспознанногоДокумента(ДокументОбъект, ДокументОбъект.Ссылка);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ЗаполнитьАдресаКартинок();
	СохранитьСоответствиеРеквизитовЭлементам();
	
	НастроитьЭлементыПоРеквизитам();
	ЗаполнитьТаблицуДокумента();
	
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[9].Значение) Тогда
		// Организация покупатель
		Объект.РеквизитыДокумента[9].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[8].Значение) Тогда
		// Организация продавец
		Объект.РеквизитыДокумента[8].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[17].Значение) Тогда
		// Исполнитель
		Объект.РеквизитыДокумента[17].Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не УправлениеДоступом.ЧтениеРазрешено(Объект.РеквизитыДокумента[6].Значение) Тогда
		// Договор
		Объект.РеквизитыДокумента[6].Значение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	ИзменитьИсточникиДляВыбораДоговора();
	ОбновитьСписокВыбораБанковскихСчетов();
	ИзменитьИсточникиДляВыбораБанковскихСчетов(Ложь);
	РаспознаваниеДокументовСлужебный.ПересчитатьПроблемныеЭлементы(ЭтотОбъект);
	РаспознаваниеДокументовСлужебный.ВосстановитьТекстыОшибок(ЭтотОбъект);
	
	НайтиИЗаполнитьСозданныеДокументы();
	
	СвойстваЯчеекТаблицы = РаспознаваниеДокументовСлужебный.СвойстваЯчеекТаблицы(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументВходящий(Команда)
	ОткрытьДокументПоСсылке(СозданныеДокументы.ДокументВходящий.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументИсходящий(Команда)
	ОткрытьДокументПоСсылке(СозданныеДокументы.ДокументИсходящий.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументПоСсылке(ДокументСсылка)
	ПерейтиПоНавигационнойСсылке(ПолучитьНавигационнуюСсылку(ДокументСсылка));
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияИзТаблицыДокумента()
	
	ТаблицаДокументаТЗ = РеквизитФормыВЗначение("ТаблицаДокумента");
	
	// Удаляем колонки, которые не нужно сохранять
	ТаблицаДокументаТЗ.Колонки.Удалить("Отступ");
	ТаблицаДокументаТЗ.Колонки.Удалить("Услуга");
	ИдКолонки = ТаблицаДокументаТЗ.Колонки.Количество();
	Пока ИдКолонки > 0 Цикл
		ИдКолонки = ИдКолонки - 1;
		Если Прав(ТаблицаДокументаТЗ.Колонки[ИдКолонки].Имя, 11) = "ТекстОшибки" Тогда
			ТаблицаДокументаТЗ.Колонки.Удалить(ИдКолонки);
		КонецЕсли;
	КонецЦикла;
	
	РаспознаваниеДокументовСлужебный.СохранитьТаблицуДокумента(Объект, ТаблицаДокументаТЗ);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИтоговыеЗначения()
	
	Объект.РеквизитыДокумента[10].Значение = ИтогоСумма;
	Объект.РеквизитыДокумента[11].Значение = ИтогоСуммаНДС;
	Объект.РеквизитыДокумента[12].Значение = ИтогоВсего;
	Объект.КоличествоОшибок = ОсталосьОшибок;
	Объект.КоличествоОшибокВТаблицах = ОсталосьОшибок - ПроблемныеЭлементы.Выгрузить(Новый Структура("НомерСтроки", 0), "ИмяРеквизита").Количество();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементыИтогов()
	
	ИтогоСумма = Объект.РеквизитыДокумента[10].Значение;
	ИтогоСуммаНДС = Объект.РеквизитыДокумента[11].Значение;
	ИтогоВсего = Объект.РеквизитыДокумента[12].Значение;
	
	Объект.РеквизитыДокумента[10].ИмяЭлемента = "ИтогоСумма";
	Объект.РеквизитыДокумента[11].ИмяЭлемента = "ИтогоСуммаНДС";
	Объект.РеквизитыДокумента[12].ИмяЭлемента = "ИтогоВсего";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеВыделенияРамкойПоляДокумента(ИмяРеквизита, НомерСтроки)
	
	ДанныеТаблицы = СтрокаТаблицыДокументаПоПараметрам(НомерСтроки, ИмяРеквизита);
	Если ДанныеТаблицы = Неопределено Тогда
		ДанныеТаблицы = СтрокаТаблицыДокументаПоПараметрам(НомерСтроки, "Номенклатура");
		Если ДанныеТаблицы = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Координаты = РаспознаваниеДокументовСлужебныйКлиентСервер.ПолучитьНаборКоординат(ДанныеТаблицы);
	ДанныеПриближения = Новый Структура("Координаты, СтрокВИзображении", Координаты, ДанныеТаблицы.СтрокВИзображении);
	ПодключитьОбработчикОжидания("Подключаемый_ПриблизитьПоКоординатам", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеДляВыделенныхСтрок(Значение, ИмяКолонки)
	
	ИдентификаторыВыделенныхСтрок = Элементы.СписокНераспознаннойНоменклатуры.ВыделенныеСтроки;
	Для Каждого ИдентификаторСтроки Из ИдентификаторыВыделенныхСтрок Цикл
		ИзменяемаяСтрока = СписокНераспознаннойНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтроки);
		ИзменяемаяСтрока[ИмяКолонки] = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиНераспознаннойНоменклатуры()
	
	СтрокиПустойНоменклатуры = Новый Массив;
	
//	ПорогДобавления = РаспознаваниеДокументовСлужебныйВызовСервера.ПорогНоменклатурыДляГрупповогоСоздания();
	Для Каждого СтрокаНоменклатуры Из ТаблицаДокумента Цикл
		Если СтрокаНоменклатуры.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
			СтрокиПустойНоменклатуры.Добавить(СтрокаНоменклатуры);
			Продолжить;
		КонецЕсли;
		
		ИмеющиесяДанные = СтрокаТаблицыДокументаПоПараметрам(СтрокаНоменклатуры.НомерСтроки, "Номенклатура");
		Если ИмеющиесяДанные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ИмеющиесяДанные.ЗаполненоВручную
			И СтрокаНоменклатуры.Номенклатура = ИмеющиесяДанные.НайденноеЗначение
			//И ИмеющиесяДанные.УверенностьНайденногоЗначения <= ПорогДобавления 
			Тогда
			
			СтрокиПустойНоменклатуры.Добавить(СтрокаНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторыИсходныхСтрок = Новый Соответствие();
	Для Каждого СтрокаПустойНоменклатуры Из СтрокиПустойНоменклатуры Цикл
		ИдентификаторыИсходныхСтрок.Вставить(СтрокаПустойНоменклатуры.ПолучитьИдентификатор(), СтрокаПустойНоменклатуры);
	КонецЦикла;
	
	// Удаление исправленных значений
	Индекс = СписокНераспознаннойНоменклатуры.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		ИдентификаторТекущейСтроки = СписокНераспознаннойНоменклатуры[Индекс].ИдентификаторИсходнойСтроки;
		НайденноеЗначение = ИдентификаторыИсходныхСтрок.Получить(ИдентификаторТекущейСтроки);
		Если НайденноеЗначение = Неопределено Тогда
			СписокНераспознаннойНоменклатуры.Удалить(Индекс);
		Иначе // Отключение ранее добавленных строк
			ИндексУдаляемойСтроки = СтрокиПустойНоменклатуры.Найти(НайденноеЗначение);
			Если Не ИндексУдаляемойСтроки = Неопределено Тогда
				СтрокиПустойНоменклатуры.Удалить(ИндексУдаляемойСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	// Добавление новых
	Для Каждого СтрокаПустойНоменклатуры Из СтрокиПустойНоменклатуры Цикл
		СвойстваНераспознаннойНоменклатуры = СписокНераспознаннойНоменклатуры.Добавить();
		СвойстваНераспознаннойНоменклатуры.ИдентификаторИсходнойСтроки = СтрокаПустойНоменклатуры.ПолучитьИдентификатор();
		
		Отбор = Новый Структура("НомерСтрокиТЧ", СтрокаПустойНоменклатуры.НомерСтроки);
		СвязанныеСтрокиОбъекта = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
		
		ДанныеЗаполнения = РаспознаваниеДокументовСлужебныйКлиент.ДанныеЗаполненияДляНовогоЭлемента(СвязанныеСтрокиОбъекта);
		ЗаполнитьЗначенияСвойств(СвойстваНераспознаннойНоменклатуры, ДанныеЗаполнения);
	КонецЦикла;
	
	КнопкаСозданияНоменклатуры = Элементы.СписокНераспознаннойНоменклатурыСоздатьНоменклатуру;
	КнопкаСозданияНоменклатуры.Доступность = СписокНераспознаннойНоменклатуры.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеДляРеквизитовБыстрогоРедактирования(ИмяРеквизита, Значение = Неопределено)
	
	РедактируемаяСтрока = СтрокаПолейНераспознаннойНоменклатурыПоИмениРеквизита(ИмяРеквизита);
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактируемаяСтрока.Выбран Тогда
		Возврат;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Тип = ТипЗнч(РедактируемаяСтрока.Значение);
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(Тип);
		ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
		Значение = ОписаниеТипа.ПривестиЗначение();
	КонецЕсли;
	
	РедактируемаяСтрока.Значение = Значение;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаПолейНераспознаннойНоменклатурыПоИмениРеквизита(ИмяРеквизита)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденныеСтроки = ПоляНераспознаннойНоменклатуры.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СтрокаТаблицыДокументаПоПараметрам(НомерСтроки, ИмяРеквизита)
	
	Отбор = Новый Структура("НомерСтрокиТЧ, ИмяРеквизита", НомерСтроки, ИмяРеквизита);
	НайденныеСтроки = Объект.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		Возврат НайденныеСтроки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьДоступностьКнопкиУстановкиРеквизитов()
	
	Отбор = Новый Структура("Выбран", Истина);
	ВыбранныеЭлементы = ПоляНераспознаннойНоменклатуры.НайтиСтроки(Отбор);
	
	Элементы.ИзменитьЗначенияСтрокНераспознаннойНоменклатуры.Доступность = ВыбранныеЭлементы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодтвержденияЗакрытия(Результат, Контекст) Экспорт
	
	ЭтотОбъект.Записать();
	Подключаемый_ПослеЗаписи();
	
	КлючеваяОперация = "РаспознаваниеДокументов.ЗакрытиеФормы." + ИмяФормы;
	Замер = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	Комментарий = Новый Структура;
	Комментарий.Вставить("ИдентификаторРезультата", Объект.ИдентификаторРезультата);
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(Замер, Комментарий);
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оформление ячеек с ошибками
	
	ТаблицаДокументаТЗ = РеквизитФормыВЗначение("ТаблицаДокумента");
	КолонкиТаблицыДокумента = ТаблицаДокументаТЗ.Колонки;
	
	Для Каждого Колонка Из КолонкиТаблицыДокумента Цикл
		
		Если СтрЗаканчиваетсяНа(Колонка.Имя, "ТекстОшибки") Тогда
			
			ИмяКолонкиОригинал = СтрЗаменить(Колонка.Имя, "ТекстОшибки", "");
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			
			ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаДокумента." + Колонка.Имя);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиОригинал);
			
			ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(251, 212, 212));
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
