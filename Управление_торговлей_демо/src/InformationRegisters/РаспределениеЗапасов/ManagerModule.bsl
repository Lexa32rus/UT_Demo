#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Склад)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РаспределениеЗапасов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.9.39";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("d05af858-ca38-4f1b-a9fc-ae8050472af0");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РаспределениеЗапасов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет данные по необособленным работам'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.РаспределениеЗапасов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РаспределениеЗапасовДвижения.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РаспределениеЗапасов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РаспределениеЗапасовДвижения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РаспределениеЗапасов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РаспределениеЗапасов");
	
	// Необособленные работы, полный пересчет регистра.
	ТипыРегистраторов = Новый Массив();
	ТипыРегистраторов.Добавить("Документ.АктВыполненныхРабот");
	ТипыРегистраторов.Добавить("Документ.ЗаказКлиента");
	ТипыРегистраторов.Добавить("Документ.ЗаказПоставщику");
	ТипыРегистраторов.Добавить("Документ.ЗаявкаНаВозвратТоваровОтКлиента");
	ТипыРегистраторов.Добавить("Документ.КорректировкаПриобретения");
	ТипыРегистраторов.Добавить("Документ.КорректировкаРеализации");
	ТипыРегистраторов.Добавить("Документ.ОтчетОРозничныхПродажах");
	ТипыРегистраторов.Добавить("Документ.ПередачаТоваровМеждуОрганизациями");
	ТипыРегистраторов.Добавить("Документ.ПриобретениеТоваровУслуг");
	ТипыРегистраторов.Добавить("Документ.РеализацияТоваровУслуг");
	ТипыРегистраторов.Добавить("Документ.ЧекККМ");
	ТипыРегистраторов.Добавить("Документ.ЧекККМВозврат");
	ТипыРегистраторов.Добавить("Документ.ЧекККМКоррекции");


	
	Регистры = Новый Структура("РаспределениеЗапасовДвижения");
	ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	ДопПараметры.ПолучитьТекстыЗапроса = Истина;
	ЗначенияПараметров = РаспределениеЗапасовДвижения.ЗначенияПараметровДляТекстовЗапросовПроведенияДокументов();
	ТекстыИтоговые = Новый Массив();
	Для Каждого ПолноеИмяДокумента Из ТипыРегистраторов Цикл
		
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
		ТекстыЗапроса = Документы[ИмяДокумента].ДанныеДокументаДляПроведения(Неопределено, Регистры, ДопПараметры);
		Тексты = Новый Массив();
		Для Каждого Элемент Из ТекстыЗапроса Цикл
			Если Элемент.Представление = "РаспределениеЗапасовДвижения" Тогда
				Тексты.Добавить(Элемент.Значение);
			КонецЕсли;
		КонецЦикла;
		ТекстЗапроса = СтрСоединить(Тексты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Ссылка) = &Ссылка", ".Ссылка.Проведен)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Ссылка В (&Ссылка)", ".Ссылка.Проведен");
		ТекстыИтоговые.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	ВложенныйЗапрос = СтрСоединить(ТекстыИтоговые, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Набор.Номенклатура КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Склад КАК Склад,
		|	Набор.Назначение КАК Назначение,
		|	ВЫБОР КОГДА Набор.КОбеспечениюБезРезерва = 0 И Набор.РезервироватьПоМереПоступления = 0 И Набор.НеОбеспечивать = 0 И Набор.Резервировать = 0 И Набор.ЗакрытьГрафикОтгрузки = 0 ТОГДА
		|				НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ
		|				Набор.ЗаказНаОтгрузку
		|		КОНЕЦ КАК ЗаказНаОтгрузку,
		|	Набор.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	Набор.ЗаказНаПоступление КАК ЗаказНаПоступление,
		|	Набор.ДатаПоступления КАК ДатаПоступления,
		|	СУММА(Набор.Отгрузить) КАК Отгрузить,
		|	СУММА(Набор.Резервировать) КАК Резервировать,
		|	СУММА(Набор.РезервироватьПоМереПоступления) КАК РезервироватьПоМереПоступления,
		|	СУММА(Набор.КОбеспечениюБезРезерва) КАК КОбеспечениюБезРезерва,
		|	СУММА(Набор.НеОбеспечивать) КАК НеОбеспечивать,
		|	СУММА(Набор.Поступило) КАК Поступило,
		|	СУММА(Набор.ПоступитКДате) КАК ПоступитКДате,
		|	СУММА(Набор.ПоставкаНаСогласовании) КАК ПоставкаНаСогласовании,
		|	СУММА(Набор.ЗакрытьГрафикПоступления) КАК ЗакрытьГрафикПоступления,
		|	СУММА(Набор.ЗакрытьГрафикОтгрузки) КАК ЗакрытьГрафикОтгрузки
		|ПОМЕСТИТЬ ВсеНеобособленныеРаботы
		|ИЗ
		|	ВложенныйЗапросПереопределяемый КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура,
		|	Набор.Характеристика,
		|	Набор.Склад,
		|	Набор.Назначение,
		|	ВЫБОР КОГДА Набор.КОбеспечениюБезРезерва = 0 И Набор.РезервироватьПоМереПоступления = 0 И Набор.НеОбеспечивать = 0 И Набор.Резервировать = 0 И Набор.ЗакрытьГрафикОтгрузки = 0 ТОГДА
		|				НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ
		|				Набор.ЗаказНаОтгрузку
		|		КОНЕЦ,
		|	Набор.ЖелаемаяДатаОтгрузки,
		|	Набор.ЗаказНаПоступление,
		|	Набор.ДатаПоступления
		|ИМЕЮЩИЕ
		|	(СУММА(Набор.Отгрузить) <> 0
		|		ИЛИ СУММА(Набор.Резервировать) <> 0
		|		ИЛИ СУММА(Набор.ЗакрытьГрафикПоступления) <> 0
		|		ИЛИ СУММА(Набор.РезервироватьПоМереПоступления) <> 0
		|		ИЛИ СУММА(Набор.КОбеспечениюБезРезерва) <> 0
		|		ИЛИ СУММА(Набор.НеОбеспечивать) <> 0
		|		ИЛИ СУММА(Набор.Поступило) <> 0
		|		ИЛИ СУММА(Набор.ПоступитКДате) <> 0
		|		ИЛИ СУММА(Набор.ПоставкаНаСогласовании) <> 0)
		|	И Набор.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	И ТИПЗНАЧЕНИЯ(Набор.Склад) = ТИП(Справочник.СтруктураПредприятия)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВложенныйЗапросПереопределяемый", СтрШаблон("(%1)", ВложенныйЗапрос));
	
	Тексты = Новый Массив();
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Назначение КАК Назначение,
		|	СУММА(Таблица.Поступило) КАК Поступило,
		|	СУММА(Таблица.Отгрузить) КАК Отгрузить
		|ПОМЕСТИТЬ АктивныеТовары
		|ИЗ
		|	ВсеНеобособленныеРаботы КАК Таблица
		|ГДЕ
		|	Таблица.ЗаказНаПоступление = НЕОПРЕДЕЛЕНО
		|		И Таблица.ЗаказНаОтгрузку = НЕОПРЕДЕЛЕНО
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Склад,
		|	Таблица.Назначение
		|ИМЕЮЩИЕ
		|	СУММА(Таблица.Поступило) - СУММА(Таблица.Отгрузить) <> 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.ЗаказНаПоступление КАК ЗаказНаПоступление
		|ПОМЕСТИТЬ АктивныеЗаказыНаПоступление
		|ИЗ
		|	ВсеНеобособленныеРаботы КАК Таблица
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Склад,
		|	Таблица.Назначение,
		|	Таблица.ЗаказНаПоступление
		|ИМЕЮЩИЕ
		|	СУММА(Таблица.ПоступитКДате + Таблица.ПоставкаНаСогласовании - Таблица.ЗакрытьГрафикПоступления) > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаПоступление, Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку
		|ПОМЕСТИТЬ АктивныеЗаказыНаОтгрузку
		|ИЗ
		|	ВсеНеобособленныеРаботы КАК Таблица
		|ГДЕ
		|	Таблица.НеОбеспечивать - Таблица.ЗакрытьГрафикОтгрузки > 0
		|		ИЛИ Таблица.КОбеспечениюБезРезерва > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказНаОтгрузку, Номенклатура, Характеристика, Склад, Назначение
		|;
		|
		|///////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Назначение КАК Назначение
		|ИЗ
		|	АктивныеТовары КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК Сведения
		|		ПО Сведения.Номенклатура = Таблица.Номенклатура
		|		 И Сведения.Характеристика = Таблица.Характеристика
		|		 И Сведения.Склад = Таблица.Склад
		|		 И Сведения.Назначение = Таблица.Назначение
		|		 И Сведения.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		|ГДЕ
		|	Сведения.Номенклатура ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Назначение КАК Назначение
		|ИЗ
		|	АктивныеЗаказыНаПоступление КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК Сведения
		|		ПО Сведения.Номенклатура = Таблица.Номенклатура
		|		 И Сведения.Характеристика = Таблица.Характеристика
		|		 И Сведения.Склад = Таблица.Склад
		|		 И Сведения.Назначение = Таблица.Назначение
		|		 И Сведения.ЗаказНаПоступление = Таблица.ЗаказНаПоступление
		|		 И Сведения.Состояние В(
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПоступлениеНеподтвержденное))
		|ГДЕ
		|	Сведения.Номенклатура ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Назначение КАК Назначение
		|ИЗ
		|	АктивныеЗаказыНаОтгрузку КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК Сведения
		|		ПО Сведения.Номенклатура = Таблица.Номенклатура
		|		 И Сведения.Характеристика = Таблица.Характеристика
		|		 И Сведения.Склад = Таблица.Склад
		|		 И Сведения.Назначение = Таблица.Назначение
		|		 И Сведения.ЗаказНаОтгрузку = Таблица.ЗаказНаОтгрузку
		|		 И Сведения.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
		|ГДЕ
		|	Сведения.Номенклатура ЕСТЬ NULL";
	
	Тексты.Добавить(ТекстЗапроса);
	Запрос = Новый Запрос(СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Для Каждого Элемент Из ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	РегистрируемыеИзмерения = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РегистрируемыеИзмерения, ДополнительныеПараметры);
	
	// Товары и обособленные работы, расчет поля излишек.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сведения.Номенклатура КАК Номенклатура,
		|	Сведения.Характеристика КАК Характеристика,
		|	Сведения.Склад КАК Склад,
		|	Сведения.Назначение КАК Назначение
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК Сведения
		|ГДЕ
		|	Сведения.Состояние В(
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление),
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПоступлениеНеПодтвержденное),
		|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка))
		|СГРУППИРОВАТЬ ПО
		|	Сведения.Номенклатура,
		|	Сведения.Характеристика,
		|	Сведения.Склад,
		|	Сведения.Назначение
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА Сведения.Свободно < 0
		|				ТОГДА
		|					0
		|			ИНАЧЕ Сведения.Свободно
		|		КОНЕЦ) > 0
		|		И СУММА(ВЫБОР
		|					КОГДА Сведения.Излишек < 0
		|						ТОГДА
		|							0
		|					ИНАЧЕ Сведения.Излишек
		|			КОНЕЦ) = 0
		|		И СУММА(ВЫБОР
		|					КОГДА Сведения.Свободно < 0
		|						ТОГДА
		|							0
		|					ИНАЧЕ Сведения.Свободно
		|			КОНЕЦ) > СУММА(Сведения.КОбеспечениюБезРезерва + Сведения.ОтложитьРезервирование)
		|		ИЛИ СУММА(ВЫБОР
		|					КОГДА Сведения.Свободно < 0
		|						ТОГДА
		|							Сведения.Свободно
		|					ИНАЧЕ 0
		|				КОНЕЦ) <> СУММА(ВЫБОР
		|									КОГДА Сведения.Излишек < 0
		|										ТОГДА
		|											Сведения.Излишек
		|									ИНАЧЕ 0
		|								КОНЕЦ)";
		
	РегистрируемыеИзмерения = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РегистрируемыеИзмерения, ДополнительныеПараметры);
	
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.РаспределениеЗапасов";
	
	Если Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Неопределено, "РегистрНакопления.РаспределениеЗапасовДвижения") Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТаблицаОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Для Каждого Строка Из ТаблицаОбновляемыеДанные Цикл
		
		Набор = Неопределено;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных();
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РаспределениеЗапасовДвижения");
			ЭлементБлокировки.УстановитьЗначение("Номенклатура", Строка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Строка.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад", Строка.Склад);
			Если ЗначениеЗаполнено(Строка.Назначение) Тогда
				ЭлементБлокировки.УстановитьЗначение("Назначение", Строка.Назначение);
			КонецЕсли;
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РаспределениеЗапасов");
			ЭлементБлокировки.УстановитьЗначение("Номенклатура", Строка.Номенклатура);
			ЭлементБлокировки.УстановитьЗначение("Характеристика", Строка.Характеристика);
			ЭлементБлокировки.УстановитьЗначение("Склад", Строка.Склад);
			ЭлементБлокировки.УстановитьЗначение("Назначение", Строка.Назначение);
			
			Блокировка.Заблокировать();
			
			Если ТипЗнч(Строка.Склад) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда // работы
				Набор = РаспределениеЗапасов.ОбновлениеИБПоТовару(Строка);
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			Иначе
				Набор = РегистрыСведений.РаспределениеЗапасов.СоздатьНаборЗаписей();
				Набор.Отбор.Номенклатура.Установить(Строка.Номенклатура);
				Набор.Отбор.Характеристика.Установить(Строка.Характеристика);
				Набор.Отбор.Склад.Установить(Строка.Склад);
				Набор.Отбор.Назначение.Установить(Строка.Назначение);
				ЗаполнитьНаборРассчитатьИзлишек(Набор, Строка);
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
			КонецЕсли;
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			Если Набор = Неопределено Тогда
				Набор = РегистрыСведений.РаспределениеЗапасов.СоздатьНаборЗаписей();
				Набор.Отбор.Номенклатура.Установить(Строка.Номенклатура);
				Набор.Отбор.Характеристика.Установить(Строка.Характеристика);
				Набор.Отбор.Склад.Установить(Строка.Склад);
				Набор.Отбор.Назначение.Установить(Строка.Назначение);
			КонецЕсли;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Набор);
		КонецПопытки;
		
	КонецЦикла;
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ЗаполнитьНаборРассчитатьИзлишек(Набор, Строка)
	
	Текст =
		"ВЫБРАТЬ
		|	СУММА(ОжидаемаяОтгрузка.ОтложитьРезервирование + ОжидаемаяОтгрузка.КОбеспечениюБезРезерва) КАК Количество
		|ПОМЕСТИТЬ Потребности
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК ОжидаемаяОтгрузка
		|ГДЕ
		|	ОжидаемаяОтгрузка.Номенклатура = &Номенклатура
		|		И ОжидаемаяОтгрузка.Характеристика = &Характеристика
		|		И ОжидаемаяОтгрузка.Склад = &Склад
		|		И ОжидаемаяОтгрузка.Назначение = &Назначение
		|		И ОжидаемаяОтгрузка.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемаяОтгрузка)
		|		И (ОжидаемаяОтгрузка.ОтложитьРезервирование > 0
		|			Или ОжидаемаяОтгрузка.КОбеспечениюБезРезерва > 0)
		|;
		|
		|/////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Номенклатура,
		|	Остатки.Характеристика,
		|	Остатки.Склад,
		|	Остатки.Назначение,
		|	Остатки.Состояние,
		|	Остатки.ЗаказНаОтгрузку,
		|	Остатки.ЖелаемаяДатаОтгрузки,
		|	Остатки.ЗаказНаПоступление,
		|	Остатки.ДатаПоступления,
		|	Остатки.ТипЗаписиРаспределенияЗапасов,
		|	Остатки.РезервироватьПоМереПоступления,
		|	Остатки.КОбеспечениюБезРезерва,
		|	Остатки.ОтложитьРезервирование,
		|	Остатки.Резервировать,
		|	Остатки.НеОбеспечивать,
		|	Остатки.Зарезервировано,
		|	Остатки.Обеспечено,
		|	Остатки.РезервПревышаетОстатки,
		|	Остатки.НеОбеспечено,
		|	Остатки.Запас,
		|	Остатки.Резерв,
		|	Остатки.Свободно,
		|	Остатки.Излишек,
		|	Остатки.ВНаличии,
		|	Остатки.РезервироватьПоМереПоступленияИтогНаДату,
		|	Остатки.НеОбеспеченоКОбеспечению,
		|	ВЫБОР
		|		КОГДА Остатки.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		|			ТОГДА
		|				1
		|		КОГДА Остатки.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление)
		|			ТОГДА
		|				2
		|		КОГДА Остатки.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПоступлениеНеподтвержденное)
		|			ТОГДА
		|				3
		|	КОНЕЦ КАК Порядок,
		|	ЕСТЬNULL(Потребности.Количество, 0) КАК Количество
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК Остатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Потребности КАК Потребности
		|		ПО ИСТИНА
		|ГДЕ
		|	Остатки.Номенклатура = &Номенклатура
		|		И Остатки.Характеристика = &Характеристика
		|		И Остатки.Склад = &Склад
		|		И Остатки.Назначение = &Назначение
		|		И Остатки.Состояние В(
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПоступлениеНеподтвержденное))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспределениеЗапасов.Номенклатура,
		|	РаспределениеЗапасов.Характеристика,
		|	РаспределениеЗапасов.Склад,
		|	РаспределениеЗапасов.Назначение,
		|	РаспределениеЗапасов.Состояние,
		|	РаспределениеЗапасов.ЗаказНаОтгрузку,
		|	РаспределениеЗапасов.ЖелаемаяДатаОтгрузки,
		|	РаспределениеЗапасов.ЗаказНаПоступление,
		|	РаспределениеЗапасов.ДатаПоступления,
		|	РаспределениеЗапасов.ТипЗаписиРаспределенияЗапасов,
		|	РаспределениеЗапасов.РезервироватьПоМереПоступления,
		|	РаспределениеЗапасов.КОбеспечениюБезРезерва,
		|	РаспределениеЗапасов.ОтложитьРезервирование,
		|	РаспределениеЗапасов.Резервировать,
		|	РаспределениеЗапасов.НеОбеспечивать,
		|	РаспределениеЗапасов.Зарезервировано,
		|	РаспределениеЗапасов.Обеспечено,
		|	РаспределениеЗапасов.РезервПревышаетОстатки,
		|	РаспределениеЗапасов.НеОбеспечено,
		|	РаспределениеЗапасов.Запас,
		|	РаспределениеЗапасов.Резерв,
		|	РаспределениеЗапасов.Свободно,
		|	РаспределениеЗапасов.Излишек,
		|	РаспределениеЗапасов.ВНаличии,
		|	РаспределениеЗапасов.РезервироватьПоМереПоступленияИтогНаДату,
		|	РаспределениеЗапасов.НеОбеспеченоКОбеспечению,
		|	4 КАК Порядок,
		|	0 КАК Количество
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|ГДЕ
		|	РаспределениеЗапасов.Номенклатура = &Номенклатура
		|		И РаспределениеЗапасов.Характеристика = &Характеристика
		|		И РаспределениеЗапасов.Склад = &Склад
		|		И РаспределениеЗапасов.Назначение = &Назначение
		|		И НЕ РаспределениеЗапасов.Состояние В(
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление),
		|			ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ПоступлениеНеподтвержденное))
		|УПОРЯДОЧИТЬ ПО
		|	Порядок, ДатаПоступления, ЗаказНаПоступление";
	Запрос = Новый Запрос(Текст);
	Запрос.УстановитьПараметр("Номенклатура", Строка.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Строка.Характеристика);
	Запрос.УстановитьПараметр("Склад", Строка.Склад);
	Запрос.УстановитьПараметр("Назначение", Строка.Назначение);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ВсегоСтрок = Таблица.Количество();
	Количество = 0;
	Если ВсегоСтрок > 0 Тогда
		Количество = Таблица[0].Количество;
	КонецЕсли;
	
	Для Индекс = 0 По ВсегоСтрок - 1 Цикл
		
		СтрокаТаблицы = Таблица[Индекс];
		КоличествоРаспределить = Мин(Количество, Макс(СтрокаТаблицы.Свободно, 0));
		СтрокаТаблицы.Излишек = СтрокаТаблицы.Свободно - КоличествоРаспределить;
		Количество = Количество - КоличествоРаспределить;
		Если СтрокаТаблицы.Порядок > 3 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	Набор.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
